-- UNCOMMENT THE FOLLOWING DECLARE STATEMENTS FOR GETTING A FULL_REFRESH :)

-- DECLARE DATE1 DATE DEFAULT '2019-11-01';
-- DECLARE DATE2 DATE DEFAULT '2021-10-15';
-- DECLARE DATE3 DATE DEFAULT '2021-01-30';
-- DECLARE DATE4 DATE DEFAULT '2021-01-01'; 
-- DECLARE DATE5 DATE DEFAULT '2023-03-16';   --ckpt migration for base cpd components 

-- COMMENT THE FOLLOWING DELCARE STATEMENTS WHEN RUNNING A FULL_REFRESH


DECLARE DATE1 DATE DEFAULT date_add(current_date("US/Pacific"),interval -20 day);
DECLARE DATE2 DATE DEFAULT date_add(current_date("US/Pacific"),interval -20 day);
DECLARE DATE3 DATE DEFAULT date_add(current_date("US/Pacific"),interval -20 day);
DECLARE DATE4 DATE DEFAULT date_add(current_date("US/Pacific"),interval -20 day); 
DECLARE DATE5 DATE DEFAULT date_add(current_date("US/Pacific"),interval -20 day);  --ckpt migration for base cpd components


--Table created at order num, PO number level with delivery details 
--Now PO_NUM will be populated with non null values  for DAAS Orders   with DLVR_REF_ID in DS_ALL FINAL 10 Table and eventually populate ds_all final  - (ticket 989)

create or replace table  LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS as(
SELECT  src.SRC_SALES_ORDER_NUM AS SALES_ORDER_NUM,src.trip_id ,src.po_num
    , MAX(CARRIER_NM) AS CAR_MAX
	, MAX(CASE WHEN UPPER(CARRIER_NM) = 'SPARK'  
	  THEN 'SPARK' ELSE NULL END) AS CAR_SPARK
    , MAX(SRC.DRVR_USER_ID ) AS DRVR_MAX
	, MAX(CASE WHEN UPPER(CARRIER_NM) = 'SPARK'   
	  THEN SRC.DRVR_USER_ID ELSE NULL END) AS DRVR_SPARK
    , MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN ('DL','DLU','POST_DELIVERED') 
	  THEN  src.src_cre_ts ELSE NULL END)AS DLVR_TS
    , MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN ('DL','DLU','POST_DELIVERED') 
	  THEN  src.SRC_CRE_TS_UTC ELSE NULL END) AS DLVR_TS_UTC
	, MAX(SRC.SRC_CRE_TS) AS SRC_CRE_TS
    , MAX(SRC.SRC_CRE_TS_UTC) AS SRC_CRE_TS_UTC
	, MIN(CASE WHEN UPPER(src.carrier_sts_cd) IN('CR', 'PENDING_ACCEPTANCE','BROADCASTED')
	  THEN SRC.SRC_CRE_TS  END) as FIRST_OFFER_PUBLISH_TS
    , Coalesce(MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='CR' THEN SRC.SRC_CRE_TS END),MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_ASSIGNED' THEN SRC.SRC_CRE_TS  END)) as CAR_REQ_TS
	, Coalesce
	(
		 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='PIN_VALIDATION_PICKUP_SUCCESS' THEN SRC.SRC_CRE_TS END),
		 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP' THEN SRC.SRC_CRE_TS  END),
		 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP' THEN SRC.SRC_CRE_TS  END)
	 ) as PKG_RCPT_OR_PIN_DRVR_TS
	, Coalesce
	(
		 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP' THEN SRC.SRC_CRE_TS  END),
		 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP' THEN SRC.SRC_CRE_TS  END)
	 ) as PKG_RCPT_DRVR_TS
	,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='EP' 
				 THEN  SRC.SRC_CRE_TS END) as ENR_PICKUP_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AP' 
				 THEN  SRC.SRC_CRE_TS END) as At_Pickup_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DP'
				 THEN  SRC.SRC_CRE_TS	END) as DISPATCHED_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='LOADED'
				 THEN  SRC.SRC_CRE_TS	END) as LOADED_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='TRIP_CREATED' 
 THEN  SRC.SRC_CRE_TS  END) as TRIP_CREATED_TS				 
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ED' 
 THEN  SRC.SRC_CRE_TS  END) as ENR_DROPOFF_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AD' 
THEN SRC.SRC_CRE_TS   END) as At_Dropoff_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ER'
 THEN  SRC.SRC_CRE_TS END) as ENR_RETURN_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='RT' 
THEN  SRC.SRC_CRE_TS END) as Returned_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd) in ('ORDER_CANCEL','CANCELLED','WALMART_CANCELLED')
THEN SRC.SRC_CRE_TS  END) as CANCL_REQ_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DRIVER_CANCELLED' 
THEN  SRC.SRC_CRE_TS END) as DRIVER_CANCELLED_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DRIVER_DROPPED' 
THEN  SRC.SRC_CRE_TS END) as DRIVER_DROPPED_TS
,MAX(CASE WHEN (UPPER(src.carrier_sts_cd)='COLD_CHAIN_COMPLIANCE_TRIGGERED' OR UPPER(EXCPT_RSN_DESC) LIKE '%COLD%')
THEN  SRC.SRC_CRE_TS END) as COLCHAIN_VIOLATION_TS
-- ADDING NUDING & AUTO_REBOOK IND AND TS
,MAX(CASE WHEN UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" AND SRC.DATA_SRC_CD <> 'ELEMENT_APP' THEN 1 ELSE 0 END) AS NUDGE_IND
,MAX(CASE WHEN UPPER(TRIM(CARRIER_STS_CD)) = "TASK_CANCELLED" AND SRC.DATA_SRC_CD <> 'ELEMENT_APP' AND  TRIM(EXCPT_RSN_CD) = "LMD516" THEN 1 ELSE 0 END) AS AUTO_REBOOK_IND
,MAX(CASE WHEN UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" AND SRC.DATA_SRC_CD <> 'ELEMENT_APP' THEN SRC.SRC_CRE_TS ELSE NULL END) AS NUDGE_TS
,MAX(CASE WHEN UPPER(TRIM(CARRIER_STS_CD)) = "TASK_CANCELLED" AND SRC.DATA_SRC_CD <> 'ELEMENT_APP' AND UPPER(TRIM(EXCPT_RSN_CD)) = "LMD516" THEN SRC.SRC_CRE_TS ELSE NULL END) AS AUTO_REBOOK_TS
,MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN('CR', 'PENDING_ACCEPTANCE','BROADCASTED') THEN SRC.SRC_CRE_TS_UTC  END) as FIRST_OFFER_PUBLISH_TS_UTC
-- TICKET 694 - GETTING SEARCH TIME AS 0 AS BOTH FIRST OFFR PUB AND CARR REQ TS WERE THE SAME - VN53OZO -23 MAR 2022
,COalesce(MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='CR' THEN SRC.SRC_CRE_TS_UTC  END),MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_ASSIGNED' THEN SRC.SRC_CRE_TS_UTC  END)) as CAR_REQ_TS_UTC
,Coalesce
(
	 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='PIN_VALIDATION_PICKUP_SUCCESS' THEN SRC.SRC_CRE_TS_UTC END), 
	 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP' THEN SRC.SRC_CRE_TS_UTC  END),
	 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP' THEN SRC.SRC_CRE_TS_UTC  END)
 ) 
 as PKG_RCPT_OR_PIN_DRVR_TS_UTC
,Coalesce
( 
	 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP' THEN SRC.SRC_CRE_TS_UTC  END),
	 MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP' THEN SRC.SRC_CRE_TS_UTC  END)
 ) 
 as PKG_RCPT_DRVR_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='EP' 
 THEN  SRC.SRC_CRE_TS_UTC END) as ENR_PICKUP_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AP' 
 THEN  SRC.SRC_CRE_TS_UTC END) as AT_PICKUP_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ED' 
 THEN  SRC.SRC_CRE_TS_UTC  END) as ENR_DROPOFF_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='TRIP_CREATED' 
 THEN  SRC.SRC_CRE_TS_UTC  END) as TRIP_CREATED_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DP' 
 THEN  SRC.SRC_CRE_TS_UTC	END) as DISPATCHED_TS_UTC 
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='LOADED' 
 THEN  SRC.SRC_CRE_TS_UTC	END) as LOADED_TS_UTC  
 ,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AD'
THEN SRC.SRC_CRE_TS_UTC   END) as AT_DROPOFF_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ER'
THEN  SRC.SRC_CRE_TS_UTC END) as ENR_RETURN_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='RT' 
THEN  SRC.SRC_CRE_TS_UTC END) as Returned_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd) in ('ORDER_CANCEL','CANCELLED','WALMART_CANCELLED')
THEN SRC.SRC_CRE_TS_UTC  END) as CANCL_REQ_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DRIVER_CANCELLED' 
THEN  SRC.SRC_CRE_TS_UTC END) as DRIVER_CANCELLED_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DRIVER_DROPPED' 
THEN  SRC.SRC_CRE_TS_UTC END) as DRIVER_DROPPED_TS_UTC
,MAX(CASE WHEN (UPPER(src.carrier_sts_cd)='COLD_CHAIN_COMPLIANCE_TRIGGERED' OR UPPER(EXCPT_RSN_DESC) LIKE '%COLD%')
THEN  SRC.SRC_CRE_TS_UTC END) as COLCHAIN_VIOLATION_TS_UTC,
MAX(CASE WHEN UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" AND SRC.DATA_SRC_CD <> 'ELEMENT_APP' THEN SRC.SRC_CRE_TS_UTC ELSE NULL END) AS NUDGE_TS_UTC
,MAX(CASE WHEN UPPER(TRIM(CARRIER_STS_CD)) = "TASK_CANCELLED" AND SRC.DATA_SRC_CD <> 'ELEMENT_APP' AND UPPER(TRIM(EXCPT_RSN_CD)) = "LMD516" THEN SRC.SRC_CRE_TS_UTC ELSE NULL END) AS AUTO_REBOOK_TS_UTC
,COALESCE(max(SRC.PKG_RCPT_DRVR_TS),MAX(dlmd.PKG_RCPT_DRVR_TS)) OLD_PKG_RCPT_DRVR_TS , 
COALESCE(max(SRC.PKG_RCPT_DRVR_TS_UTC),MAX(dlmd.PKG_RCPT_DRVR_TS_UTC)) OLD_PKG_RCPT_DRVR_TS_UTC	,
MAX(order_has_alcohol_item_ind ) AS ALCOHOL_IND,
MAX(ESTMTD_MILE_BY_APPLN) AS PLANNED_MILES,
MAX(CASE WHEN (UPPER(src.carrier_sts_cd)='COLD_CHAIN_COMPLIANCE_TRIGGERED' OR UPPER(EXCPT_RSN_DESC) LIKE '%COLD%') THEN 1 ELSE 0 END) AS COLCHAIN_VIOLATION_IND,
MAX(CASE WHEN src.DATA_SRC_CD='DAAS' AND (UPPER(EXCPT_RSN_DESC) like '%COLD CHAIN%' or EXCPT_RSN_CD IN ('3P505','3P546','LMD1105','LMD804','LMD805','LMD127','CCC01','LMD416')) THEN 1 WHEN src.DATA_SRC_CD='DISPATCHER' AND CARRIER_STATUS_CD_DESC in ('COLD_CHAIN_COMPLIANCE_TRIGGERED') THEN 1 ELSE 0 END) AS COLD_CHAIN_VIOLATION,
MAX(CASE WHEN src.DATA_SRC_CD='DAAS' AND (COLD_CHN_CMPLY_IND=1 or UPPER(EXCPT_RSN_DESC) like '%COLD CHAIN%' or 
EXCPT_RSN_CD IN ('3P505','3P546','LMD1105','LMD804','LMD805','LMD127','CCC01','LMD416') ) THEN 1
WHEN src.DATA_SRC_CD='DISPATCHER' and CARRIER_STATUS_CD_DESC in ('COLD_CHAIN_COMPLIANCE_INITIATED','COLD_CHAIN_COMPLIANCE_TRIGGERED') THEN 1 ELSE 0 END) AS COLD_CHAIN_ITEM_IND,
MAX(CASE WHEN UPPER(EXCPT_RSN_DESC) = UPPER('Pick not complete') THEN 1 ELSE 0 END) ADR_Ind_trip,
--Columns required for DaaS
MAX(SRC.ORDER_PCKUP_PNT_ID) AS PP_MAX,
MAX(DLVR_CLNT_ID) AS DLVR_CLNT_ID,
MAX(FULFMT_TYPE_CD) AS FULFMT_TYPE_CD,
MAX(ORDER_SVC_TYPE_NM) AS ORDER_SVC_TYPE_NM,
MAX(CLNT_PCKUP_FROM_NM) AS CLNT_PCKUP_FROM_NM, 
MAX(DLVR_PRIORITY_NM) AS DLVR_PRIORITY_NM,
MAX(OVERSIZED_ITEM_IND) AS OVERSIZED_ITEM_IND,
MAX(TRIP_CHNG_CNT) AS TRIP_CHNG_CNT,
MAX(TRIP_CHNG_IND) AS TRIP_CHNG_IND,
MAX(SRC.DATA_SRC_CD) AS REC_SRC,
MAX(DLVR_SLOT_END_TS) AS DLVR_SLOT_END_TS,
MAX(DLVR_SLOT_END_TS_UTC) AS DLVR_SLOT_END_TS_UTC,
MAX(DLVR_SLOT_START_TS) AS DLVR_SLOT_START_TS,
MAX(DLVR_SLOT_START_TS_UTC) AS DLVR_SLOT_START_TS_UTC,
--adding LATE_DLVR_TS for updated DaaS OTD definition:
MIN(LATE_DLVR_TS) AS LATE_DLVR_TS,
MIN(LATE_DLVR_TS_UTC) AS LATE_DLVR_TS_UTC,
MIN(ERLY_DLVR_TS) AS ERLY_DLVR_TS,
MIN(ERLY_DLVR_TS_UTC) AS ERLY_DLVR_TS_UTC,
MAX(PKG_WT_QTY_LBS) AS PKG_WT_QTY_LBS,
MAX(DLVR_PKG_VOL_QTY) AS DLVR_PKG_VOL_QTY_CFT,
MAX(PICKER_TYPE_NM) AS PICKER_TYPE_NM,
MAX(QTY) as Quantity,
--Separated the payment metrics from LMDTS To LMDTS checkpoint table -- 2022-06-28 vn53ozo

COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='PICKING' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_PICK_PAYMENT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='ESTIMATED_DISTANCE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  ESTIMATED_DISTANCE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='DELIVERED_EXTRA' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS   DELIVERED_EXTRA_AMT,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SURGE_PRICE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SURGE_PRICE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='WAIT_TIME' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS   WAIT_TIME_AMT,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='RETURNED' THEN  TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  RETURNED_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='BLANK_BONUS' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  BLANK_BONUS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='ARRIVED_AT_STORE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  ARRIVED_AT_STORE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='BASE_PRICE_CAPPING' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  BASE_PRICE_CAPPING_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='DELIVERED_OR_ATTEMPTED' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  DELIVERED_OR_ATTEMPTED_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='ORDER_SIZE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  ORDER_SIZE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='EXTRA_HEAVY_ORDER' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  EXTRA_HEAVY_ORDER_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='HEAVY_ORDER' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  HEAVY_ORDER_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='ADDRESS_TYPE_APARTMENT' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  APARTMENT_PYMT_AMT ,

--shopper dynamic pay columns 
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_BLANK_BONUS' THEN  TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_BLANK_BONUS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_ENTRY_FEE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_ENTRY_FEE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_UNITS' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_UNITS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_EXIT_FEE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_EXIT_FEE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_TRIP_CAPPING' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_TRIP_CAPPING_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_ITEMS' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_ITEMS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='ML_BASE_PRICE' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  ML_BASE_PRICE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='ML_BASE_PRICE_CAPPING' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  ML_BASE_PRICE_CAPPING_AMT ,

-- Returns Order Payment

COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='CUSTOMER_RETURNS_PARTIAL' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  EASY_RTNS_PARTIAL_AMT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='CUSTOMER_RETURNS' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  EASY_RTNS_AMT ,

--New ML field and Shopper Express Bonus for Base CPD vn53v0v
COALESCE(MIN(CASE WHEN UPPER(TRIP_CKPT_NM)='ML_BASE_ADJUSTMENT' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  ML_BASE_ADJUSTMENT ,
COALESCE(MAX(CASE WHEN UPPER(TRIP_CKPT_NM)='SHOPPER_EXPRESS' THEN TRIP_CKPT_ACTL_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_EXPRESS ,

--AE indicator
MAX(CASE WHEN UPPER(SPL_HANLING_NOTE) = 'ANNUAL_EVENT_DELIVERY' THEN 1 ELSE 0 END) AS LMD_AE_IND,
--Customer Zip Code added on 16th June by vn52vgo:
MAX(left(DEST_ZIP_CD,5)) AS CUST_ZIP5,
--drvr utilisation trip date
MAX(TRIP_START_TS) as TRIP_START_TS,
--P2 time correction vn55chk 06/03/24--
MAX(PICK_START_TS_UTC) as PICK_START_TS_UTC,
-- 27-03 vn55chk (request by Pacho)
MAX(tce.PCKUP_TS) as PCKUP_TS,
MAX(tce.PCKUP_TS_UTC) as PCKUP_TS_UTC,
MAX(TRIP_PLAND_DUR_SEC_QTY) as TRIP_PLAND_DUR_SEC_QTY,
-- Distance in Miles between Driver and At pickup Store vn55jsc
Round(CAST(st_distance(
st_geogpoint(IF(MIN(LOC_LONG_NUM) BETWEEN -180 AND 180,MIN(LOC_LONG_NUM),NULL), 
                      IF(MAX(LOC_LAT_NUM) BETWEEN -90 AND 90,MAX(LOC_LAT_NUM),NULL)),
        st_geogpoint(IF(CAST(MIN(STORE_LONG_NUM) AS NUMERIC) BETWEEN -180 AND 180, CAST(MIN(STORE_LONG_NUM) AS NUMERIC),NULL),
                      IF(CAST(MAX(STORE_LAT_NUM) AS NUMERIC) BETWEEN -90 AND 90, CAST(MAX(STORE_LAT_NUM) AS NUMERIC),NULL))
      )/1609.344 AS NUMERIC),3) AS DRVR_TO_STORE_DIST_MILES

				FROM (
						SELECT *,
						--added standardised weight and vol fields
						CASE WHEN UPPER(PKG_WT_UOM) IN ('L','LB','LBS') THEN PKG_WT_QTY
						WHEN UPPER(PKG_WT_UOM) IN ('KG','KGS') THEN PKG_WT_QTY*2.205
						WHEN UPPER(PKG_WT_UOM) IN ('OZ','OZS') THEN PKG_WT_QTY/16
						ELSE NULL END AS PKG_WT_QTY_LBS
						FROM 
						(
						Select * except (SRC_SALES_ORDER_NUM),
						case 
						when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
						when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
						case 
						when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
						end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
						from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
						where SRC_CRE_DT between DATE1 and current_date("US/Pacific")
						) crr 
						where CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
						AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
						AND (CRR.trip_id IS NOT NULL or CRR.trip_id <> ''  )  
						AND (carrier_sts_cd != 'TRIP_DROPPED_V2')
				     ) SRC
				LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_CARRIER` AS oc 	
				ON SRC.CARRIER_NM = oc.ORG_NM
				left join 
				(
				  select sales_order_nbr, trip_id, po_nbr,PKG_RCPT_DRVR_TS_UTC, PKG_RCPT_DRVR_TS  
          from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
				  WHERE RPT_DT >= DATE1
				) DLMD
				ON DLMD.SALES_ORDER_NBR=SRC.SRC_SALES_ORDER_NUM 
				AND SRC.TRIP_ID=DLMD.TRIP_ID 
				AND coalesce(SRC.PO_NUM,'0')=coalesce(DLMD.PO_NBR,'0')
				LEFT JOIN (
							  select trip_id,max(PCKUP_TS) PCKUP_TS,max(PCKUP_TS_UTC) PCKUP_TS_UTC
							  from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_TRIP_CHNG_EVENT`
							  where SRC_CRE_DT> DATE1
							  group by 1
						  ) tce
							on SRC.trip_id = tce.trip_id
				group by 1,2,3) ;
				
-----------------created by vn53vov for ckpt migration from 2023-03-16
CREATE OR REPLACE TABLE LMD_DA.CKPT_PAYMENT AS 
SELECT TRIP_ID,
MAX(SRC_CREATE_DT) SRC_CREATE_DT,
MAX(SRC_CREATE_DT_UTC) SRC_CREATE_DT_UTC,
MAX(SRC_CREATE_TS) SRC_CREATE_TS,
MAX(SRC_CREATE_TS_UTC) SRC_CREATE_TS_UTC,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='PICKING' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_PICK_PAYMENT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='ESTIMATED_DISTANCE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  ESTIMATED_DISTANCE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='DELIVERED_EXTRA' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS   DELIVERED_EXTRA_AMT,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SURGE_PRICE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SURGE_PRICE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='WAIT_TIME' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS   WAIT_TIME_AMT,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='RETURNED' THEN  CKPT_PAYOUT_AMT ELSE NULL END),0) AS  RETURNED_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='BLANK_BONUS' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  BLANK_BONUS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='ARRIVED_AT_STORE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  ARRIVED_AT_STORE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='BASE_PRICE_CAPPING' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  BASE_PRICE_CAPPING_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='DELIVERED_OR_ATTEMPTED' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  DELIVERED_OR_ATTEMPTED_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='ORDER_SIZE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  ORDER_SIZE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='EXTRA_HEAVY_ORDER' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EXTRA_HEAVY_ORDER_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='HEAVY_ORDER' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  HEAVY_ORDER_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='ADDRESS_TYPE_APARTMENT' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  APARTMENT_PYMT_AMT ,  

--shopper dynamic pay columns 
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_BLANK_BONUS' THEN  CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_BLANK_BONUS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_ENTRY_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_ENTRY_FEE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_UNITS' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_UNITS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_EXIT_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_EXIT_FEE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_TRIP_CAPPING' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_TRIP_CAPPING_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_ITEMS' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_ITEMS_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='ML_BASE_PRICE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  ML_BASE_PRICE_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='ML_BASE_PRICE_CAPPING' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  ML_BASE_PRICE_CAPPING_AMT ,

-- Returns Order Payment
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='CUSTOMER_RETURNS_PARTIAL' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EASY_RTNS_PARTIAL_AMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='CUSTOMER_RETURNS' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EASY_RTNS_AMT ,

--New ML field and Shopper Express Bonus for Base CPD vn53v0v
COALESCE(MIN(CASE WHEN UPPER(CKPT_NM)='ML_BASE_ADJUSTMENT' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  ML_BASE_ADJUSTMENT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='SHOPPER_EXPRESS' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  SHOPPER_EXPRESS ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='CANCELLATION_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  CANCELLATION_FEE ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='EST_SCHED_DRIVE_TIME_FEE_LMT' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EST_SCHED_DRIVE_TIME_FEE_LMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='EST_UNSCHED_DRIVE_TIME_FEE_LMT' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EST_UNSCHED_DRIVE_TIME_FEE_LMT ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='EST_UNSCHED_BILLABLE_WEIGHT_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EST_UNSCHED_BILLABLE_WEIGHT_FEE ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='EST_SCHED_BILLABLE_WEIGHT_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EST_SCHED_BILLABLE_WEIGHT_FEE ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='EST_AE_BILLABLE_WEIGHT_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  EST_AE_BILLABLE_WEIGHT_FEE ,
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='CHAINING_COMPLEXITY_FEE' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  CHAINING_COMPLEXITY_FEE ,
-- Added on 05-02-24 by vn55chk --
COALESCE(MAX(CASE WHEN UPPER(CKPT_NM)='MARKET_FACTOR' THEN CKPT_PAYOUT_AMT ELSE NULL END),0) AS  MARKET_FACTOR_AMT,

FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_DRVR_CKPT` 
WHERE SRC_CREATE_DT between DATE5 and current_date("US/Pacific")
AND DATA_SRC_CD <> 'PRICING-ENGINE'
GROUP BY 1  
;


-- CHANGING TIMESTAMP OF daas ORDERS --- Changes
CREATE OR REPLACE TABLE LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS_v2 AS (
SELECT 
	crr.SALES_ORDER_NUM,
	trip_id,
	CRR.po_num,
	CAR_MAX,
	CAR_SPARK,
	DRVR_MAX,
	DRVR_SPARK,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(DLVR_TS_UTC, Z.ORG_TM_ZONE) ELSE DLVR_TS END AS  DLVR_TS,
	DLVR_TS_UTC,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(SRC_CRE_TS_UTC, Z.ORG_TM_ZONE) ELSE SRC_CRE_TS END AS SRC_CRE_TS,
	SRC_CRE_TS_UTC,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(FIRST_OFFER_PUBLISH_TS_UTC, Z.ORG_TM_ZONE) ELSE FIRST_OFFER_PUBLISH_TS END  AS  FIRST_OFFER_PUBLISH_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(CAR_REQ_TS_UTC, Z.ORG_TM_ZONE) ELSE CAR_REQ_TS END AS CAR_REQ_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(PKG_RCPT_OR_PIN_DRVR_TS_UTC, Z.ORG_TM_ZONE) ELSE PKG_RCPT_OR_PIN_DRVR_TS END AS PKG_RCPT_OR_PIN_DRVR_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(PKG_RCPT_DRVR_TS_UTC, Z.ORG_TM_ZONE) ELSE PKG_RCPT_DRVR_TS END AS PKG_RCPT_DRVR_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(ENR_PICKUP_TS_UTC, Z.ORG_TM_ZONE) ELSE ENR_PICKUP_TS END AS ENR_PICKUP_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(AT_PICKUP_TS_UTC, Z.ORG_TM_ZONE) ELSE At_Pickup_TS END AS At_Pickup_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(DISPATCHED_TS_UTC, Z.ORG_TM_ZONE) ELSE DISPATCHED_TS END AS  DISPATCHED_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(LOADED_TS_UTC, Z.ORG_TM_ZONE) ELSE LOADED_TS END AS  LOADED_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(TRIP_CREATED_TS_UTC, Z.ORG_TM_ZONE) ELSE TRIP_CREATED_TS END AS  TRIP_CREATED_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(ENR_DROPOFF_TS_UTC, Z.ORG_TM_ZONE) ELSE ENR_DROPOFF_TS END AS  ENR_DROPOFF_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(AT_DROPOFF_TS_UTC, Z.ORG_TM_ZONE) ELSE At_Dropoff_TS  END AS  At_Dropoff_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(ENR_RETURN_TS_UTC, Z.ORG_TM_ZONE) ELSE ENR_RETURN_TS END AS ENR_RETURN_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(Returned_TS_UTC, Z.ORG_TM_ZONE) ELSE Returned_TS END AS Returned_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(CANCL_REQ_TS_UTC, Z.ORG_TM_ZONE) ELSE CANCL_REQ_TS  END AS CANCL_REQ_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(DRIVER_CANCELLED_TS_UTC, Z.ORG_TM_ZONE) ELSE DRIVER_CANCELLED_TS END AS DRIVER_CANCELLED_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(DRIVER_DROPPED_TS_UTC, Z.ORG_TM_ZONE) ELSE DRIVER_DROPPED_TS END AS DRIVER_DROPPED_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(COLCHAIN_VIOLATION_TS_UTC, Z.ORG_TM_ZONE) ELSE COLCHAIN_VIOLATION_TS END AS COLCHAIN_VIOLATION_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(NUDGE_TS_UTC, Z.ORG_TM_ZONE) ELSE NUDGE_TS END AS NUDGE_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(AUTO_REBOOK_TS_UTC, Z.ORG_TM_ZONE) ELSE AUTO_REBOOK_TS END AS AUTO_REBOOK_TS,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(PCKUP_TS_UTC, Z.ORG_TM_ZONE) ELSE PCKUP_TS END AS PCKUP_TS,
	FIRST_OFFER_PUBLISH_TS_UTC,
	CAR_REQ_TS_UTC,
	PKG_RCPT_OR_PIN_DRVR_TS_UTC,
	PKG_RCPT_DRVR_TS_UTC,
	ENR_PICKUP_TS_UTC,
	AT_PICKUP_TS_UTC,
	ENR_DROPOFF_TS_UTC,
	TRIP_CREATED_TS_UTC,
	DISPATCHED_TS_UTC,
	LOADED_TS_UTC,
	AT_DROPOFF_TS_UTC,
	ENR_RETURN_TS_UTC,
	Returned_TS_UTC,
	CANCL_REQ_TS_UTC,
	DRIVER_CANCELLED_TS_UTC,
	DRIVER_DROPPED_TS_UTC,
	COLCHAIN_VIOLATION_TS_UTC,
	NUDGE_TS_UTC,
	AUTO_REBOOK_TS_UTC,
	PCKUP_TS_UTC,
	TRIP_PLAND_DUR_SEC_QTY,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(OLD_PKG_RCPT_DRVR_TS_UTC, Z.ORG_TM_ZONE) ELSE OLD_PKG_RCPT_DRVR_TS END AS OLD_PKG_RCPT_DRVR_TS,
	OLD_PKG_RCPT_DRVR_TS_UTC,
	ALCOHOL_IND,
	PLANNED_MILES,
	COLCHAIN_VIOLATION_IND,
	NUDGE_IND,
	AUTO_REBOOK_IND,
	COLD_CHAIN_VIOLATION,
	COLD_CHAIN_ITEM_IND,
	ADR_Ind_trip,
	PP_MAX,
	DLVR_CLNT_ID,
	FULFMT_TYPE_CD,
	ORDER_SVC_TYPE_NM,
	CLNT_PCKUP_FROM_NM,
	DLVR_PRIORITY_NM,
	OVERSIZED_ITEM_IND,
	TRIP_CHNG_CNT,
	TRIP_CHNG_IND,
	REC_SRC,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(DLVR_SLOT_END_TS_UTC, Z.ORG_TM_ZONE) ELSE DLVR_SLOT_END_TS END AS DLVR_SLOT_END_TS,
	DLVR_SLOT_END_TS_UTC,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(DLVR_SLOT_START_TS_UTC, Z.ORG_TM_ZONE) ELSE DLVR_SLOT_START_TS END AS DLVR_SLOT_START_TS,
	DLVR_SLOT_START_TS_UTC,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(LATE_DLVR_TS_UTC, Z.ORG_TM_ZONE) ELSE LATE_DLVR_TS END AS LATE_DLVR_TS,
	LATE_DLVR_TS_UTC,
	CASE WHEN REC_SRC='DAAS' THEN DATETIME(ERLY_DLVR_TS_UTC, Z.ORG_TM_ZONE) ELSE ERLY_DLVR_TS END AS ERLY_DLVR_TS,
	ERLY_DLVR_TS_UTC,
	PKG_WT_QTY_LBS,
	DLVR_PKG_VOL_QTY_CFT,
	PICKER_TYPE_NM,
	Quantity,
	SHOPPER_PICK_PAYMENT,
	ESTIMATED_DISTANCE_AMT,
	DELIVERED_EXTRA_AMT,
	SURGE_PRICE_AMT,
	WAIT_TIME_AMT,
	RETURNED_AMT,
	BLANK_BONUS_AMT,
	ARRIVED_AT_STORE_AMT,
	BASE_PRICE_CAPPING_AMT,
	DELIVERED_OR_ATTEMPTED_AMT,
	ORDER_SIZE_AMT,
	EXTRA_HEAVY_ORDER_AMT,
	HEAVY_ORDER_AMT,
	APARTMENT_PYMT_AMT,
	SHOPPER_BLANK_BONUS_AMT,
	SHOPPER_ENTRY_FEE_AMT,
	SHOPPER_UNITS_AMT,
	SHOPPER_EXIT_FEE_AMT,
	SHOPPER_TRIP_CAPPING_AMT,
	SHOPPER_ITEMS_AMT,
	ML_BASE_PRICE_AMT,
	ML_BASE_PRICE_CAPPING_AMT ,
	EASY_RTNS_PARTIAL_AMT,
	EASY_RTNS_AMT,
	ML_BASE_ADJUSTMENT,
	SHOPPER_EXPRESS,
	LMD_AE_IND,
	CUST_ZIP5,
	TRIP_START_TS,
	PICK_START_TS_UTC,
	DRVR_TO_STORE_DIST_MILES,
	
FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS CRR
LEFT JOIN LMD_DA.VOL_SALES_ORDER_LINE_V2 SOL 
    ON CRR.SALES_ORDER_NUM = SOL.SALES_ORDER_NUM
    AND CRR.PO_NUM = SOL.PO_NUM
left join (
				 select store_nbr,ORG_TM_ZONE from 
					(select *, dense_rank() over(partition by store_nbr order by cd desc ) rnk from (
						select  STORE_NBR,CLNT_PCKUP_FROM_TZ_CD as ORG_TM_ZONE, count(*) cd from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
						 group by 1,2
						 )
					)
				where rnk=1
				group by 1,2
				) Z
				ON COALESCE(CAST(CRR.PP_MAX AS STRING), CAST(SOL.STORE_ID AS STRING) ) = CAST(Z.store_nbr AS STRING)
);

----------created by vn53vov to join lmdts table (LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS) for LMDTS data and ckpt table (LMD_DA.CKPT_PAYMENT) for base cpd components
CREATE OR REPLACE TABLE LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS_ckpt As
SELECT LMDTS.* except(SHOPPER_PICK_PAYMENT,ESTIMATED_DISTANCE_AMT,DELIVERED_EXTRA_AMT,SURGE_PRICE_AMT, WAIT_TIME_AMT, 
						RETURNED_AMT, BLANK_BONUS_AMT,ARRIVED_AT_STORE_AMT,BASE_PRICE_CAPPING_AMT,DELIVERED_OR_ATTEMPTED_AMT, 
						ORDER_SIZE_AMT,SHOPPER_BLANK_BONUS_AMT,SHOPPER_ENTRY_FEE_AMT,SHOPPER_UNITS_AMT,SHOPPER_EXIT_FEE_AMT,SHOPPER_TRIP_CAPPING_AMT,
						SHOPPER_ITEMS_AMT,ML_BASE_PRICE_AMT,ML_BASE_PRICE_CAPPING_AMT, EASY_RTNS_PARTIAL_AMT, EASY_RTNS_AMT, ML_BASE_ADJUSTMENT, SHOPPER_EXPRESS,EXTRA_HEAVY_ORDER_AMT,
						HEAVY_ORDER_AMT,APARTMENT_PYMT_AMT)
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15' then LMDTS.SHOPPER_PICK_PAYMENT else cte_ckpt.SHOPPER_PICK_PAYMENT end as SHOPPER_PICK_PAYMENT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15' then LMDTS.ESTIMATED_DISTANCE_AMT else cte_ckpt.ESTIMATED_DISTANCE_AMT end as ESTIMATED_DISTANCE_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.DELIVERED_EXTRA_AMT else cte_ckpt.DELIVERED_EXTRA_AMT end as DELIVERED_EXTRA_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SURGE_PRICE_AMT else cte_ckpt.SURGE_PRICE_AMT end as SURGE_PRICE_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.WAIT_TIME_AMT else cte_ckpt.WAIT_TIME_AMT end as WAIT_TIME_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.RETURNED_AMT else cte_ckpt.RETURNED_AMT end as RETURNED_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.BLANK_BONUS_AMT else cte_ckpt.BLANK_BONUS_AMT end as BLANK_BONUS_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.ARRIVED_AT_STORE_AMT else cte_ckpt.ARRIVED_AT_STORE_AMT end as ARRIVED_AT_STORE_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.BASE_PRICE_CAPPING_AMT else cte_ckpt.BASE_PRICE_CAPPING_AMT end as BASE_PRICE_CAPPING_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.DELIVERED_OR_ATTEMPTED_AMT else cte_ckpt.DELIVERED_OR_ATTEMPTED_AMT end as DELIVERED_OR_ATTEMPTED_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.ORDER_SIZE_AMT else cte_ckpt.ORDER_SIZE_AMT end as ORDER_SIZE_AMT

,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_BLANK_BONUS_AMT else cte_ckpt.SHOPPER_BLANK_BONUS_AMT end as SHOPPER_BLANK_BONUS_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_ENTRY_FEE_AMT else cte_ckpt.SHOPPER_ENTRY_FEE_AMT end as SHOPPER_ENTRY_FEE_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_UNITS_AMT else cte_ckpt.SHOPPER_UNITS_AMT end as SHOPPER_UNITS_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_EXIT_FEE_AMT else cte_ckpt.SHOPPER_EXIT_FEE_AMT end as SHOPPER_EXIT_FEE_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_TRIP_CAPPING_AMT else cte_ckpt.SHOPPER_TRIP_CAPPING_AMT end as SHOPPER_TRIP_CAPPING_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_ITEMS_AMT else cte_ckpt.SHOPPER_ITEMS_AMT end as SHOPPER_ITEMS_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.ML_BASE_PRICE_AMT else cte_ckpt.ML_BASE_PRICE_AMT end as ML_BASE_PRICE_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.ML_BASE_PRICE_CAPPING_AMT else cte_ckpt.ML_BASE_PRICE_CAPPING_AMT end as ML_BASE_PRICE_CAPPING_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.EASY_RTNS_PARTIAL_AMT else cte_ckpt.EASY_RTNS_PARTIAL_AMT end as EASY_RTNS_PARTIAL_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.EASY_RTNS_AMT else cte_ckpt.EASY_RTNS_AMT end as EASY_RTNS_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.ML_BASE_ADJUSTMENT else cte_ckpt.ML_BASE_ADJUSTMENT end as ML_BASE_ADJUSTMENT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.SHOPPER_EXPRESS else cte_ckpt.SHOPPER_EXPRESS end as SHOPPER_EXPRESS
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.EXTRA_HEAVY_ORDER_AMT else cte_ckpt.EXTRA_HEAVY_ORDER_AMT end as EXTRA_HEAVY_ORDER_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.HEAVY_ORDER_AMT else cte_ckpt.HEAVY_ORDER_AMT end as HEAVY_ORDER_AMT
,case when date(LMDTS.SRC_CRE_TS) <= '2023-03-15'then LMDTS.APARTMENT_PYMT_AMT else cte_ckpt.APARTMENT_PYMT_AMT end as APARTMENT_PYMT_AMT
, cte_ckpt.CANCELLATION_FEE
, cte_ckpt.MARKET_FACTOR_AMT
, cte_ckpt.EST_SCHED_DRIVE_TIME_FEE_LMT 
, cte_ckpt.EST_UNSCHED_DRIVE_TIME_FEE_LMT 
, cte_ckpt.EST_UNSCHED_BILLABLE_WEIGHT_FEE
, cte_ckpt.EST_SCHED_BILLABLE_WEIGHT_FEE 
, cte_ckpt.EST_AE_BILLABLE_WEIGHT_FEE
, cte_ckpt.CHAINING_COMPLEXITY_FEE
FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS_v2 LMDTS
LEFT JOIN `LMD_DA.CKPT_PAYMENT` cte_ckpt
ON LMDTS.TRIP_ID = cte_ckpt.TRIP_ID;


--Identified latest driver and carrier NEW(ADDED NEW CONDITION OF DRVR_USER_ID NOT NULL)
create or replace table LMD_DA.CARRIER_DRVR_DETAILS AS
(
SELECT * 
FROM
(SELECT SRC.SRC_SALES_ORDER_NUM AS SALES_ORDER_NUM, SRC.TRIP_ID, SRC.PO_NUM, SRC.DRVR_USER_ID, CARRIER_NM AS CARRIER_ORG_NM,
ROW_NUMBER() OVER (PARTITION BY SRC.SRC_SALES_ORDER_NUM, SRC.TRIP_ID, SRC.PO_NUM ORDER BY  SRC.SRC_CRE_TS DESC) RN
, SRC.ORDER_PCKUP_PNT_ID
FROM ( 
		SELECT *,
		FROM 
		(
		Select * except (SRC_SALES_ORDER_NUM),
		case 
		when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
		when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
		case 
		when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
		end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
		where SRC_CRE_DT between DATE1 and current_date("US/Pacific")
		) crr 
		where CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
		AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
		AND (CRR.trip_id IS NOT NULL or CRR.trip_id <> ''  ) 
		AND (carrier_sts_cd != 'TRIP_DROPPED_V2')	
		AND UPPER(CARRIER_STS_CD) IN ('CR','EP','AP','ED','AD','DL','DLU','ER','RT') and DRVR_USER_ID is not null
	) SRC
   
    LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_CARRIER` AS oc 
    ON SRC.CARRIER_NM = oc.ORG_NM
    )
WHERE RN=1
);



create or replace table  LMD_DA.CARRIER_DLVR_ORD_CR as
(SELECT A.SALES_ORDER_NUM,A.ORDER_CREATED_TS_UTC ORDER_CREATED_TS_UTC,
CASE WHEN REC_SRC='DAAS' THEN DATETIME(ORDER_CREATED_TS_UTC, Z.ORG_TM_ZONE) ELSE ORDER_CREATED_TS END AS ORDER_CREATED_TS 
FROM 
		(SELECT 
		SRC_SALES_ORDER_NUM as SALES_ORDER_NUM,
		MAX(CRR.ORDER_PCKUP_PNT_ID) AS PP_MAX,
		MAX(DATA_SRC_CD) AS REC_SRC,
		-- ADDED ORDER CREATED TIMESTAMP TO GET OTD FOR DAAS
		MAX(CASE WHEN UPPER(carrier_sts_cd) = UPPER('ORDER_CREATED') THEN  src_cre_ts ELSE NULL END) AS ORDER_CREATED_TS,
		MAX(CASE WHEN UPPER(carrier_sts_cd) = UPPER('ORDER_CREATED') THEN  src_cre_ts_UTC ELSE NULL END) AS ORDER_CREATED_TS_UTC	 
		FROM 
		(
		Select * except (SRC_SALES_ORDER_NUM),
		case 
		when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
		when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
		case 
		when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
		end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
		where SRC_CRE_DT between DATE1 and current_date("US/Pacific")
		) crr
		where CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
		AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
		AND (carrier_sts_cd != 'TRIP_DROPPED_V2')
		GROUP BY 1) A
		    left join (
				 select store_nbr,ORG_TM_ZONE from 
					(select *, dense_rank() over(partition by store_nbr order by cd desc ) rnk from (
						select  STORE_NBR,CLNT_PCKUP_FROM_TZ_CD as ORG_TM_ZONE, count(*) cd from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
						 group by 1,2
						 )
					)
				where rnk=1
				group by 1,2
				) Z
				ON CAST(A.PP_MAX AS STRING) = CAST(Z.store_nbr AS STRING)
			
);

--combining timestamps and driver details

create or replace table  LMD_DA.CARRIER_DLVR_TRKSTS_V2 as
(
SELECT A.*, DTL.DLVR_PKG_SIZE_CD as Order_Size,				
case when DTL.first_assgn_carrier_nm = 'POINTPICKUP' then DTL.first_assgn_carrier_nm else initcap(DTL.first_assgn_carrier_nm) end as first_assgn_carrier_nm, 
COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) AS DRVR_USER_ID,
CASE WHEN UPPER(A.REC_SRC) = 'DAAS' AND COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) IS NULL and COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) like '%@%' THEN 'SPARK'
	WHEN UPPER(A.REC_SRC) = 'DAAS' AND COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) IS NULL and COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) IS NULL THEN 'SPARK' 
      WHEN UPPER(A.REC_SRC) = 'DAAS' AND COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) IS NULL and COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) not like '%@%' THEN ''
	             ELSE COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) END AS CARRIER_ORG_NM,
COALESCE(B.ORDER_PCKUP_PNT_ID,A.PP_MAX)  AS ORDER_PCKUP_PNT_ID,
OC.ORDER_CREATED_TS,
OC.ORDER_CREATED_TS_UTC,
FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS_ckpt A
LEFT JOIN LMD_DA.CARRIER_DRVR_DETAILS B
ON A.TRIP_ID=B.TRIP_ID
AND A.SALES_ORDER_NUM=B.SALES_ORDER_NUM
AND coalesce(A.PO_NUM,'0')=coalesce(B.PO_NUM,'0')
LEFT JOIN LMD_DA.CARRIER_DLVR_ORD_CR OC
ON A.SALES_ORDER_NUM = OC.SALES_ORDER_NUM
LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` DTL
ON A.TRIP_ID=DTL.TRIP_ID
AND A.SALES_ORDER_NUM=DTL.SALES_ORDER_NBR
AND COALESCE(A.PO_NUM,'0')=COALESCE(DTL.PO_NBR,'0')
);

--- WHOLE DATA FOR JIE_STORE_CARRIER

create or replace table  LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS_FULL as(
SELECT  src.SRC_SALES_ORDER_NUM AS SALES_ORDER_NUM,src.trip_id ,src.po_num
    , MAX(CARRIER_NM) AS CAR_MAX
	, MAX(CASE WHEN UPPER(CARRIER_NM) = 'SPARK'  
	  THEN 'SPARK' ELSE NULL END) AS CAR_SPARK
    , MAX(SRC.DRVR_USER_ID ) AS DRVR_MAX
	, MAX(CASE WHEN UPPER(CARRIER_NM) = 'SPARK'   THEN SRC.DRVR_USER_ID ELSE NULL END) AS DRVR_SPARK
	, MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN ('DL','DLU','POST_DELIVERED') THEN  src.src_cre_ts ELSE NULL END)AS DLVR_TS
    , MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN ('DL','DLU','POST_DELIVERED') THEN  src.SRC_CRE_TS_UTC ELSE NULL END) AS DLVR_TS_UTC
	, MAX(SRC.SRC_CRE_TS) AS SRC_CRE_TS
    , MAX(SRC.SRC_CRE_TS_UTC) AS SRC_CRE_TS_UTC
	,MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN('CR', 'PENDING_ACCEPTANCE','BROADCASTED')
	THEN SRC.SRC_CRE_TS  END) as FIRST_OFFER_PUBLISH_TS
    ,MAX(CASE WHEN UPPER(src.carrier_sts_cd) in ('CR','DRIVER_ASSIGNED')
	THEN SRC.SRC_CRE_TS  END) as CAR_REQ_TS
	,Coalesce
	(
		MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='PIN_VALIDATION_PICKUP_SUCCESS' THEN SRC.SRC_CRE_TS END),
		MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP'	THEN SRC.SRC_CRE_TS  END),
		MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP' THEN SRC.SRC_CRE_TS  END)
	) 
	as PKG_RCPT_OR_PIN_DRVR_TS
	,Coalesce
	(
		MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP'	THEN SRC.SRC_CRE_TS  END),
		MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP' THEN SRC.SRC_CRE_TS  END)
	) 
	as PKG_RCPT_DRVR_TS
	,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='EP' 
				 THEN  SRC.SRC_CRE_TS END) as ENR_PICKUP_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AP' 
				 THEN  SRC.SRC_CRE_TS END) as At_Pickup_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DP'
				 THEN  SRC.SRC_CRE_TS	END) as DISPATCHED_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='LOADED'
				 THEN  SRC.SRC_CRE_TS	END) as LOADED_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='TRIP_CREATED' 
 THEN  SRC.SRC_CRE_TS  END) as TRIP_CREATED_TS				 
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ED' 
 THEN  SRC.SRC_CRE_TS  END) as ENR_DROPOFF_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AD' 
THEN SRC.SRC_CRE_TS   END) as At_Dropoff_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ER'
 THEN  SRC.SRC_CRE_TS END) as ENR_RETURN_TS
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='RT' 
THEN  SRC.SRC_CRE_TS END) as Returned_TS
,MIN( CASE WHEN UPPER(src.carrier_sts_cd) IN('CR', 'PENDING_ACCEPTANCE','BROADCASTED')
THEN SRC.SRC_CRE_TS_UTC  END) as FIRST_OFFER_PUBLISH_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd) in ('CR','DRIVER_ASSIGNED')
THEN SRC.SRC_CRE_TS_UTC  END) as CAR_REQ_TS_UTC
,Coalesce
(
	MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='PIN_VALIDATION_PICKUP_SUCCESS' THEN SRC.SRC_CRE_TS_UTC END),
	MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP'	THEN SRC.SRC_CRE_TS_UTC  END),
	MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP'	THEN SRC.SRC_CRE_TS_UTC  END)
) 
as PKG_RCPT_OR_PIN_DRVR_TS_UTC
,Coalesce
(
	MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DRIVER_SCANNED_AT_PICKUP'	THEN SRC.SRC_CRE_TS_UTC  END),
	MAX(CASE WHEN UPPER(src.carrier_sts_cd) ='DP'	THEN SRC.SRC_CRE_TS_UTC  END)
) 
as PKG_RCPT_DRVR_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='EP' 
 THEN  SRC.SRC_CRE_TS_UTC END) as ENR_PICKUP_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AP' 
 THEN  SRC.SRC_CRE_TS_UTC END) as AT_PICKUP_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ED' 
 THEN  SRC.SRC_CRE_TS_UTC  END) as ENR_DROPOFF_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='TRIP_CREATED' 
 THEN  SRC.SRC_CRE_TS_UTC  END) as TRIP_CREATED_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DP' 
 THEN  SRC.SRC_CRE_TS_UTC	END) as DISPATCHED_TS_UTC 
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='LOADED' 
 THEN  SRC.SRC_CRE_TS_UTC	END) as LOADED_TS_UTC  
 ,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='AD'
THEN SRC.SRC_CRE_TS_UTC   END) as AT_DROPOFF_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='ER'
THEN  SRC.SRC_CRE_TS_UTC END) as ENR_RETURN_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='RT' 
THEN  SRC.SRC_CRE_TS_UTC END) as Returned_TS_UTC
,MAX(CASE WHEN UPPER(src.carrier_sts_cd)='DRIVER_CANCELLED' 
THEN  SRC.SRC_CRE_TS_UTC END) as DRIVER_CANCELLED_TS_UTC,
MAX(SRC.DATA_SRC_CD) AS REC_SRC,
MAX(DLVR_SLOT_END_TS) AS DLVR_SLOT_END_TS,
MAX(DLVR_SLOT_END_TS_UTC) AS DLVR_SLOT_END_TS_UTC,
MAX(DLVR_SLOT_START_TS) AS DLVR_SLOT_START_TS,
MAX(DLVR_SLOT_START_TS_UTC) AS DLVR_SLOT_START_TS_UTC,
MAX(SRC.ORDER_PCKUP_PNT_ID) AS PP_MAX
FROM  		
	(SELECT *
		FROM 
		(
		Select * except (SRC_SALES_ORDER_NUM),
		case 
		when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
		when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
		case 
		when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
		end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
		where SRC_CRE_DT between DATE1 and current_date("US/Pacific")
		) crr
		WHERE CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific") 
		AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
		AND (CRR.trip_id IS NOT NULL or CRR.trip_id <> ''  )  
		AND (carrier_sts_cd != 'TRIP_DROPPED_V2')
	) SRC
    LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_CARRIER` AS oc 
    ON SRC.CARRIER_NM = oc.ORG_NM
	group by 1,2,3) ;
	
	


--Identified latest driver and carrier NEW(ADDED NEW CONDITION OF DRVR_USER_ID NOT NULL)
create or replace table LMD_DA.CARRIER_DRVR_DETAILS_FULL AS
(
SELECT * 
FROM
(SELECT SRC.SRC_SALES_ORDER_NUM AS SALES_ORDER_NUM, SRC.TRIP_ID, SRC.PO_NUM, SRC.DRVR_USER_ID, CARRIER_NM AS CARRIER_ORG_NM,
ROW_NUMBER() OVER (PARTITION BY SRC.SRC_SALES_ORDER_NUM, SRC.TRIP_ID, SRC.PO_NUM ORDER BY  SRC.SRC_CRE_TS DESC) RN
, SRC.ORDER_PCKUP_PNT_ID
FROM ( 
		SELECT *
		FROM
		(
		Select * except (SRC_SALES_ORDER_NUM),
		case 
		when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
		when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
		case 
		when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
		end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
		where SRC_CRE_DT between DATE1 and current_date("US/Pacific") 
		) crr
		WHERE CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific") 
		AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
		AND (CRR.trip_id IS NOT NULL or CRR.trip_id <> '' )  
		AND (carrier_sts_cd != 'TRIP_DROPPED_V2')
		AND UPPER(CARRIER_STS_CD) IN ('CR','EP','AP','ED','AD','DL','DLU','ER','RT') and DRVR_USER_ID is not null
	) SRC
    LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_CARRIER` AS oc 
    ON SRC.CARRIER_NM = oc.ORG_NM
    )
WHERE RN=1
);



create or replace table  LMD_DA.CARRIER_DLVR_ORD_CR_FULL as
(
	SELECT 
	SRC_SALES_ORDER_NUM AS SALES_ORDER_NUM,
	-- ADDED ORDER CREATED TIMESTAMP TO GET OTD FOR DAAS
	MAX(CASE WHEN UPPER(carrier_sts_cd) = UPPER('ORDER_CREATED') THEN src_cre_ts ELSE NULL END) AS ORDER_CREATED_TS,
	MAX(CASE WHEN UPPER(carrier_sts_cd) = UPPER('ORDER_CREATED') THEN src_cre_ts_UTC ELSE NULL END) AS ORDER_CREATED_TS_UTC	 
	FROM 
	(
	Select * except (SRC_SALES_ORDER_NUM),
	case 
	when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
	when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
	case 
	when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
	end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
	from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
	where SRC_CRE_DT between DATE1 and current_date("US/Pacific")
	) crr
	WHERE CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific")
	AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
	AND (carrier_sts_cd != 'TRIP_DROPPED_V2')
	GROUP BY 1
);

--combining timestamps and driver details

create or replace table LMD_DA.CARRIER_DLVR_TRKSTS_V2_FULL as
(SELECT 
	A.*, 
	case 
		when DTL.first_assgn_carrier_nm = 'POINTPICKUP' then DTL.first_assgn_carrier_nm 
		else initcap(DTL.first_assgn_carrier_nm) 
		end as first_assgn_carrier_nm,
	CASE 
		WHEN UPPER(A.REC_SRC) = 'DAAS' AND COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) IS NULL and COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) like '%@%' THEN 'SPARK'
		WHEN UPPER(A.REC_SRC) = 'DAAS' AND COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) IS NULL and COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) IS NULL THEN 'SPARK' 
		WHEN UPPER(A.REC_SRC) = 'DAAS' AND COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) IS NULL and COALESCE(B.DRVR_USER_ID, A.DRVR_SPARK, A.DRVR_MAX) not like '%@%' THEN ''
	    ELSE COALESCE(B.CARRIER_ORG_NM, A.CAR_SPARK, A.CAR_MAX) 
		END AS CARRIER_ORG_NM,
	COALESCE(B.ORDER_PCKUP_PNT_ID,A.PP_MAX)  AS ORDER_PCKUP_PNT_ID,
	OC.ORDER_CREATED_TS,
	OC.ORDER_CREATED_TS_UTC	
FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2_TS_FULL A
LEFT JOIN LMD_DA.CARRIER_DRVR_DETAILS_FULL B
	ON A.TRIP_ID=B.TRIP_ID
	AND A.SALES_ORDER_NUM=B.SALES_ORDER_NUM
	AND coalesce(A.PO_NUM,'0')=coalesce(B.PO_NUM,'0')
LEFT JOIN LMD_DA.CARRIER_DLVR_ORD_CR_FULL OC
	ON A.SALES_ORDER_NUM = OC.SALES_ORDER_NUM
LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` DTL
	ON A.TRIP_ID=DTL.TRIP_ID
	AND A.SALES_ORDER_NUM=DTL.SALES_ORDER_NBR
	AND COALESCE(A.PO_NUM,'0')=COALESCE(DTL.PO_NBR,'0')
);


CREATE or replace TABLE LMD_DA.VOL_SALES_ORDER_LINE_DOTCOM_V2 AS
(
SELECT  	    DT.SALES_ORDER_NUM, PO_NUM_TEMP
	   ,'NA' AS OG_MKT_NM        
	   ,COALESCE(osn.WM_STORE_NUM,osn.WM_DSTRBTR_NO) AS Store_id
       ,POS.ACTL_SHPMNT_TS AS SLOT_START_TS
       ,POS.EXPC_DLVR_TS AS SLOT_END_TS
	   ,POS.ACTL_SHPMNT_TS_UTC AS SLOT_START_TS_UTC
       ,POS.EXPC_DLVR_TS_UTC AS SLOT_END_TS_UTC
	   ,DT.FULFMT_TYPE_ID AS FMT_TYPE
	   ,POS.ACTL_SHPMNT_TS 
	   ,POS.ACTL_SHPMNT_TS_UTC
       ,DT.DT_TYPE
	   ,DT.AE_IND
	   ,DT.SVC_ID
	   ,DT.ORDER_PLACED_TS
	   ,DT.ORDER_PLACED_TS_UTC
   FROM
	  (
	   SELECT  
		      A.SALES_ORDER_NUM, A.PO_NUM AS PO_NUM_TEMP
		     ,A.SHIP_NODE_ORG_CD
			 ,CASE
			WHEN FULFMT_TYPE_CD='-999' THEN -999
			WHEN UPPER(FULFMT_TYPE_CD)='SHIPTOHOME' THEN 1
			WHEN UPPER(FULFMT_TYPE_CD)='SITETOSTORE' THEN 2
			WHEN UPPER(FULFMT_TYPE_CD)='ELECTRONIC' THEN 10
			WHEN UPPER(FULFMT_TYPE_CD)='SUBSCRIPTION' THEN 5
			WHEN UPPER(FULFMT_TYPE_CD)='PICKUPTODAY' THEN 4
			WHEN UPPER(FULFMT_TYPE_CD)='DELIVERY' THEN 12
			WHEN UPPER(FULFMT_TYPE_CD)='PICKUP' THEN 13
			WHEN UPPER(FULFMT_TYPE_CD)='UNSCHEDULED_PICKUP' THEN 14
			WHEN UPPER(FULFMT_TYPE_CD)='SCHEDULED_PICKUP' THEN 6
			WHEN UPPER(FULFMT_TYPE_CD)='SCHEDULED_DELIVERY' THEN 7
			WHEN UPPER(FULFMT_TYPE_CD)='INHOME' THEN 11
			WHEN UPPER(FULFMT_TYPE_CD)='EXPRESS_PICKUP' THEN 8
			WHEN UPPER(FULFMT_TYPE_CD)='EXPRESS_DELIVERY' THEN 9
			WHEN UPPER(FULFMT_TYPE_CD)='1HG' THEN 3
			WHEN UPPER(FULFMT_TYPE_CD)='UNSCHEDULED_DELIVERY' THEN 15
			WHEN UPPER(FULFMT_TYPE_CD)='WMT_STORE_NON_ECOMM' THEN 16

			END AS FULFMT_TYPE_ID
			 ,Max(A.carrier_mthd_id) AS DT_TYPE
			 ,max(case when SOL.anl_event_ind =2048 THEN 1 ELSE 0 END) as AE_Ind
			 , MAX(SOL.SVC_ID) AS SVC_ID
			 ,MAX(SOL.ORDER_PLACED_TS) AS ORDER_PLACED_TS
			 ,MAX(SOL.ORDER_PLACED_TS_UTC) AS ORDER_PLACED_TS_UTC
			 FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_LINE` A
			 INNER JOIN `wmt-edw-prod.WW_MB_DL_VM.SALES_ORDER_LINE` SOL 
        ON A.sales_order_num = SOL.sales_order_num 
		and A.SALES_ORDER_LINE_NUM=SOL.SALES_ORDER_LINE_NUM
	    WHERE A.op_cmpny_cd = 'WMT.COM'  
		AND A.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
	      AND  A.carrier_mthd_id IN ('1000','1080','7000','9000')
		  AND SOL.op_cmpny_cd = 'WMT.COM' 
		  AND SOL.ORDER_PLACED_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
     	GROUP BY 1, 2,3,4
	  ) AS DT
   LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_SHIP_NODE` osn 
	 ON DT.ship_node_org_CD = osn.ORG_CD
   LEFT JOIN 
	       (
            SELECT  
	               A.SALES_ORDER_NUM
				   ,PO_NUM
		          ,MAX ( A.ACTL_SHPMNT_TS ) ACTL_SHPMNT_TS
		          ,MAX(A.EXPC_DLVR_TS) EXPC_DLVR_TS
				  ,MAX ( A.ACTL_SHPMNT_TS_UTC ) ACTL_SHPMNT_TS_UTC
		          ,MAX(A.EXPC_DLVR_TS_UTC) EXPC_DLVR_TS_UTC
              FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_SHPMNT` A 
			  INNER JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_SHPMNT_LINE` b 
			  ON a.sales_order_num=b.sales_order_num AND a.SHPMNT_NUM=b.SHPMNT_NUM 
			  AND a.op_cmpny_cd =b.op_cmpny_cd
			 WHERE A.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
			 AND B.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
             GROUP BY 1,2
	       ) POS
	 ON DT.SALES_ORDER_NUM = POS.SALES_ORDER_NUM
	 AND DT.PO_NUM_TEMP = POS.PO_NUM
);


CREATE or replace TABLE LMD_DA.VOL_SALES_ORDER_LINE_OG_V2 AS
(SELECT A.SALES_ORDER_NUM, A.PO_NUM,
A.OG_MKT_NM,
A.STORE_ID,
A.SLOT_START_TS,
A.SLOT_START_TS_UTC,
A.SLOT_END_TS,
A.SLOT_END_TS_UTC,
A.FMT_TYPE,
POS.ACTL_SHPMNT_TS,
POS.ACTL_SHPMNT_TS_UTC,
A.DT_TYPE,
A.ORDER_PLACED_DT,
A.AE_IND,
A.SVC_ID,
A.ORDER_PLACED_TS,
A.ORDER_PLACED_TS_UTC
FROM(
 SELECT
  	    SRC.SALES_ORDER_NUM, PO_NUM
	   ,'NA' as OG_MKT_NM
       ,CAST(DLMD.STORE_NBR AS INT) AS STORE_ID  
       ,CASE
			WHEN SRC.FULFMT_TYPE_CD='-999' THEN -999
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='SHIPTOHOME' THEN 1
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='SITETOSTORE' THEN 2
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='ELECTRONIC' THEN 10
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='SUBSCRIPTION' THEN 5
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='PICKUPTODAY' THEN 4
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='DELIVERY' THEN 12
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='PICKUP' THEN 13
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='UNSCHEDULED_PICKUP' THEN 14
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='SCHEDULED_PICKUP' THEN 6
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='SCHEDULED_DELIVERY' THEN 7
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='INHOME' THEN 11
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='EXPRESS_PICKUP' THEN 8
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='EXPRESS_DELIVERY' THEN 9
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='1HG' THEN 3
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='UNSCHEDULED_DELIVERY' THEN 15
			WHEN UPPER(SRC.FULFMT_TYPE_CD)='WMT_STORE_NON_ECOMM' THEN 16
			END AS FMT_TYPE
  	   ,cast(MAX(SRC.SLOT_START_TS) AS DATETIME) AS SLOT_START_TS
	   ,MAX(SRC.SLOT_START_TS_UTC) AS SLOT_START_TS_UTC
  	   ,CAST(MAX(SRC.SLOT_END_TS) AS DATETIME) AS SLOT_END_TS
	   ,MAX(SRC.SLOT_END_TS_UTC) AS SLOT_END_TS_UTC
	   , 0 AS DT_TYPE
	   , MAX(ORDER_PLACED_DT) AS ORDER_PLACED_DT
	   ,max(case when SRC.anl_event_ind =2048 THEN 1 ELSE 0 END) as AE_Ind
	   , max(SRC.SVC_ID) AS SVC_ID
	   ,CAST(MAX(SRC.ORDER_PLACED_TS) AS DATETIME) AS ORDER_PLACED_TS
			 ,MAX(SRC.ORDER_PLACED_TS_UTC) AS ORDER_PLACED_TS_UTC
   FROM `wmt-edw-prod.WW_MB_DL_VM.SALES_ORDER_LINE` SRC
   LEFT JOIN
   `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` DLMD 
   ON DLMD.SALES_ORDER_NBR = src.sales_order_num 
INNER JOIN     
 (        SELECT  SALES_ORDER_NUM, PO_NUM, 
				  SALES_ORDER_LINE_NUM
                        FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_LINE`  
                        WHERE op_cmpny_cd = 'WMT.COM'
						AND SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
                        GROUP BY 1,2,3
    ) AS righty
    ON src.sales_order_num = righty.sales_order_num	 
	AND SRC.SALES_ORDER_LINE_NUM = righty.SALES_ORDER_LINE_NUM
	WHERE ORDER_PLACED_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
    AND SRC.OP_CMPNY_CD = 'WMT.COM'
	AND SRC.SVC_ID IN (19,20,31) 
	AND UPPER(SRC.FULFMT_TYPE_CD) IN ('SCHEDULED_DELIVERY', 'EXPRESS_DELIVERY') 
	AND SRC.OP_CMPNY_CD = 'WMT.COM'
  GROUP BY 1,2,3, 4,5
 )A
 LEFT JOIN 
	       (
            SELECT  
	               A.SALES_ORDER_NUM
				   ,PO_NUM
		          ,MAX ( A.ACTL_SHPMNT_TS ) ACTL_SHPMNT_TS
		          ,MAX(A.EXPC_DLVR_TS) EXPC_DLVR_TS
				  ,MAX ( A.ACTL_SHPMNT_TS_UTC ) ACTL_SHPMNT_TS_UTC
		          ,MAX(A.EXPC_DLVR_TS_UTC) EXPC_DLVR_TS_UTC
              FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_SHPMNT` A 
			  INNER JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_SHPMNT_LINE` b 
			  ON a.sales_order_num=b.sales_order_num AND a.SHPMNT_NUM = b.SHPMNT_NUM
			  AND a.op_cmpny_cd = b.op_cmpny_cd
			 WHERE A.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
			 AND B.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
             GROUP BY 1,2
	       ) POS
	 ON A.SALES_ORDER_NUM = POS.SALES_ORDER_NUM
	 AND A.PO_NUM = POS.PO_NUM);
 
--combined OG and dotcom deliveries 
 
CREATE or replace TABLE LMD_DA.VOL_SALES_ORDER_LINE_V2 AS
(
 SELECT  
	    SALES_ORDER_NUM, po_num 
	   ,OG_MKT_NM
	   ,Store_id
	   ,SLOT_START_TS
	   ,SLOT_START_TS_UTC
	   ,SLOT_END_TS
	   ,SLOT_END_TS_UTC
	   ,FMT_TYPE 
	   ,DT_TYPE -- distinct value is 0 here string
	   ,AE_IND
	   ,SVC_ID
	   ,ACTL_SHPMNT_TS 
	   ,ACTL_SHPMNT_TS_UTC
	   ,ORDER_PLACED_TS -- here datetime
	   ,ORDER_PLACED_TS_UTC
   FROM LMD_DA.VOL_SALES_ORDER_LINE_OG_V2
  UNION ALL
 SELECT 
	    SALES_ORDER_NUM, po_num_TEMP  
	   ,OG_MKT_NM
	   ,Store_id
       ,SLOT_START_TS
	   ,SLOT_START_TS_UTC
	   ,SLOT_END_TS
	   ,SLOT_END_TS_UTC 
	   ,FMT_TYPE
	   ,cast(DT_TYPE as int64) DT_TYPE -- here integer
	   ,AE_IND
	   ,SVC_ID
	   ,ACTL_SHPMNT_TS 
	   ,ACTL_SHPMNT_TS_UTC
	   ,datetime(ORDER_PLACED_TS) as ORDER_PLACED_TS -- here timestamp
	   ,ORDER_PLACED_TS_UTC
   FROM LMD_DA.VOL_SALES_ORDER_LINE_DOTCOM_V2 
);
								
create or replace table LMD_DA.ORDER_PO_DROP_TIME_V2 AS ( SELECT 
SPSL.sales_order_num, SPSL.PO_NUM,
MIN(spsl.SRC_CRE_TS) AS dropped_time_gmt,
MIN(spsl.SRC_CRE_TS_UTC) AS dropped_time_gmt_UTC
                                FROM  `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_STS_LINE` SPSL
                                JOIN   `wmt-edw-prod.WW_MB_DL_VM.STS_LKP` SLKP ON (SPSL.ORDER_STATUS_CD = SLKP.STS_cd)
				WHERE EXTRACT(DATE FROM SPSL.SRC_CRE_TS) between DATE1 and current_date("US/Pacific") --TWO_MONTHS
                AND SPSL.op_cmpny_cd='WMT.COM'
                AND UPPER(sts_desc)=UPPER('PO Created')
								GROUP BY 1,2 );								
														

CREATE OR REPLACE TABLE LMD_DA.JIE_STORE_CARRIER_NEW AS
(
SELECT 
	DISTINCT A.* , b.CITY_NM as City, b.DLVR_REGION_NM AS CBSA , 
	COALESCE(c.DOM,'NA') AS DOM
FROM 
	(SELECT 
		DISTINCT STORE_ID,Delivery_Provider, MIN(SLOT_DT) AS START_DATE ,  MAX(SLOT_DT) AS END_DATE
	FROM 
		(SELECT 
			STORE_ID,  
			Delivery_Provider,
	Extract (DATE from(COALESCE(DLVR_SLOT_START_TS_TZ, AT_DROPOFF_TS_TZ, ENR_DROPOFF_TS_TZ, AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ,CAR_REQ_TS_TZ,
         Slot_From_TS,ORDER_DROP_TS, CARRIER_DLVR_TS_TZ))) AS Slot_DT
			,COUNT(*) AS COUNT
      FROM 
      ( SELECT 
			ORDER_PCKUP_PNT_ID as STORE_ID,  
			CASE 
				WHEN UPPER(first_assgn_carrier_nm) = '%POSTMATE%' THEN 'UBER' 
				WHEN UPPER(CARRIER_ORG_NM) = 'SPARK' AND first_assgn_carrier_nm IS NULL THEN 'Spark'
				WHEN UPPER(CARRIER_ORG_NM) = 'SPARK' AND UPPER(first_assgn_carrier_nm) NOT LIKE '%SPARK%' THEN 'Spark'
				ELSE first_assgn_carrier_nm 
				END AS Delivery_Provider,
        CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_TS ELSE DATETIME(CRR.DLVR_TS_UTC,OBU.ORG_TM_ZONE)
        END AS CARRIER_DLVR_TS_TZ,
        CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.AT_DROPOFF_TS ELSE DATETIME(CRR.AT_DROPOFF_TS_UTC,OBU.ORG_TM_ZONE)  END AS AT_DROPOFF_TS_TZ,
        CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_DROPOFF_TS ELSE DATETIME(CRR.ENR_DROPOFF_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_DROPOFF_TS_TZ,
        CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.CAR_REQ_TS ELSE DATETIME(CRR.CAR_REQ_TS_UTC,OBU.ORG_TM_ZONE)  END AS CAR_REQ_TS_TZ,
			CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_PICKUP_TS ELSE DATETIME(CRR.ENR_PICKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_PICKUP_TS_TZ,
			CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.AT_PICKUP_TS ELSE DATETIME(CRR.AT_PICKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS AT_PICKUP_TS_TZ,
      CASE WHEN OBU.ORG_TM_ZONE='MST' THEN SOL.SLOT_START_TS ELSE DATETIME(SOL.SLOT_START_TS_UTC,OBU.ORG_TM_ZONE) END AS Slot_From_TS,
			CASE WHEN OBU.ORG_TM_ZONE='MST' THEN DRP.dropped_time_gmt ELSE DATETIME(DRP.dropped_time_gmt_UTC,OBU.ORG_TM_ZONE) END ORDER_DROP_TS,
      CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_SLOT_START_TS ELSE DATETIME(CRR.DLVR_SLOT_START_TS_UTC,OBU.ORG_TM_ZONE)  END AS DLVR_SLOT_START_TS_TZ			
		FROM `LMD_DA.CARRIER_DLVR_TRKSTS_V2_FULL` CRR
    LEFT JOIN LMD_DA.VOL_SALES_ORDER_LINE_V2 SOL 
    ON CRR.SALES_ORDER_NUM = SOL.SALES_ORDER_NUM
    AND CRR.PO_NUM = SOL.PO_NUM
    LEFT JOIN LMD_DA.ORDER_PO_DROP_TIME_V2 DRP
    ON SOL.SALES_ORDER_NUM = DRP.SALES_ORDER_NUM
    AND SOL.PO_NUM = DRP.PO_NUM
    LEFT JOIN
			(SELECT 
			    ORG_CD  
			   ,WM_DSTRBTR_NO
			   ,OG_MKT_ID
			   ,CASE
      			    WHEN ORG_TM_ZONE ='MDT' THEN 'US/Mountain'
			        WHEN ORG_TM_ZONE ='MST' THEN 'MST'
					WHEN ORG_TM_ZONE ='PDT' THEN 'US/Pacific'
					WHEN ORG_TM_ZONE ='PST' THEN 'US/Pacific'
					WHEN ORG_TM_ZONE ='EST' THEN 'US/Eastern'
					WHEN ORG_TM_ZONE ='EDT' THEN 'US/Eastern'
					WHEN ORG_TM_ZONE ='CST' THEN 'US/Central'
					WHEN ORG_TM_ZONE ='CDT' THEN 'US/Central'
					WHEN ORG_TM_ZONE ='AKD' THEN 'US/Alaska'
					WHEN ORG_TM_ZONE ='AKS' THEN 'US/Alaska'
					WHEN ORG_TM_ZONE IN ('HAS','HST') THEN 'US/Aleutian'
					ELSE 'US/Pacific'   
			        END AS ORG_TM_ZONE
				,REGION
			FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_SHIP_NODE`
			WHERE ORG_TM_ZONE IS NOT NULL  AND PUT_IND IS NOT NULL
			) OBU 
			ON COALESCE(CAST(CRR.ORDER_PCKUP_PNT_ID AS STRING), CAST(SOL.STORE_ID AS STRING) ) = CAST(OBU.WM_DSTRBTR_NO AS STRING)
      )
    WHERE STORE_ID  IN 
			(SELECT 
				DISTINCT CAST(STORE_NBR as STRING) 
			FROM 
				(
					(SELECT DISTINCT STORE_NBR 
					FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST`
					where (lower(left(trim(DLVR_AREA_NM),7)) ='walmart' or lower( left(trim(DLVR_AREA_NM),14)) ='joyrun walmart')
					and UPPER(PRMRY_CARRIER_NM)='SPARK'	and CURR_IND=1
					)
					UNION ALL
					(SELECT	DISTINCT STORE_NBR 
					FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
					WHERE 
					coalesce(DLVR_CARRIER_TS,ORDER_PLCD_DT,extract(DATE FROM TRIP_START_TS),RPT_DT)> '2020-05-01'
					)
				)	
			)
		GROUP BY 1,2,3
		)
	GROUP BY 1,2
	) A
LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST` b on CAST(a.STORE_ID AS STRING) = CAST(b.STORE_NBR AS STRING)
LEFT JOIN
	(
	 SELECT 
	 Store_NUM as Store_ID,
	 DNM_Name as DOM, 
	 FROM `wmt-tebi.common.DENS_Master_Alignment` 
	) C on CAST(a.STORE_ID AS STRING) = CAST(c.Store_ID AS STRING)
WHERE B.CURR_IND=1 and UPPER(A.Delivery_Provider) = 'SPARK' 
);


--Order picking and shipping details are found
create or replace table LMD_DA.SHPMNT_STATUS AS (
    SELECT SP.SALES_ORDER_NUM,
	SP.PO_NUM,
	CASE 
	   	    WHEN UPPER(SLKP.ORDER_STATUS_CD) LIKE '%CANCELLED%' 
			THEN 'Cancelled'
            WHEN UPPER(SLKP.ORDER_STATUS_CD) LIKE '%SHIPPED%' 
			THEN 'Shipped'
            WHEN UPPER(SLKP.ORDER_STATUS_CD) LIKE '%CREATED%' 
			THEN 'Created'
        END AS STS_DESC,
	SP.ACTL_EPOS_CMPL_TS,
	SP.ACTL_EPOS_CMPL_TS_UTC,
	SFO.GIF_PICK_DUE_TS
		FROM
(SELECT 
 SALES_ORDER_NUM
,CURR_STATUS_CD
,PO_NUM
,ACTL_EPOS_CMPL_TS
,ACTL_EPOS_CMPL_TS_UTC
FROM 
 (
SELECT SALES_ORDER_NUM,
CURR_STATUS_CD
,ROW_NUMBER() OVER (PARTITION BY SALES_ORDER_NUM, PO_NUM ORDER BY SRC_CRE_TS DESC) RN
,PO_NUM
,ACTL_EPOS_CMPL_TS
,ACTL_EPOS_CMPL_TS_UTC
 FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO`  
WHERE SRC_CRE_TS between DATE1 and current_date("US/Pacific") --TWO_MONTHS	
 ) T1 
WHERE T1.RN = 1  
) SP
LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` SLKP
   ON SLKP.SALES_ORDER_NBR = SP.sales_order_num and COALESCE(SLKP.po_nbr,'-0') = COALESCE(SP.po_num,'-0')
LEFT JOIN 
(SELECT sales_order_num, 
MAX(ORDER_PICK_DUE_LCL_TS) GIF_PICK_DUE_TS
FROM `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER` 
WHERE CAST(ORDER_PICK_DUE_LCL_TS AS DATE) between DATE1 and current_date("US/Pacific") --TWO_MONTHS
GROUP by sales_order_num 
) SFO 
ON SP.sales_order_num = SFO.sales_order_num
);

--Walmart week mapping
CREATE OR REPLACE TABLE LMD_DA.WMT_WEEK AS 
(
SELECT 
			       DISTINCT 
				   CDT.CAL_DT
		          ,WMK.WM_WK_ID
			      ,CASE 
			           WHEN WMK.WM_WK_NBR_OF_YR_NBR < 10 
					   THEN TRIM( cast(EXTRACT(YEAR FROM CDT.WM_YR_BEG_DT) as string))||'0'||TRIM(cast(WMK.WM_WK_NBR_OF_YR_NBR as string))
                       ELSE TRIM( cast( EXTRACT(YEAR FROM CDT.WM_YR_BEG_DT) as string))||TRIM(cast(WMK.WM_WK_NBR_OF_YR_NBR as string))
                   END AS WM_WK
              FROM `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_DT`  CDT
             INNER JOIN `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_WM_WK` WMK 
			    ON CDT.WM_WK_ID=WMK.WM_WK_ID
             WHERE CDT.CAL_DT BETWEEN CAST('2018-06-01' AS DATE)  AND CURRENT_DATE("US/Pacific") 
);		     


-- NEW SPARK_ZONE TABLE

CREATE OR REPLACE TABLE LMD_DA.SPARK_ZONE_NEW as 
(SELECT * FROM
	(SELECT DISTINCT a.STORE_NBR as Store_ID,b.DLVR_AREA_NM as Spark_Zone, b.DLVR_REGION_NM AS CBSA FROM 
( SELECT DISTINCT STORE_NBR FROM 
(SELECT DISTINCT STORE_NBR FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST`
where (lower( left(trim(DLVR_AREA_NM),7)) ='walmart' or lower( left(trim(DLVR_AREA_NM),14)) ='joyrun walmart')
and UPPER(PRMRY_CARRIER_NM)='SPARK'
and CURR_IND=1)
UNION ALL
(SELECT DISTINCT STORE_NBR FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` 
WHERE coalesce(DLVR_CARRIER_TS,ORDER_PLCD_DT,extract(DATE FROM TRIP_START_TS),RPT_DT)> '2020-05-01'
))a 
LEFT JOIN (SELECT DISTINCT STORE_NBR,DLVR_AREA_NM,DLVR_REGION_NM FROM 
			`wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST`
			WHERE CURR_IND=1) b on a.STORE_NBR = b.STORE_NBR)A
WHERE SPARK_ZONE != 'Dynamic Pay testing zone'
);


--Spark zone mapping for DAAS stores(UPDATED) AND ADDED CITY AND STATE CD

CREATE OR REPLACE TABLE LMD_DA.SPARK_ZONE_DAAS as 
(SELECT CAST(A.ORDER_PCKUP_PNT_ID AS NUMERIC) AS STORE_ID, ext_store_nbr AS EXT_STORE_NBR, B.spark_zn  AS SPARK_ZONE, B.cbsa as CBSA,
 CITY_NM as CITY, ST_CD as STATE_CD
FROM 
(SELECT DISTINCT ORDER_PCKUP_PNT_ID FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2_FULL
WHERE UPPER(REC_SRC) = 'DAAS' AND ORDER_PCKUP_PNT_ID IS NOT NULL
) A 
inner join 
(select distinct(a.store_nbr) AS int_store_nbr, ext_store_nbr, b.spark_zone as spark_zn, b.CBSA as cbsa, a.CITY_NM as CITY_NM, a.ST_CD as ST_CD
from wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST a 
join LMD_DA.SPARK_ZONE_NEW b
on a.STORE_NBR = b.store_id
) B
on cast(A.ORDER_PCKUP_PNT_ID as numeric)= B.int_store_nbr);




-- Getting the new stores and DAAS stores in a different table
CREATE OR REPLACE TABLE LMD_DA.JIE_STORE_CARRIER1_DAAS AS 
(SELECT 
	T.STORE_ID, COALESCE(Q.START_DATE,T.START_DATE) AS START_DATE,
	COALESCE(Q.END_DATE,T.END_DATE) AS END_DATE,
	COALESCE(Q.CBSA,T.CBSA) AS CBSA,
	COALESCE(Q.DELIVERY_PROVIDER,T.DELIVERY_PROVIDER) AS DELIVERY_PROVIDER,
	COALESCE(Q.DOM,T.DOM) AS DOM,
	COALESCE(Q.CITY,T.CITY) AS CITY
FROM
	(SELECT 
		CAST(B.STORE_ID AS STRING) AS STORE_ID, 
		CAST('2019-01-01' AS DATE) AS START_DATE, 
		CAST('9999-01-01' AS DATE) AS END_DATE, 
		'NA' AS CBSA,
		'SPARK' AS DELIVERY_PROVIDER, 
		'NA' AS DOM, 
		'NA' AS CITY
	FROM
		(SELECT 
			DISTINCT STORE_ID 
		FROM
			(
			SELECT DISTINCT CAST(ORDER_PCKUP_PNT_ID AS STRING) AS STORE_ID FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2_FULL
			UNION ALL
			SELECT DISTINCT CAST(STORE_ID AS STRING) FROM LMD_DA.VOL_SALES_ORDER_LINE_V2
			)
		) A
	INNER JOIN 
		(SELECT DISTINCT STORE_ID FROM `LMD_DA.SPARK_ZONE_NEW` 
		UNION ALL
		SELECT DISTINCT STORE_ID FROM LMD_DA.SPARK_ZONE_DAAS 
		)B
	ON CAST(A.STORE_ID AS STRING) = CAST(B.STORE_ID AS STRING)
	LEFT JOIN 
		(
		SELECT DISTINCT STORE_ID FROM LMD_DA.JIE_STORE_CARRIER_NEW WHERE UPPER(DELIVERY_PROVIDER) LIKE '%SPARK%'
		)C
	ON CAST(B.STORE_ID AS STRING) = CAST(C.STORE_ID AS STRING)
	WHERE C.STORE_ID IS NULL
	)T
LEFT JOIN LMD_DA.JIE_STORE_CARRIER_NEW Q
ON T.STORE_ID=CAST(Q.STORE_ID AS STRING)
);
	
--- NEW SCHEMA QUERY
create or replace table LMD_DA.OUTBOUND_BI_BASED_OTP_DATA AS 
(SELECT
      SPOD.SALES_ORDER_NUM,
      SPOD.PO_NUM,
	  SFOS.ORDER_PICK_DUE_LCL_TS,
      PCK_CMPLS.PICK_COMPLETE_TS AS PICK_COMPLETE_LCL_TS,
      COALESCE(SFOS.CANCELLED_IND,0) AS FULFMT_CNCLD_IND
    FROM wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO AS SPOD
	LEFT JOIN
		(select 
			FO.PO_NUM, 
			max(PS.PICK_ACTV_LCL_TS) as PICK_COMPLETE_TS 
		from wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_PICK_LINE PS
		INNER JOIN wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER FO
			ON FO.STORE_FULFMT_ORDER_NUM = PS.STORE_FULFMT_ORDER_NUM
			AND FO.APPLN_VER_CD=PS.APPLN_VER_CD
		WHERE 
			PS.appln_ver_cd=1 
			and PS.SRC_CRE_UTC_DT between DATE1 and current_date("US/Pacific") -- TWO_MONTHS
			and pick_type_cd in (5100,5200,5300,5400)
			AND FO.SRC_CRE_UTC_DT between DATE1 and current_date("US/Pacific") -- TWO_MONTHS
			AND FO.SRC_PGM_NM IN ('PUT','PICK-GMD','S2S')
		GROUP BY FO.PO_NUM
		) PCK_CMPLS
		ON PCK_CMPLS.PO_NUM = SPOD.PO_NUM
	LEFT JOIN 
		(SELECT 
			SFO.SALES_ORDER_NUM, 
			SFO.PO_NUM,
			MAX(CASE WHEN FULFMT_ORDER_STATUS_CD = 16 THEN 1 ELSE 0 END) AS CANCELLED_IND,
			max(SFO.ORDER_PICK_DUE_LCL_TS) as ORDER_PICK_DUE_LCL_TS
		FROM wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER_STAT FOS
		JOIN wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER SFO 
			ON FOS.STORE_FULFMT_ORDER_NUM = SFO.STORE_FULFMT_ORDER_NUM
			AND FOS.APPLN_VER_CD = SFO.APPLN_VER_CD
		WHERE 
			FULFMT_ORDER_STATUS_CD IN (16)
			AND SFO.APPLN_VER_CD = 2
			AND DATE(FOS.FULFMT_ORDER_STATUS_UTC_DT) between DATE1 and current_date("US/Pacific")    --TWO_MONTHS
			AND DATE(SFO.SRC_CRE_UTC_DT) between DATE1 and current_date("US/Pacific") --TWO_MONTHS
		GROUP BY 1,2 
		) SFOS
        ON SPOD.SALES_ORDER_NUM =SFOS.SALES_ORDER_NUM  AND SPOD.PO_NUM = SFOS.PO_NUM
    WHERE
	SPOD.op_cmpny_cd='WMT.COM'
	AND SPOD.SRC_CRE_DT between DATE1 and current_date("US/Pacific")  --TWO_MONTHS
);	

	
UPDATE LMD_DA.OUTBOUND_BI_BASED_OTP_DATA AS TGT    
	SET TGT.ORDER_PICK_DUE_LCL_TS  = SRC.ORDER_PICK_DUE_LCL_TS
	FROM
		(SELECT 
			PO_NUM,
			max(ORDER_PICK_DUE_LCL_TS) ORDER_PICK_DUE_LCL_TS 
		FROM wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER 
		WHERE 
			CAST(ORDER_PICK_DUE_LCL_TS AS DATE) between DATE1 and current_date("US/Pacific") --TWO_MONTHS
			GROUP by PO_NUM 
		) AS SRC
	WHERE
		TGT.PO_NUM = SRC.PO_NUM
		AND TGT.ORDER_PICK_DUE_LCL_TS IS NULL;
		

UPDATE LMD_DA.OUTBOUND_BI_BASED_OTP_DATA AS TGT      
	SET PICK_COMPLETE_LCL_TS = SRC.PICK_COMPLETE_LCL_TS
    FROM
		(select 
			FO.PO_NUM,
			MAX(PICK_ACTV_LCL_TS) AS PICK_COMPLETE_LCL_TS 
		from  wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_PICK_LINE PSL
		INNER JOIN wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER FO
			ON FO.STORE_FULFMT_ORDER_NUM = PSL.STORE_FULFMT_ORDER_NUM
			AND FO.APPLN_VER_CD=PSL.APPLN_VER_CD
		WHERE 
			PSL.SRC_CRE_UTC_DT between DATE1 and current_date("US/Pacific")   --TWO_MONTHS
			AND FO.SRC_CRE_UTC_DT between DATE1 and current_date("US/Pacific")    --TWO_MONTHS
			AND PSL.APPLN_VER_CD=2
			AND FO.SRC_PGM_NM IN ('PUT','PICK-GMD','S2S','ONEAPP')
		GROUP BY FO.PO_NUM
		) AS SRC
    WHERE TGT.PO_NUM = SRC.PO_NUM AND TGT.PICK_COMPLETE_LCL_TS is NULL;


--All the metrics are combined and created the table at order num, po num and trip id level(ADDED CITY AND STATE_CD)

CREATE OR REPLACE TABLE LMD_DA.TRIP_PO_LIST AS 
( 
SELECT 
	DISTINCT B.* except(client, CARRIER_ORG_NM,customer_sla, CUSTOMER_SLA_RETURN, PICK_COMPLETE_LCL_TS, pick_due_lcl_ts,FULFMT_CNCLD_IND,ACTL_EPOS_CMPL_LCL_TS, promise_date), 
	COALESCE(B.CBSA_SPARK, C.CBSA ) AS CBSA,
	c.START_DATE AS Launch_Date,
	c.Delivery_Provider,
	C.DOM,
	S.CITY_NM as CITY,
	S.ST_CD as STATE_CD,
	RDT.WM_WK, 
	RDT.WM_WK_ID,
	CASE WHEN COALESCE(S.CLIENT_NM, CLIENT) Like '%1-800%' 
			THEN '1-800-Flowers'
	ELSE COALESCE(S.CLIENT_NM, CLIENT) END  AS CLIENT,
	CASE WHEN CARRIER_ORG_NM = 'POINTPICKUP' THEN CARRIER_ORG_NM ELSE initcap(CARRIER_ORG_NM) END AS CARRIER_ORG_NM,   --sr 
	CASE WHEN DRVR_WAIT_TM_NEW_WITH_SIGN_TS>=1.2 AND DRVR_WAIT_TM_NEW_WITH_SIGN_TS<=60 THEN (DRVR_WAIT_TM_NEW_WITH_SIGN_TS-1.2) END AS DWT,
		
	CASE
	WHEN UPPER(REC_SRC)='DAAS' THEN (CASE
      WHEN AT_PICKUP_TS_TZ IS NULL THEN 'N'
      WHEN CAST(AT_Pickup_TS_TZ AS TIMESTAMP) > CAST(coalesce(slot_from_ts,DLVR_SLOT_START_TS_TZ) AS TIMESTAMP) THEN 'N'
    ELSE
    'Y'
  END
    )
    WHEN fmt_type = 7 AND UPPER(PICKER_TYPE_NM) = 'ASSOCIATE' THEN (CASE
      WHEN AT_PICKUP_TS_TZ IS NULL THEN 'N'
      WHEN CAST(AT_Pickup_TS_TZ AS TIMESTAMP) > CAST(TIMESTAMP_ADD(coalesce(slot_from_ts,DLVR_SLOT_START_TS_TZ),INTERVAL 10 MINUTE) AS TIMESTAMP) THEN 'N'
    ELSE
    'Y'
  END
    )
    WHEN fmt_type = 9 AND UPPER(picker_type_nm) = 'ASSOCIATE' THEN (CASE
      WHEN AT_PICKUP_TS_TZ IS NULL THEN 'N'
      WHEN CAST(AT_Pickup_TS_TZ AS TIMESTAMP) > CAST(coalesce(slot_from_ts,DLVR_SLOT_START_TS_TZ) AS TIMESTAMP) THEN 'N'
    ELSE
    'Y'
  END
    )
    WHEN fmt_type NOT IN (7, 9) AND UPPER(picker_type_nm) <> 'SHOPPER' THEN ( CASE
      WHEN AT_PICKUP_TS_TZ IS NULL THEN 'N'
      WHEN CAST(AT_Pickup_TS_TZ AS TIMESTAMP) > CAST(expected_arrival_time AS TIMESTAMP) THEN 'N'
    ELSE
    'Y'
  END
    )
    WHEN UPPER(picker_type_nm) = 'SHOPPER' THEN (CASE
      WHEN AT_PICKUP_TS_TZ IS NULL THEN 'N'
      WHEN CAST(PICK_START_LCL_TS AS TIMESTAMP) > CAST(coalesce(slot_from_ts,DLVR_SLOT_START_TS_TZ) AS TIMESTAMP) THEN 'N'
    ELSE
    'Y'
  END
    )
END
  AS on_time_arrival,
  
 Case 
  when fmt_type = 7 and upper(PICKER_TYPE_NM) = 'ASSOCIATE' THEN  (CASE
      WHEN CAST(CAR_REQ_TS_TZ AS TIMESTAMP) > CAST(TIMESTAMP_SUB(slot_from_ts,INTERVAL 4 MINUTE) AS TIMESTAMP) THEN 'Y'
    ELSE 'N'
  END)
   
  when fmt_type = 7 and upper(picker_type_nm) = 'SHOPPER' THEN (case
when CAST(CAR_REQ_TS_TZ AS TIMESTAMP) > cast(timestamp_sub(CAST(TIMESTAMP_SUB(slot_from_ts,INTERVAL 10 MINUTE) AS TIMESTAMP), INTERVAL datetime_diff(PICK_END_LCL_TS,PICK_START_LCL_TS, minute) minute) as timestamp) then 'Y'
else 'N'
end)

when fmt_type <> 7 or upper(REC_SRC) = 'DAAS' then Null   --LCA NA for Express, Dotcom, GoLocal
WHEN CAR_REQ_TS_TZ IS NULL then Null

end 
as Late_Carrier_Assignment

FROM
	(
	SELECT A.*,
		-- Updated on 27-03 by vn55chk (logic by vn55lsk)
		Extract (DATE from(COALESCE(DLVR_SLOT_START_TS_TZ, Slot_From_TS,ORDER_DROP_TS,CAR_REQ_TS_TZ,ENR_PICKUP_TS_TZ,AT_PICKUP_TS_TZ, 
		ENR_DROPOFF_TS_TZ,AT_DROPOFF_TS_TZ,CARRIER_DLVR_TS_TZ))) AS Slot_DT,
		Extract (HOUR from(COALESCE(DLVR_SLOT_START_TS_TZ, Slot_From_TS,ORDER_DROP_TS,CAR_REQ_TS_TZ,ENR_PICKUP_TS_TZ,AT_PICKUP_TS_TZ, 
		ENR_DROPOFF_TS_TZ,AT_DROPOFF_TS_TZ,CARRIER_DLVR_TS_TZ))) AS Slot_HR,				
		
		--ON_TIME_DELIVERY_EXCEPTION
		CASE 
			when FMT_TYPE IN (7,9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'Y'
            WHEN FMT_TYPE IN (7,9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'N' 
			
			WHEN DLVR_CLNT_ID = '2' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= TIMESTAMP_ADD(CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP), INTERVAL 1 HOUR) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '2' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > TIMESTAMP_ADD(CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP), INTERVAL 1 HOUR) 
				THEN 'N'

			--Added for Local Express by vn52vgo:
			WHEN DLVR_CLNT_ID = '1031'  AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1031'  AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			-- Added for Kelly Moore Ticket 785 & Unihop (18th July):
			WHEN DLVR_CLNT_ID in ('1037', '1040') and (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID in ('1037', '1040') and (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) >  (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) 
				THEN 'N'
			
			WHEN DLVR_CLNT_ID = '1020' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(LATE_DLVR_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1020' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(LATE_DLVR_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'N'
		
			-- Ticket 652, Updated by VN52GZM on 7th March 2022
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES < 3 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES < 3 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 3 AND PLANNED_MILES < 7 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 45 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 3 AND PLANNED_MILES < 7 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 45 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 7 AND PLANNED_MILES < 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 7 AND PLANNED_MILES < 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			
			WHEN DLVR_CLNT_ID = '1022' THEN
				CASE 
					WHEN (((EXTRACT(HOUR FROM FIRST_OFFER_PUBLISH_TS_TZ) <= 14) 
						and EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ))
						or (EXTRACT(HOUR FROM FIRST_OFFER_PUBLISH_TS_TZ) > 14 and (EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ) + 1 
						or EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ))))
					THEN 'Y'
					ELSE 'N' END
			
			--OTD FOR JOYRUN
			 
			WHEN DLVR_CLNT_ID ='1019' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID ='1019' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)
				THEN 'N'	
			
			
		  --Annual events
		    WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) >= '2022-09-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= promise_date THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) >= '2022-09-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > promise_date THEN 'N'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) <= '2021-11-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-05' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) <= '2021-11-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-05' THEN 'N'
		
		  
		 -- AE 2 & 3 added:
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-07' and '2021-11-12' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-12' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-07' and '2021-11-12' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-12' THEN 'N'
			
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-21' and '2021-11-26' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-26' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-21' and '2021-11-26' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-26' THEN 'N'
			
			WHEN AE_IND = 1 THEN NULL
		  
		  --Dotcom 
		
		-- TICKET 692 - OTD LOGIC CHANGE FOR UNSCHEDULED - 22 MAR 2022 - VN52GZM
			WHEN (FMT_TYPE NOT IN (7,9) OR FMT_TYPE IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  customer_sla THEN 'Y'
			WHEN (FMT_TYPE NOT IN (7,9) OR FMT_TYPE IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  >  customer_sla THEN 'N'												

			--MODIFIED OTD FOR DAAS																	
			WHEN REC_SRC = 'DAAS' AND  (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN REC_SRC = 'DAAS' AND  (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP))
				THEN 'N'

			ELSE NULL
			END AS On_Time_Delivery_EXCEPTION
			
		-- On_Time_Delivery --
		
		,CASE

		-- AP OG logic Update --
		--Previous Logic--
		    -- when FMT_TYPE IN (7,9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'Y'
            -- WHEN FMT_TYPE IN (7,9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP)
			-- AND EXTRACT(DATE FROM SLOT_TO_TS)=EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)	THEN 'N' 
			
			WHEN FMT_TYPE IN (7) And upper(picker_type_nm) = 'ASSOCIATE' and DLVR_CLNT_ID = '0' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'Y'
			WHEN FMT_TYPE IN (7) AND upper(picker_type_nm) = 'ASSOCIATE' and DLVR_CLNT_ID = '0' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP)
			THEN 'N'
			when
		    FMT_TYPE IN (7) And upper(picker_type_nm) != 'ASSOCIATE'  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'Y'
            WHEN FMT_TYPE IN (7) And upper(picker_type_nm) != 'ASSOCIATE' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP)
			AND EXTRACT(DATE FROM SLOT_TO_TS)=EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)	THEN 'N' 
			WHEN FMT_TYPE IN (7) And upper(picker_type_nm) != 'ASSOCIATE' AND EXTRACT(DATE FROM SLOT_TO_TS) < EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) THEN NULL
			
			when FMT_TYPE IN (9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'Y'
            WHEN FMT_TYPE IN (9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP)
			AND EXTRACT(DATE FROM SLOT_TO_TS)=EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)	THEN 'N' 
			WHEN FMT_TYPE IN (9) AND EXTRACT(DATE FROM SLOT_TO_TS) < EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) THEN NULL
			
			--Added for Local Express by vn52vgo:
			WHEN DLVR_CLNT_ID = '1031'  AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1031'  AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'			
	
			-- Added for Kelly Moore Ticket 785 & Unihop (18th July):
			WHEN DLVR_CLNT_ID in ('1037', '1040') and (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID in ('1037', '1040') and (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) >  (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) 
				THEN 'N'
				
--Sams OTD Logic update
			WHEN DLVR_CLNT_ID = '2' AND  (upper(DLVR_PRIORITY_NM) = 'SAME_DAY_DELIVERY' OR DLVR_PRIORITY_NM IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ) THEN 'Y'
			WHEN DLVR_CLNT_ID = '2' AND  (upper(DLVR_PRIORITY_NM) = 'SAME_DAY_DELIVERY' OR DLVR_PRIORITY_NM IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  >  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ) THEN 'N'
			WHEN DLVR_CLNT_ID = '2' AND upper(DLVR_PRIORITY_NM) IN ('EXPRESS', 'REGULAR', 'SCHEDULED_DELIVERY') AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP) THEN 'Y'
			WHEN DLVR_CLNT_ID = '2' AND upper(DLVR_PRIORITY_NM) IN ('EXPRESS', 'REGULAR', 'SCHEDULED_DELIVERY') AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP) THEN 'N'
			
			WHEN DLVR_CLNT_ID = '1020' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(LATE_DLVR_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1020' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(LATE_DLVR_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'N'

			-- Ticket 652, Updated by VN52GZM on 7th March 2022
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES < 3 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES < 3 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 3 AND PLANNED_MILES < 7 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 45 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 3 AND PLANNED_MILES < 7 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 45 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 7 AND PLANNED_MILES < 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 7 AND PLANNED_MILES < 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			
			WHEN DLVR_CLNT_ID = '1022' THEN
				CASE 
					WHEN (((EXTRACT(HOUR FROM FIRST_OFFER_PUBLISH_TS_TZ) <= 14) 
						and EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ))
						or (EXTRACT(HOUR FROM FIRST_OFFER_PUBLISH_TS_TZ) > 14 and (EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ) + 1 
						or EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ))))
					THEN 'Y'
					ELSE 'N' END
					
			--OTD FOR gamestop
			 
			WHEN DLVR_CLNT_ID IN ('1113','1464') AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ)
				THEN 'Y'
			WHEN DLVR_CLNT_ID IN ('1113','1464') AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) >  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ)
				THEN 'N'
				
			--OTD FOR Sur La Table
			 
			-- WHEN DLVR_CLNT_ID ='1476' AND 
			-- Extract (DATE from(COALESCE(DLVR_SLOT_START_TS_TZ, AT_DROPOFF_TS_TZ, ENR_DROPOFF_TS_TZ, AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ,CAR_REQ_TS_TZ,
      --       Slot_From_TS,ORDER_DROP_TS, CARRIER_DLVR_TS_TZ))) = EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) 
			-- THEN CASE WHEN (EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) < 20)  THEN 'Y'
			-- 		  WHEN (EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) = 20) AND (EXTRACT(MINUTE FROM CARRIER_DLVR_TS_TZ) = 0 ) THEN 'Y'
			-- 		  WHEN (EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) > 20)  THEN 'N'
			-- 		  WHEN (EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) = 20) AND (EXTRACT(MINUTE FROM CARRIER_DLVR_TS_TZ) > 0 ) THEN 'N'
			-- 		  END
			
			--OTD FOR JOYRUN
			 
			WHEN DLVR_CLNT_ID ='1019' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID ='1019' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)
				THEN 'N'	
				
			--OTD FOR APPLE
			 
			WHEN DLVR_CLNT_ID = '1026' THEN
				case WHEN (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP)) = (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 90 MINUTE) AS STRING)AS TIMESTAMP)) 
					AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP)
				THEN 'Y'
				WHEN (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP)) = (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 90 MINUTE) AS STRING)AS TIMESTAMP)) 
					AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)
				THEN 'N'
				WHEN (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP)) = (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP)) 
					AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_END_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
				WHEN (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP)) = (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP)) 
					AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_END_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
				ELSE NULL end
			
		  --Annual events
		    WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) >= '2022-09-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= promise_date THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) >= '2022-09-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > promise_date THEN 'N'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) <= '2021-11-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-05' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) <= '2021-11-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-05' THEN 'N'
		
		-- AE 2 & 3 added:
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-07' and '2021-11-12' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-12' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-07' and '2021-11-12' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-12' THEN 'N'
			
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-21' and '2021-11-26' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-26' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-21' and '2021-11-26' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-26' THEN 'N'
			
			WHEN AE_IND = 1 THEN NULL
		

		--- adding OTD Logic for Sally Beauty Supply 	
			WHEN DLVR_CLNT_ID = '1030' THEN
				case WHEN CARRIER_DLVR_TS_TZ is null  THEN NULL
					WHEN ORDER_CREATED_TS_TZ is null then NULL
					WHEN EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 10 AND 15 AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= (CAST(CAST(TIMESTAMP_ADD(ORDER_CREATED_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) THEN 'Y'
					WHEN EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 10 AND 15 AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > (CAST(CAST(TIMESTAMP_ADD(ORDER_CREATED_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) THEN 'N'
					WHEN  EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 0 AND 9 AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) =EXTRACT(DATE FROM ORDER_CREATED_TS_TZ) AND EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) <=  12 THEN 'Y'
					WHEN  EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 0 AND 9 AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) =EXTRACT(DATE FROM ORDER_CREATED_TS_TZ) AND EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) >  12 THEN 'N'
					WHEN  EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 0 AND 9 AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) >EXTRACT(DATE FROM ORDER_CREATED_TS_TZ) THEN 'N'
					WHEN  EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 16 AND 24 AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) = EXTRACT(DATE FROM ORDER_CREATED_TS_TZ) THEN 'Y'  
					
					WHEN  EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 16 AND 24 AND CAST(EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)AS TIMESTAMP) = CAST(EXTRACT(DATE FROM TIMESTAMP_ADD(ORDER_CREATED_TS_TZ,INTERVAL 1 DAY)) AS TIMESTAMP) 
						AND EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) <=  12 THEN 'Y'
					WHEN  EXTRACT(HOUR FROM ORDER_CREATED_TS_TZ) BETWEEN 16 AND 24 AND CAST(EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)AS TIMESTAMP) =CAST(EXTRACT(DATE FROM TIMESTAMP_ADD(ORDER_CREATED_TS_TZ,INTERVAL 1 DAY)) AS TIMESTAMP)
						AND EXTRACT(HOUR FROM CARRIER_DLVR_TS_TZ) >  12 THEN 'N'
					ELSE 'N'
				END
		 --Dotcom 
		-- rts sla
			WHEN (FMT_TYPE IS NULL AND 
			(FULFMT_TYPE_CD = 'CURBSIDE' AND ORDER_SVC_TYPE_NM = 'RETURN')) 
			AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  CUSTOMER_SLA_RETURN THEN 'Y'
				WHEN (FMT_TYPE IS NULL AND 
			(FULFMT_TYPE_CD = 'CURBSIDE' AND ORDER_SVC_TYPE_NM = 'RETURN')) 
			AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)> CUSTOMER_SLA_RETURN THEN 'N'		
		
		-- TICKET 692 - OTD LOGIC CHANGE FOR UNSCHEDULED - 22 MAR 2022 - VN52GZM	
			WHEN (FMT_TYPE NOT IN (7,9) OR FMT_TYPE IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  customer_sla THEN 'Y'
			WHEN (FMT_TYPE NOT IN (7,9) OR FMT_TYPE IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  >  customer_sla THEN 'N'												
			
			--MODIFIED OTD FOR DAAS		(Nespresso,SmarKargo)															
			WHEN REC_SRC = 'DAAS' AND DLVR_CLNT_ID IN ('1276','1384') AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ) 
			AND  CAST (Extract ( TIME from(CARRIER_DLVR_TS_TZ)) AS STRING)  <= '20:00'
                THEN 'Y'
			WHEN REC_SRC = 'DAAS' AND DLVR_CLNT_ID IN ('1276','1384') AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ) 
			AND CAST (Extract ( TIME from(CARRIER_DLVR_TS_TZ)) AS STRING)  > '20:00'
                THEN 'N'
            WHEN REC_SRC = 'DAAS' AND DLVR_CLNT_ID IN ('1276','1384') AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) >  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ)
                THEN 'N'
            WHEN REC_SRC = 'DAAS' AND  (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)) 
                THEN 'Y'
            WHEN REC_SRC = 'DAAS' AND  (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP))
                THEN 'N'
            ELSE NULL
            END AS On_Time_Delivery,

		CASE 
			when FMT_TYPE IN (7,9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP) THEN 'Y'
            
			WHEN FMT_TYPE IN (7,9)  AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(Slot_To_TS AS STRING) AS TIMESTAMP)
			AND EXTRACT(DATE FROM SLOT_TO_TS)=EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)	THEN 'N' 
			
			WHEN FMT_TYPE IN (7,9) AND EXTRACT(DATE FROM SLOT_TO_TS) < EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) THEN NULL
			
--Sams OTD Logic update
			WHEN DLVR_CLNT_ID = '2' AND  (upper(DLVR_PRIORITY_NM) = 'SAME_DAY_DELIVERY' OR DLVR_PRIORITY_NM IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ) <=  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ) THEN 'Y'
			WHEN DLVR_CLNT_ID = '2' AND  (upper(DLVR_PRIORITY_NM) = 'SAME_DAY_DELIVERY' OR DLVR_PRIORITY_NM IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  >  EXTRACT(DATE FROM DLVR_SLOT_END_TS_TZ) THEN 'N'
			WHEN DLVR_CLNT_ID = '2' AND upper(DLVR_PRIORITY_NM) IN ('EXPRESS', 'REGULAR', 'SCHEDULED_DELIVERY') AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP) THEN 'Y'
			WHEN DLVR_CLNT_ID = '2' AND upper(DLVR_PRIORITY_NM) IN ('EXPRESS', 'REGULAR', 'SCHEDULED_DELIVERY') AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING) AS TIMESTAMP) THEN 'N'
			
			--Added for Local Express by vn52vgo:
			WHEN DLVR_CLNT_ID = '1031'  AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1031'  AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			-- Added for Kelly Moore Ticket 785 & Unihop (18th July):
			WHEN DLVR_CLNT_ID in ('1037', '1040') and (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID in ('1037', '1040') and (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) >  (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP)) 
				THEN 'N'		
			
			WHEN DLVR_CLNT_ID = '1020' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(LATE_DLVR_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1020' AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(LATE_DLVR_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'N'
			
			-- Ticket 652, Updated by VN52GZM on 7th March 2022
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES < 3 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES < 3 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 30 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 3 AND PLANNED_MILES < 7 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 45 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 3 AND PLANNED_MILES < 7 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 45 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 7 AND PLANNED_MILES < 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 7 AND PLANNED_MILES < 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 60 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'

			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <=(CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'Y'
			WHEN DLVR_CLNT_ID = '1021' AND PLANNED_MILES >= 15 AND (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(TIMESTAMP_ADD(DLVR_SLOT_START_TS_TZ, INTERVAL 120 MINUTE) AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			
			WHEN DLVR_CLNT_ID = '1022' THEN
				CASE 
					WHEN (((EXTRACT(HOUR FROM FIRST_OFFER_PUBLISH_TS_TZ) <= 14) 
						and EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ))
						or (EXTRACT(HOUR FROM FIRST_OFFER_PUBLISH_TS_TZ) > 14 and (EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ) + 1 
						or EXTRACT(DATE from CARRIER_DLVR_TS_TZ) = EXTRACT(DATE from FIRST_OFFER_PUBLISH_TS_TZ))))
						THEN 'Y'
					ELSE 'N' END
			
			--OTD FOR JOYRUN
			 
			WHEN DLVR_CLNT_ID ='1019' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) <= CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP) 
				THEN 'Y'
			WHEN DLVR_CLNT_ID ='1019' AND CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP) > CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)
				THEN 'N'	
			
		  --Annual events
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) >= '2022-09-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= promise_date THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) >= '2022-09-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > promise_date THEN 'N'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) <= '2021-11-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-05' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) <= '2021-11-05' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-05' THEN 'N'
		
		-- AE 2 & 3 added:
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-07' and '2021-11-12' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-12' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-07' and '2021-11-12' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-12' THEN 'N'
			
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-21' and '2021-11-26' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  <= '2021-11-26' THEN 'Y'
			WHEN AE_IND = 1 AND EXTRACT(DATE FROM ORDER_PLACED_TS) between '2021-11-21' and '2021-11-26' AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  > '2021-11-26' THEN 'N'
			
			WHEN AE_IND = 1 THEN NULL
		  
		-- Dotcom 
			
			-- changed this particular section for creating  new otd logic for  defect rate calculation
			WHEN (FMT_TYPE NOT IN (7,9) OR FMT_TYPE IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ )   <=  customer_sla THEN 'Y'
			WHEN (FMT_TYPE NOT IN (7,9) OR FMT_TYPE IS NULL) AND EXTRACT(DATE FROM CARRIER_DLVR_TS_TZ)  >  customer_sla THEN 'N'												
			
			--MODIFIED OTD FOR DAAS																	
			
			WHEN REC_SRC = 'DAAS' AND  (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) <= (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP)) 
				THEN 'Y'
			WHEN REC_SRC = 'DAAS' AND  (CAST(CAST(CARRIER_DLVR_TS_TZ AS STRING) AS TIMESTAMP)) > (CAST(CAST(DLVR_SLOT_END_TS_TZ AS STRING)AS TIMESTAMP))
				THEN 'N'
			
			ELSE NULL						
			END AS On_Time_Delivery_DT_Defect,
			DATETIME_DIFF(DISPATCHED_TS_TZ,AT_PICKUP_TS_TZ, minute) as driver_Wait_time, 
		CASE 
			WHEN CAST(DRIVER_SIGNATURE_TS as Date) = Cast(AT_PICKUP_TS_TZ as Date) AND DRIVER_SIGNATURE_TS>= AT_PICKUP_TS_TZ
				THEN round(DATETIME_DIFF(DRIVER_SIGNATURE_TS, AT_PICKUP_TS_TZ, SECOND)/60,2) end AS DRVR_WAIT_TM_NEW_WITH_SIGN_TS,
		CASE 
			when Cast(DRIVER_SIGNATURE_TS as Date) = Cast(AT_PICKUP_TS_TZ as Date) AND DRIVER_SIGNATURE_TS>= AT_PICKUP_TS_TZ
				THEN round(DATETIME_DIFF(DRIVER_SIGNATURE_TS, AT_PICKUP_TS_TZ, SECOND)/60,2) end AS Dwell_Time,
	    CASE 
			when Cast(DISPATCHED_TS_TZ as Date) = Cast(AT_PICKUP_TS_TZ as Date) AND DISPATCHED_TS_TZ>= AT_PICKUP_TS_TZ
				THEN round(DATETIME_DIFF(DISPATCHED_TS_TZ, AT_PICKUP_TS_TZ, SECOND)/60,2) end AS Pavement_time,
		CASE 
			when Cast(DISPATCHED_TS_TZ as Date) = Cast(DRIVER_SIGNATURE_TS as Date) AND DISPATCHED_TS_TZ>= DRIVER_SIGNATURE_TS
				THEN round(DATETIME_DIFF(DISPATCHED_TS_TZ, DRIVER_SIGNATURE_TS, SECOND)/60,2) end AS Driver_lag_Time,
		    DATETIME_DIFF(AT_PICKUP_TS_TZ,CAR_REQ_TS_TZ, MINUTE) AS DRVR_ARRIVAL_MINUTES, 
		
		-- ticket 692 
		CASE		
			WHEN SVC_ID in (19) AND FMT_TYPE IN (6,7,8,9,11,14) and ACTL_EPOS_CMPL_LCL_TS IS NOT NULL THEN
				CASE
					WHEN FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(ACTL_EPOS_CMPL_LCL_TS AS TIMESTAMP)) > FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(pick_due_lcl_ts AS TIMESTAMP)) THEN 0
					ELSE 1
					END
			WHEN SVC_ID in (19) AND FMT_TYPE IN (6,7,8,9,11,14) and ACTL_EPOS_CMPL_LCL_TS IS NULL THEN NULL
			WHEN (SVC_ID IN (31) OR FMT_TYPE IN (1,15)) AND PICK_COMPLETE_LCL_TS IS NOT NULL AND FULFMT_CNCLD_IND <> 1 THEN
				CASE
					WHEN FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(PICK_COMPLETE_LCL_TS AS TIMESTAMP)) > FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(pick_due_lcl_ts AS TIMESTAMP)) THEN 0
					ELSE 1
					END
			WHEN (SVC_ID IN (31) OR FMT_TYPE IN (1,15)) AND PICK_COMPLETE_LCL_TS IS NULL THEN NULL
			ELSE 1
			END as OTP_FLAG	,
			
		CASE		
			WHEN SVC_ID in (19) AND FMT_TYPE IN (6,7,8,9,11,14) and ACTL_EPOS_CMPL_LCL_TS IS NOT NULL THEN
				CASE
					WHEN FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(ACTL_EPOS_CMPL_LCL_TS AS TIMESTAMP)) > FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(pick_due_lcl_ts AS TIMESTAMP)) THEN 0
					ELSE 1
					END
			WHEN SVC_ID in (19) AND FMT_TYPE IN (6,7,8,9,11,14) and ACTL_EPOS_CMPL_LCL_TS IS NULL THEN NULL
			WHEN (SVC_ID IN (31) OR FMT_TYPE IN (1,15)) AND PICK_COMPLETE_LCL_TS IS NOT NULL AND FULFMT_CNCLD_IND <> 1 THEN
				CASE
					WHEN FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(PICK_COMPLETE_LCL_TS AS TIMESTAMP)) > FORMAT_TIMESTAMP('%Y-%m-%d %H:%M',CAST(pick_due_lcl_ts AS TIMESTAMP)) THEN 0
					ELSE 1
					END
			WHEN (SVC_ID IN (31) OR FMT_TYPE IN (1,15)) AND PICK_COMPLETE_LCL_TS IS NULL THEN NULL
			ELSE 1
			END as OTP_GIF_FLAG,
		
		case when AT_DROPOFF_TS_TZ is null and AT_PICKUP_TS_TZ is null and UPPER(STS_DESC) = 'SHIPPED' and GIF_Delivered_TS is not null then 1 else 0 end as Converted_to_pickup_ind,
		case 
			when DATETIME_ADD(Slot_From_TS, INTERVAL 15 MINUTE) >= DATETIME_ADD(CAR_REQ_TS_TZ, INTERVAL 20 MINUTE) 
				then DATETIME_ADD(Slot_From_TS, INTERVAL 15 MINUTE)
			else DATETIME_ADD(CAR_REQ_TS_TZ , INTERVAL 20 MINUTE) end as expected_arrival_time,
		DATETIME_DIFF(CAR_REQ_TS_TZ,FIRST_OFFER_PUBLISH_TS_TZ, MINUTE) AS DRIVER_SEARCH_TIME,
		DATETIME_DIFF(ENR_PICKUP_TS_TZ,CAR_REQ_TS_TZ,MINUTE) AS DRIVER_ARRIVAL_GAP,		
		DATETIME_DIFF(AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ, MINUTE) AS DRIVER_TIME_TO_STORE,
		DATETIME_DIFF(AT_PICKUP_TS_TZ, FIRST_OFFER_PUBLISH_TS_TZ, MINUTE) AS DRIVER_PRE_ARRIVAL_TIME,
		DATETIME_DIFF(COALESCE(CARRIER_DLVR_TS_TZ,RETURNED_TS_TZ), FIRST_OFFER_PUBLISH_TS_TZ, MINUTE) AS DRIVER_DELIVERED_TIME,
		CASE WHEN ENR_DROPOFF_TS_TZ < CARRIER_DLVR_TS_TZ THEN DATETIME_DIFF(CARRIER_DLVR_TS_TZ,ENR_DROPOFF_TS_TZ, MINUTE) END AS DELIVERY_DRIVING_TIME
	FROM
		(
		SELECT 
			CRR.SALES_ORDER_NUM, 
			CRR.po_num, 
			SOL.OG_MKT_NM
			,COALESCE(CAST(CRR.ORDER_PCKUP_PNT_ID AS INT64), CAST(SOL.STORE_ID AS INT64) ) AS Store_id
			,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN SOL.SLOT_START_TS ELSE DATETIME(SOL.SLOT_START_TS_UTC,OBU.ORG_TM_ZONE) END AS Slot_From_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN SOL.SLOT_END_TS ELSE DATETIME(SOL.SLOT_END_TS_UTC,OBU.ORG_TM_ZONE) END AS Slot_To_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN DRP.dropped_time_gmt ELSE DATETIME(DRP.dropped_time_gmt_UTC,OBU.ORG_TM_ZONE) END ORDER_DROP_TS
			,CASE 
				WHEN EXTRACT(HOUR FROM 
									CASE WHEN OBU.ORG_TM_ZONE='MST' THEN DRP.dropped_time_gmt ELSE DATETIME(DRP.dropped_time_gmt_UTC,OBU.ORG_TM_ZONE) END) >=16 
				THEN 1 ELSE 0 END AS Dropped_after_hours
			,SOL.FMT_TYPE 
			,SOL.DT_TYPE
			, CASE WHEN DATE(SOL.ORDER_PLACED_TS) BETWEEN '2022-09-15' AND '2022-12-31'
						THEN COALESCE(AE_NEW.AE_IND,0)
					WHEN DATE(SOL.ORDER_PLACED_TS) >= '2023-09-01' -- UPDATED LOGIC USING MAXIMO SHARED CODE
						THEN COALESCE(AE_2023.AE_IND,0)
						ELSE (CASE WHEN CRR.LMD_AE_IND = 1 THEN 1 ELSE SOL.AE_IND END)
						END AS AE_IND
			, CASE WHEN DATE(SOL.ORDER_PLACED_TS) BETWEEN '2022-09-15' AND '2022-12-31'
						THEN AE_NEW.promise_date
					WHEN DATE(SOL.ORDER_PLACED_TS) >= '2023-09-01'
						THEN AE_2023.PROMISE_DT END AS promise_date
			,SOL.SVC_ID
			,d.Spark_ZONE
			,d.CBSA AS CBSA_SPARK
			,CRR.Order_Size		-- added Order_Size column
			,CRR.CARRIER_ORG_NM 
			,CRR.first_assgn_carrier_nm 
			,CRR.TRIP_ID 
			,CRR.DRVR_USER_ID
			,CRR.ALCOHOL_IND
			,CRR.PLANNED_MILES
			,CRR.DRVR_TO_STORE_DIST_MILES
			,CRR.PKG_WT_QTY_LBS
			,CRR.DLVR_PKG_VOL_QTY_CFT
			,CRR.Quantity
			,CRR.TRIP_CHNG_CNT
			,CRR.TRIP_CHNG_IND 
			,CRR.CLNT_PCKUP_FROM_NM
			,CRR.DLVR_PRIORITY_NM,
			CRR.DLVR_CLNT_ID
			,CRR.FULFMT_TYPE_CD
			,CRR.ORDER_SVC_TYPE_NM
			,CRR.OVERSIZED_ITEM_IND
			,CRR.REC_SRC			
			,CASE WHEN CRR.REC_SRC = 'DAAS' THEN CRR.CLNT_PCKUP_FROM_NM ELSE 'Walmart' END AS CLIENT	
			,CRR.PICKER_TYPE_NM	
			,crr.NUDGE_IND
			,crr.AUTO_REBOOK_IND
			,crr.TRIP_PLAND_DUR_SEC_QTY
			,CRR.COLCHAIN_VIOLATION_IND	
			,CRR.COLD_CHAIN_VIOLATION
			,CRR.COLD_CHAIN_ITEM_IND
			,CRR.ADR_Ind_trip 
			,LEFT(CRR.CUST_ZIP5, 5) AS CUST_ZIP5 --vn52vg0
			,SHOPPER_PICK_PAYMENT
			--shopper dynamic pay components
			,SHOPPER_BLANK_BONUS_AMT
			,SHOPPER_ENTRY_FEE_AMT
			,SHOPPER_UNITS_AMT
			,SHOPPER_EXIT_FEE_AMT
			,SHOPPER_TRIP_CAPPING_AMT
			,SHOPPER_ITEMS_AMT
			-- ml base price
			,ML_BASE_PRICE_AMT  
			,ML_BASE_PRICE_CAPPING_AMT
			,ML_BASE_ADJUSTMENT  --vn53vov
			,SHOPPER_EXPRESS
			,EASY_RTNS_PARTIAL_AMT
			,EASY_RTNS_AMT
			,ESTIMATED_DISTANCE_AMT 
			,DELIVERED_EXTRA_AMT
			,SURGE_PRICE_AMT 
			,WAIT_TIME_AMT
			,RETURNED_AMT 
			,BLANK_BONUS_AMT 
			,ARRIVED_AT_STORE_AMT 
			,BASE_PRICE_CAPPING_AMT 
			,DELIVERED_OR_ATTEMPTED_AMT 
			,ORDER_SIZE_AMT 
			,CRR.EXTRA_HEAVY_ORDER_AMT
			,CRR.HEAVY_ORDER_AMT
			,CRR.APARTMENT_PYMT_AMT
			,CRR.CANCELLATION_FEE
			,CRR.EST_SCHED_DRIVE_TIME_FEE_LMT
			,CRR.EST_UNSCHED_DRIVE_TIME_FEE_LMT
			,CRR.EST_UNSCHED_BILLABLE_WEIGHT_FEE
			,CRR.EST_SCHED_BILLABLE_WEIGHT_FEE 
			,CRR.EST_AE_BILLABLE_WEIGHT_FEE
			,CRR.CHAINING_COMPLEXITY_FEE
			,MARKET_FACTOR_AMT
			,SH.STS_DESC
			,PCK_DUE.PICK_COMPLETE_LCL_TS
			,PCK_DUE.ORDER_PICK_DUE_LCL_TS AS pick_due_lcl_ts
			,PCK_DUE.FULFMT_CNCLD_IND
			,EPOS_ACTL.ACTL_EPOS_CMPL_LCL_TS
			,COALESCE(EPOS_ACTL.PICK_START_LCL_TS,PS.PICK_START_TS) AS PICK_START_LCL_TS      --vn53vov
			,EPOS_ACTL.PICK_END_LCL_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN SH.ACTL_EPOS_CMPL_TS ELSE DATETIME(SH.ACTL_EPOS_CMPL_TS_UTC,OBU.ORG_TM_ZONE) END ORDER_READY_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN SOL.ACTL_SHPMNT_TS ELSE DATETIME(SOL.ACTL_SHPMNT_TS_UTC,OBU.ORG_TM_ZONE) END AS GIF_Delivered_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN SOL.ORDER_PLACED_TS ELSE DATETIME(SOL.ORDER_PLACED_TS_UTC,OBU.ORG_TM_ZONE) END AS ORDER_PLACED_TS
			,SH.GIF_PICK_DUE_TS
	------  
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.FIRST_OFFER_PUBLISH_TS ELSE DATETIME(CRR.FIRST_OFFER_PUBLISH_TS_UTC,OBU.ORG_TM_ZONE)  END AS FIRST_OFFER_PUBLISH_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.CAR_REQ_TS ELSE DATETIME(CRR.CAR_REQ_TS_UTC,OBU.ORG_TM_ZONE)  END AS CAR_REQ_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.PKG_RCPT_OR_PIN_DRVR_TS ELSE DATETIME(CRR.PKG_RCPT_OR_PIN_DRVR_TS_UTC,OBU.ORG_TM_ZONE)  END AS DRIVER_PIN_OR_SIGNATURE_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.PKG_RCPT_DRVR_TS ELSE DATETIME(CRR.PKG_RCPT_DRVR_TS_UTC,OBU.ORG_TM_ZONE)  END AS DRIVER_SIGNATURE_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_PICKUP_TS ELSE DATETIME(CRR.ENR_PICKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_PICKUP_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.AT_PICKUP_TS ELSE DATETIME(CRR.AT_PICKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS AT_PICKUP_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.LOADED_TS ELSE DATETIME(CRR.LOADED_TS_UTC,OBU.ORG_TM_ZONE)  END AS LOADED_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_DROPOFF_TS ELSE DATETIME(CRR.ENR_DROPOFF_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_DROPOFF_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.TRIP_CREATED_TS ELSE DATETIME(CRR.TRIP_CREATED_TS_UTC,OBU.ORG_TM_ZONE)  END AS TRIP_CREATED_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.AT_DROPOFF_TS ELSE DATETIME(CRR.AT_DROPOFF_TS_UTC,OBU.ORG_TM_ZONE)  END AS AT_DROPOFF_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_TS ELSE DATETIME(CRR.DLVR_TS_UTC,OBU.ORG_TM_ZONE)  END AS CARRIER_DLVR_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_RETURN_TS ELSE DATETIME(CRR.ENR_RETURN_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_RETURN_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.RETURNED_TS ELSE DATETIME(CRR.RETURNED_TS_UTC,OBU.ORG_TM_ZONE)  END AS RETURNED_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DISPATCHED_TS ELSE DATETIME(CRR.DISPATCHED_TS_UTC,OBU.ORG_TM_ZONE)  END AS DISPATCHED_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.OLD_PKG_RCPT_DRVR_TS ELSE DATETIME(CRR.OLD_PKG_RCPT_DRVR_TS_UTC,OBU.ORG_TM_ZONE)  END AS OLD_DRIVER_SIGNATURE_TS
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_SLOT_START_TS ELSE DATETIME(CRR.DLVR_SLOT_START_TS_UTC,OBU.ORG_TM_ZONE)  END AS DLVR_SLOT_START_TS_TZ		
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_SLOT_END_TS ELSE DATETIME(CRR.DLVR_SLOT_END_TS_UTC,OBU.ORG_TM_ZONE)  END AS DLVR_SLOT_END_TS_TZ
			--added LATE_DLVR_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.LATE_DLVR_TS ELSE DATETIME(CRR.LATE_DLVR_TS_UTC,OBU.ORG_TM_ZONE)  END AS LATE_DLVR_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ERLY_DLVR_TS ELSE DATETIME(CRR.ERLY_DLVR_TS_UTC,OBU.ORG_TM_ZONE) END AS ERLY_DLVR_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.COLCHAIN_VIOLATION_TS ELSE DATETIME(CRR.COLCHAIN_VIOLATION_TS_UTC,OBU.ORG_TM_ZONE)  END AS COLCHAIN_VIOLATION_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.NUDGE_TS ELSE DATETIME(CRR.NUDGE_TS_UTC,OBU.ORG_TM_ZONE)  END AS NUDGE_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.AUTO_REBOOK_TS ELSE DATETIME(CRR.AUTO_REBOOK_TS_UTC,OBU.ORG_TM_ZONE)  END AS AUTO_REBOOK_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.PCKUP_TS ELSE DATETIME(CRR.PCKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS PCKUP_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.CANCL_REQ_TS ELSE DATETIME(CRR.CANCL_REQ_TS_UTC,OBU.ORG_TM_ZONE)  END AS CANCL_REQ_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DRIVER_CANCELLED_TS ELSE DATETIME(CRR.DRIVER_CANCELLED_TS_UTC,OBU.ORG_TM_ZONE)  END AS DRIVER_CANCELLED_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DRIVER_DROPPED_TS ELSE DATETIME(CRR.DRIVER_DROPPED_TS_UTC,OBU.ORG_TM_ZONE)  END AS DRIVER_DROPPED_TS_TZ
			--ADDED ORDER_CREATED_TS_TZ
			,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.ORDER_CREATED_TS ELSE DATETIME(CRR.ORDER_CREATED_TS_UTC,OBU.ORG_TM_ZONE)  END AS ORDER_CREATED_TS_TZ 		
			,OBU.REGION,
				--ADDING A NEW COLUMN FOR GETTING ALL DCSAT NPS VALUES while joining on SRC RSPNS ID AFTER FEB 15
			CASE WHEN SPSL.SRC_CRE_DT < '2022-02-15' THEN CRR.PO_NUM ELSE CONCAT(CRR.PO_NUM,' ',SPSL.SHPMNT_num ) END AS PO_SHIP_COL,
			FMT360.customer_sla,
			RTN360.CUSTOMER_SLA_RETURN
		FROM LMD_DA.CARRIER_DLVR_TRKSTS_V2 CRR
		LEFT JOIN LMD_DA.VOL_SALES_ORDER_LINE_V2 SOL 
			ON CRR.SALES_ORDER_NUM = SOL.SALES_ORDER_NUM
			AND CRR.PO_NUM = SOL.PO_NUM
		INNER JOIN 
			(SELECT DISTINCT STORE_ID, SPARK_ZONE, CBSA
			FROM
				(SELECT STORE_ID, SPARK_ZONE, CBSA FROM `LMD_DA.SPARK_ZONE_NEW` 
				UNION ALL
				SELECT STORE_ID, SPARK_ZONE, CBSA FROM LMD_DA.SPARK_ZONE_DAAS
				) Z
			GROUP BY 1,2,3
			) d 
			ON COALESCE(CAST(CRR.ORDER_PCKUP_PNT_ID AS STRING), CAST(SOL.STORE_ID AS STRING) ) = CAST(d.STORE_ID AS STRING)
		LEFT JOIN LMD_DA.ORDER_PO_DROP_TIME_V2 DRP
			ON SOL.SALES_ORDER_NUM = DRP.SALES_ORDER_NUM
			AND SOL.PO_NUM = DRP.PO_NUM
		LEFT JOIN LMD_DA.SHPMNT_STATUS SH
			ON SOL.SALES_ORDER_NUM = SH.SALES_ORDER_NUM
			AND SOL.PO_NUM = SH.PO_NUM
		LEFT JOIN
			(SELECT 
			    ORG_CD  
			   ,WM_DSTRBTR_NO
			   ,OG_MKT_ID
			   ,CASE
      			    WHEN ORG_TM_ZONE ='MDT' THEN 'US/Mountain'
			        WHEN ORG_TM_ZONE ='MST' THEN 'MST'
					WHEN ORG_TM_ZONE ='PDT' THEN 'US/Pacific'
					WHEN ORG_TM_ZONE ='PST' THEN 'US/Pacific'
					WHEN ORG_TM_ZONE ='EST' THEN 'US/Eastern'
					WHEN ORG_TM_ZONE ='EDT' THEN 'US/Eastern'
					WHEN ORG_TM_ZONE ='CST' THEN 'US/Central'
					WHEN ORG_TM_ZONE ='CDT' THEN 'US/Central'
					WHEN ORG_TM_ZONE ='AKD' THEN 'US/Alaska'
					WHEN ORG_TM_ZONE ='AKS' THEN 'US/Alaska'
					WHEN ORG_TM_ZONE IN ('HAS','HST') THEN 'US/Aleutian'
					ELSE 'US/Pacific'   
			        END AS ORG_TM_ZONE
				,REGION
			FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_SHIP_NODE`
			WHERE ORG_TM_ZONE IS NOT NULL  AND PUT_IND IS NOT NULL
			) OBU 
			ON COALESCE(CAST(CRR.ORDER_PCKUP_PNT_ID AS STRING), CAST(SOL.STORE_ID AS STRING) ) = CAST(OBU.WM_DSTRBTR_NO AS STRING)
		LEFT JOIN (SELECT SALES_ORDER_NUM, PO_NUM, TRIP_ID, promise_date,
                     event_period,
					1 as AE_IND,
					DATE(SRC_CRE_TS) date_created
                    FROM `wmt-tebi.ANNUAL_EVENTS.HOURLY_FINAL`
					WHERE DATE(SRC_CRE_TS) >= '2022-09-15'
              GROUP BY 1,2,3,4,5,6,7) AE_NEW
      ON CRR.SALES_ORDER_NUM = AE_NEW.SALES_ORDER_NUM
      AND CRR.PO_NUM = AE_NEW.PO_NUM
      AND CRR.TRIP_ID = AE_NEW.TRIP_ID
	  LEFT JOIN (
				select 
					distinct PO.SALESORDERNUMBER, PO.ponumber, 1 as AE_IND, min(SOC.ORIGCUSTOMEREDDSTRTINDESTTZ) PROMISE_DT
				 FROM
					`wmt-gdap-sc-ods-prod.US_SUPPLY_CHAIN_ODS_VM.ODS_PURCHASE_ORDER_CUBE` PO
				left join 
				(
						SELECT 
							SOC.SALESORDERNUMBER,
							SOC.SALESORDERLINE,			
							SOC.ORIGCUSTOMEREDDSTRTINDESTTZ,
							SOC.ORDERPLACEDDT
						FROM `wmt-gdap-sc-ods-prod.US_SUPPLY_CHAIN_ODS_VM.ODS_SALES_ORDER_CUBE` SOC
						WHERE ORDERPLACEDDT >= Date_add(DATE1,Interval -20 day)
					) SOC ON SOC.SALESORDERNUMBER = PO.SALESORDERNUMBER AND PO.POLINE = SOC.SALESORDERLINE
				where
					po.accessmode = 'LAST_MILE_CARRIER'
					AND po.accesstype = 'DELIVERY_SPECIAL_EVENT'
				GROUP BY 1,2,3
				) AE_2023 -- ADDED LOGIC USING MAXIMO SHARED CODE -2023.11.07
			ON AE_2023.SALESORDERNUMBER = CRR.SALES_ORDER_NUM AND CRR.PO_NUM=AE_2023.ponumber
	--TO ADD A NEW COLUMN PO_SHIP_COL
		LEFT JOIN 
			(SELECT DISTINCT SALES_ORDER_NUM,PO_NUM, SHPMNT_num,SRC_CRE_DT FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_SHPMNT_LINE`
			WHERE DATE(SRC_CRE_TS) between date_add(current_date("US/Pacific"),interval -40 day) and current_date("US/Pacific")
			)SPSL
			ON CRR.SALES_ORDER_NUM = SPSL.SALES_ORDER_NUM AND  CRR.PO_NUM =SPSL.PO_NUM
	 -- TO get Customer sla in On Time Delivery DT Defect, used in defect rate column 
		LEFT JOIN 
			(SELECT SALES_ORDER_NUM,PO_NUM,MAX(EXTRACT(DATE FROM ORIG_EXPC_DLVR_TS_UTC)-1)  AS CUSTOMER_SLA
			FROM wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.FULFMT_360
			WHERE SALES_ORDER_NUM IS NOT NULL AND PO_NUM IS NOT NULL 
			 AND EXTRACT(DATE FROM ORIG_EXPC_DLVR_TS_UTC) >= DATE1
			--AND EXTRACT(DATE FROM ORIG_EXPC_DLVR_TS_UTC) between date_add(current_date("US/Pacific"),interval -40 day)and current_date("US/Pacific")
			GROUP BY 1,2
			) FMT360
			ON CRR.SALES_ORDER_NUM = FMT360.SALES_ORDER_NUM AND  CRR.PO_NUM =FMT360.PO_NUM
	--TO get Customer sla in On Time Delivery DT Defect, used in defect rate column 
		LEFT JOIN 
			(SELECT SALES_ORDER_NUM,MAX(EXTRACT(DATE FROM ORIG_EXPC_DLVR_TS_UTC)-1)  AS CUSTOMER_SLA_RETURN
			FROM `wmt-edw-prod.WW_RTN_DL_VM.RTN_360_DTL`
			WHERE SALES_ORDER_NUM IS NOT NULL 
			AND EXTRACT(DATE FROM ORIG_EXPC_DLVR_TS_UTC) >= '2022-06-01'
			GROUP BY 1
			) RTN360
			ON CRR.SALES_ORDER_NUM = RTN360.SALES_ORDER_NUM 
		
		-- OTP LOGIC INTERGATION START ticket 692
		LEFT JOIN 
			(SELECT 
				DISTINCT 
				SALES_ORDER_NUM,
				PO_NUM,
				ORDER_PICK_DUE_LCL_TS,
				PICK_COMPLETE_LCL_TS,
				FULFMT_CNCLD_IND
			FROM LMD_DA.OUTBOUND_BI_BASED_OTP_DATA      
			) AS PCK_DUE
			ON CRR.SALES_ORDER_NUM = PCK_DUE.SALES_ORDER_NUM 
			AND COALESCE(CRR.PO_NUM,'0') = COALESCE(PCK_DUE.PO_NUM,'0')
			
		LEFT JOIN 
			(SELECT 
				SALES_ORDER_NUM, 
				PO_NUM, 
				MAX(ACTL_EPOS_CMPL_LCL_TS) AS ACTL_EPOS_CMPL_LCL_TS
	--Adding 2 Shopper timestamps vn53vov
			,MIN(ITEM_ACTL_PICK_LCL_TS) AS PICK_START_LCL_TS
			,MAX(ITEM_ACTL_PICK_LCL_TS) AS PICK_END_LCL_TS
			FROM `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER_ITEM_360` 
			WHERE ACTL_EPOS_CMPL_LCL_TS  IS NOT NULL AND EXTRACT(DATE FROM ACTL_EPOS_CMPL_LCL_TS) between DATE1 and current_date("US/Pacific")  --TWO_MONTHS
			AND SALES_ORDER_NUM IS NOT NULL
			GROUP BY 1,2 ORDER BY 1, 2
			) AS EPOS_ACTL
			ON CRR.SALES_ORDER_NUM = EPOS_ACTL.SALES_ORDER_NUM 
			AND COALESCE(CRR.PO_NUM,'0') = COALESCE(EPOS_ACTL.PO_NUM,'0')
		-- OTP LOGIC INTEGRATION END 
		LEFT JOIN (
			select TRIP_ID, SALES_ORDER_NBR,PO_NBR, MIN(PICK_START_TS) PICK_START_TS from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
			WHERE RPT_DT >=DATE1
      group by 1,2,3
			) PS
		ON CRR.TRIP_ID=PS.TRIP_ID AND CRR.SALES_ORDER_NUM=PS.SALES_ORDER_NBR AND COALESCE(CRR.PO_NUM,'-0')=COALESCE(PS.PO_NBR,'-0')

		) A	 
--To consider only the oversized delivered by spark
	WHERE (OVERSIZED_ITEM_IND = 0 OR OVERSIZED_ITEM_IND IS NULL OR (OVERSIZED_ITEM_IND = 1) )-- AND UPPER(CARRIER_ORG_NM) = 'SPARK'))
--To exclude sample data
	AND UPPER(LEFT(CLIENT,4)) NOT IN ('FAKE','SIVA', 'CLUB')
	)B
--Changed to left join to include new stores which are not added to JIE table yet
	INNER JOIN 
		(SELECT * FROM
			(SELECT CAST(STORE_ID AS STRING) AS STORE_ID, START_DATE , 
				CASE WHEN END_DATE = '1999-01-01' THEN '9999-01-01' ELSE END_DATE END AS END_DATE,
				CBSA, DELIVERY_PROVIDER, DOM, CITY FROM LMD_DA.JIE_STORE_CARRIER_NEW
			WHERE UPPER(DELIVERY_PROVIDER) LIKE '%SPARK%'
			UNION ALL
			SELECT CAST(STORE_ID AS STRING) AS STORE_ID, START_DATE , 
				CASE WHEN END_DATE = '1999-01-01' THEN '9999-01-01' ELSE END_DATE END AS END_DATE, 
				CBSA, DELIVERY_PROVIDER, DOM, CITY FROM LMD_DA.JIE_STORE_CARRIER1_DAAS
			)Y
		GROUP BY 1,2,3,4,5,6,7
	  ) c 
		ON CAST(B.STORE_ID AS STRING) = CAST(c.STORE_ID AS STRING)
		AND B.Slot_DT >= c.START_DATE 
		AND B.Slot_DT <= c.END_DATE
	INNER JOIN LMD_DA.WMT_WEEK RDT 
		ON  B.Slot_DT = RDT.CAL_DT
	LEFT JOIN (select store_nbr, max(CITY_NM) CITY_NM , max(ST_CD) ST_CD, MAX(TENANT_NM) AS CLIENT_NM from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST` where CURR_IND =1 group by 1 )S
		ON CAST(B.STORE_ID AS STRING) = CAST(S.store_nbr AS STRING)
	 
);


--CANCELLATION REASONS

CREATE OR REPLACE TABLE
  `LMD_DA.SPARK_LMD_DRIVER_Cancellation_rsn` AS (
  SELECT DISTINCT A.SALES_ORDER_NUM,
  A.TRIP_ID,
  CASE WHEN UPPER(STS_DESC)='CANCELLED' 
        THEN CASE WHEN CNCL_RSN_DESC IS NULL OR CNCL_RSN_DESC IN ('', 'Delivery Order Returned', 'Missing Item', 
                'No Sale window', 'Simply changed mind','Pickup Expired', 'Wrong item') 
                THEN 'OMS Reason LMD related'
                ELSE'OMS Reason not LMD related' END
        ELSE 'Not Cancelled'
    END AS Cancel_Category,
  CASE WHEN UPPER(STS_DESC)='CANCELLED' THEN -- case1
    CASE WHEN CNCL_RSN_DESC IS NULL
    OR CNCL_RSN_DESC IN ('', 'Delivery Order Returned', 'Missing Item', 'No Sale window', 'Simply changed mind',
      'Pickup Expired', 'Wrong item') THEN --Case 1A
    CASE WHEN CAR_REQ_TS_TZ IS NOT NULL THEN -- case2
    CASE WHEN coalesce(ADR_IND_TRIP,0) = 0 THEN -- Case3
    CASE WHEN COLCHAIN_VIOLATION_IND=1 THEN -- Case4
    CASE WHEN COALESCE(FMT_TYPE,0)<>9 THEN --Case5
    'Case1: Standard Delivery, coldchain violation - driver did not deliver on time'
      WHEN FMT_TYPE=9 THEN 
    CASE WHEN ORDER_READY_TS IS NOT NULL THEN --Case7
    CASE WHEN AT_PICKUP_TS_TZ IS NOT NULL AND DATETIME_DIFF(COLCHAIN_VIOLATION_TS_TZ, AT_PICKUP_TS_TZ, SECOND)/60 > 20 THEN --Case8
    CASE WHEN DISPATCHED_TS_TZ IS NULL 
		OR (CASE WHEN DISPATCHED_TS_TZ IS NOT NULL AND COLCHAIN_VIOLATION_TS_TZ IS NOT NULL 
			THEN DATETIME_DIFF(COLCHAIN_VIOLATION_TS_TZ, DISPATCHED_TS_TZ, SECOND)/60 END)<20 
	THEN --Case9
    'Exclude: Express Coldchain, not dispatched on time '
    ELSE 'Case3: Express Coldchain, Driver could not deliver on time'
       END -- Case9
    ELSE 'Case2: Express Coldchain, Driver Late or did not arrive'
  END --Case8
    ELSE 'Exclude: Express Coldchain, Order not ready'
  END --Case7
    ELSE 'Explore: Invalid fulfilment type'
  END --Case5
      WHEN (COLCHAIN_VIOLATION_IND=0 OR COLCHAIN_VIOLATION_IND IS NULL) THEN CASE
      WHEN order_delivered_flag=0 THEN --Case10
    CASE WHEN RETURNED_TS_TZ IS NULL THEN --Case11
    CASE WHEN coalesce(Converted_to_pickup_ind,0) = 0 THEN --Case12
    CASE WHEN ORDER_READY_TS IS NOT NULL THEN -- Case13
    CASE WHEN AT_PICKUP_TS_TZ IS NULL THEN --Case14
    'Case4: No Driver'
    ELSE
    CASE WHEN (CASE WHEN AT_PICKUP_TS_TZ IS NOT NULL THEN DATETIME_DIFF(AT_PICKUP_TS_TZ, Slot_From_TS, SECOND)/60 END) > 45 --Case15
              THEN 'Case5: Driver Late'
      WHEN (CASE WHEN AT_PICKUP_TS_TZ IS NOT NULL THEN DATETIME_DIFF(AT_PICKUP_TS_TZ, Slot_From_TS, SECOND)/60 END) < -15 THEN
    CASE WHEN DRIVER_CANCELLED_TS_TZ IS NOT NULL AND DRIVER_CANCELLED_TS_TZ <= Slot_From_TS --Case16
    THEN 'Case6: Driver Cancelled before slot'
    ELSE 'Exclude: Driver arrived on time and waited till slot start'
  END --Case16
      WHEN (CASE WHEN AT_PICKUP_TS_TZ IS NOT NULL THEN DATETIME_DIFF(AT_PICKUP_TS_TZ, Slot_From_TS, SECOND)/60 END) BETWEEN -15 AND 45 THEN CASE
      WHEN DISPATCHED_TS_TZ IS NULL 
	  OR (CASE WHEN DISPATCHED_TS_TZ IS NOT NULL AND AT_PICKUP_TS_TZ IS NOT NULL THEN DATETIME_DIFF(DISPATCHED_TS_TZ, AT_PICKUP_TS_TZ, SECOND)/60 END) IS NULL 
	  OR (CASE WHEN DISPATCHED_TS_TZ IS NOT NULL AND AT_PICKUP_TS_TZ IS NOT NULL THEN DATETIME_DIFF(DISPATCHED_TS_TZ, AT_PICKUP_TS_TZ, SECOND)/60 END) >= 15 --Case17
    THEN 'Exclude: Did not dispatch or Dispatched Late'
    --else  case when Enroute_To_Return_TS is not null  --Case18
    --            then 'Case7: Enroute to return available, no return timestamp'
    ELSE
    'Case8: Order dispatched, but no delivery or return timestamps'
    --            end -- Case18
  END --Case17
    ELSE 'Explore: there should not be such case'
  END --Case15
  END --Case14
    ELSE 'Exclude: Order not ready'
  END --Case13
    ELSE 'Exclude: Converted to Pickup'
  END --Case12
    ELSE 'Exclude: Order Returned'
  END --Case11
    ELSE 'Exclude: Order Delivered'
  END --Case10
    ELSE 'Explore: Invalid coldchain ind'
  END --Case4
    ELSE 'Exclude2: ADR Cancellation'
  END -- Case3
    ELSE 'Exclude1: Did not request Carrier'
  END -- case2
    ELSE CNCL_RSN_DESC
  END -- Case1A
    ELSE 'Not Cancelled'
  END -- case1
  as Cancel_sub_Category
  FROM LMD_DA.TRIP_PO_LIST A
  LEFT JOIN (
    SELECT
      DISTINCT Order_ts.SALES_ORDER_NUM,
      cncl.CNCL_RSN_DESC,
      --RSN_DESC
    FROM
      `LMD_DA.TRIP_PO_LIST` Order_ts
    LEFT JOIN (
      SELECT
        DISTINCT a.sales_order_num,
        a.cncl_rsn_cd,
        a.CNCL_RSN_DESC

      FROM
        `wmt-edw-prod.WW_MB_DL_VM.SALES_ORDER_CNCL_DTL` a
      WHERE
        cncl_RSN_CD IN ('1', '7', '63', '130', '140', '141', '142', '143', '144', '145',
'151', '153', '154', '155', '156', '157', '158', '160', '161', '170',
'171', '179', '180', '181', '191', '192', '193', '195', '196', '197',
'200', '201', '203', '204', '205', '206',  '251', '252', '253', '254',
                    '255', '256', '257', '258', '518', '820', '831', '1010','1020', '1030', 
'1040', '1060', '1070', '1100', '1110', '1120') ) cncl


    ON Order_ts.SALES_ORDER_NUM = cncl.sales_order_num
    WHERE
      UPPER(Order_ts.STS_DESC) = 'CANCELLED'
      --AND Order_ts.slot_dt >= '2021-01-30'
	  AND Order_ts.slot_dt between DATE3 and current_date("US/Pacific") --TWO_MONTHS
      ) b
  ON a.SALES_ORDER_NUM=b.SALES_ORDER_NUM
  LEFT JOIN (
    SELECT Order_ts.SALES_ORDER_NUM,
      max (CASE WHEN CARRIER_DLVR_TS_TZ IS NOT NULL THEN 1 ELSE 0 END) AS order_delivered_flag,
      max (CASE WHEN RETURNED_TS_TZ IS NOT NULL THEN 1 ELSE 0 END) AS order_returned_flag
    FROM
      `LMD_DA.TRIP_PO_LIST` Order_ts
    WHERE
      UPPER(Order_ts.STS_DESC) = 'CANCELLED'
      --AND Order_ts.slot_dt >= '2021-01-30'
	  AND Order_ts.slot_dt between DATE3 and current_date("US/Pacific") --TWO_MONTHS
    GROUP BY SALES_ORDER_NUM ) c
  ON a.SALES_ORDER_NUM=c.SALES_ORDER_NUM);
  

--Payment metrics
--Total paymnet is found at trip id and driver level and 
--equally distributed for all the po numbers

CREATE OR REPLACE TABLE LMD_DA.TRIP_PAYMENT_TEMP AS
(
SELECT A.TRIP_ID,
A.DRVR_USER_ID,
safe_divide(A.BONUS_PAYMENT,TOT_REC) AS BONUS_PAYMENT,
safe_divide(A.ORDER_PAYMENT,TOT_REC) AS ORDER_PAYMENT,
safe_divide(A.PYMT_TRANS_AMT,TOT_REC) AS PYMT_TRANS_AMT
FROM
(
SELECT 
        TRIP_ID
       ,DRVR_USER_ID
       ,SUM(DLVR_FEE_WM_REWARD_AMT) AS BONUS_PAYMENT  
       ,SUM(PYMT_TRANS_AMT - DLVR_FEE_WM_REWARD_AMT) AS ORDER_PAYMENT
       ,SUM(PYMT_TRANS_AMT) AS PYMT_TRANS_AMT
   FROM  `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_DRVR_PYMT`
  WHERE UPPER(PYMT_TRANS_TYPE_CD) IN ('BLOCK_PAYMENT', 'ORDER_PAYMENT') 
  GROUP BY 1,2
)A
INNER JOIN
(SELECT TRIP_ID
       ,DRVR_USER_ID
       , COUNT(distinct sales_order_num||coalesce(po_num,'0')) AS TOT_REC
       FROM LMD_DA.TRIP_PO_LIST
       GROUP BY 1,2
) B
ON A.TRIP_ID = B.TRIP_ID
AND A.DRVR_USER_ID = B.DRVR_USER_ID
);

CREATE OR REPLACE TABLE LMD_DA.CARR_DRVR_TRIP_PYMT AS
(
SELECT TRIP_ID, DRVR_USER_ID,
safe_divide(MAX(ESTIMATED_DISTANCE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as ESTIMATED_DISTANCE_AMT
,safe_divide(MAX(DELIVERED_EXTRA_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as DELIVERED_EXTRA_AMT
,safe_divide(MAX(SURGE_PRICE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SURGE_PRICE_AMT
,safe_divide(MAX(WAIT_TIME_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as WAIT_TIME_AMT
,safe_divide(MAX(RETURNED_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as RETURNED_AMT
,safe_divide(MAX(BLANK_BONUS_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as BLANK_BONUS_AMT
,safe_divide(MAX(ARRIVED_AT_STORE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as ARRIVED_AT_STORE_AMT
,safe_divide(MAX(BASE_PRICE_CAPPING_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as BASE_PRICE_CAPPING_AMT
,safe_divide(MAX(DELIVERED_OR_ATTEMPTED_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as DELIVERED_OR_ATTEMPTED_AMT
,safe_divide(MAX(ORDER_SIZE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as ORDER_SIZE_AMT
,safe_divide(MAX(EXTRA_HEAVY_ORDER_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EXTRA_HEAVY_ORDER_AMT
,safe_divide(MAX(HEAVY_ORDER_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as HEAVY_ORDER_AMT
,safe_divide(MAX(APARTMENT_PYMT_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as APARTMENT_PYMT_AMT
,safe_divide(MAX(ML_BASE_PRICE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as ML_BASE_PRICE_AMT
,safe_divide(MAX(ML_BASE_PRICE_CAPPING_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as ML_BASE_PRICE_CAPPING_AMT
,safe_divide(MAX(ML_BASE_ADJUSTMENT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as ML_BASE_ADJUSTMENT
,safe_divide(MAX(EASY_RTNS_PARTIAL_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EASY_RTNS_PARTIAL_AMT
,safe_divide(MAX(EASY_RTNS_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EASY_RTNS_AMT
,safe_divide(MAX(CANCELLATION_FEE), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as CANCELLATION_FEE
,safe_divide(MAX(EST_SCHED_DRIVE_TIME_FEE_LMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EST_SCHED_DRIVE_TIME_FEE_LMT
,safe_divide(MAX(EST_UNSCHED_DRIVE_TIME_FEE_LMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EST_UNSCHED_DRIVE_TIME_FEE_LMT
,safe_divide(MAX(EST_UNSCHED_BILLABLE_WEIGHT_FEE), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EST_UNSCHED_BILLABLE_WEIGHT_FEE
,safe_divide(MAX(EST_SCHED_BILLABLE_WEIGHT_FEE), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EST_SCHED_BILLABLE_WEIGHT_FEE
,safe_divide(MAX(EST_AE_BILLABLE_WEIGHT_FEE), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as EST_AE_BILLABLE_WEIGHT_FEE
,safe_divide(MAX(CHAINING_COMPLEXITY_FEE), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as CHAINING_COMPLEXITY_FEE
,safe_divide(MAX(MARKET_FACTOR_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as MARKET_FACTOR_AMT
FROM LMD_DA.TRIP_PO_LIST
	   GROUP BY 1,2
);

--separating out shopper payments as a fix for shopper values coming into dotcom fields in payment metrics view
CREATE OR REPLACE TABLE LMD_DA.CARR_DRVR_TRIP_PYMT_SHOPPER AS
(
SELECT TRIP_ID, 
	DRVR_USER_ID, 
	'SHOPPER' AS PICKER_TYPE_NM,
safe_divide(MAX(SHOPPER_PICK_PAYMENT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_PICK_PAYMENT
,safe_divide(MAX(SHOPPER_BLANK_BONUS_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_BLANK_BONUS_AMT
,safe_divide(MAX(SHOPPER_ENTRY_FEE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_ENTRY_FEE_AMT
,safe_divide(MAX(SHOPPER_UNITS_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_UNITS_AMT
,safe_divide(MAX(SHOPPER_EXIT_FEE_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_EXIT_FEE_AMT
,safe_divide(MAX(SHOPPER_TRIP_CAPPING_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_TRIP_CAPPING_AMT
,safe_divide(MAX(SHOPPER_ITEMS_AMT), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_ITEMS_AMT
,safe_divide(MAX(SHOPPER_EXPRESS), COUNT(distinct sales_order_num||coalesce(po_num,'0'))) as SHOPPER_EXPRESS

FROM LMD_DA.TRIP_PO_LIST
WHERE PICKER_TYPE_NM = 'SHOPPER'
GROUP BY 1,2,3
);

--Similar calculation for tips
CREATE OR REPLACE TABLE LMD_DA.TIP_PAYMENT_TEMP AS 
(
 SELECT A.SALES_ORDER_NUM,
 A.DRVR_USER_ID,
 safe_divide(A.TIP_PAYMENT,B.TOT_REC) AS TIP_PAYMENT
 FROM
 (SELECT 
	    SALES_ORDER_NUM AS SALES_ORDER_NUM
       ,DRVR_USER_ID
	   ,SUM(TIP_AMT) AS TIP_PAYMENT
   FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_DRVR_PYMT`
  WHERE UPPER(PYMT_TRANS_TYPE_CD) IN ('TIP_PAYMENT')
  GROUP BY 1,2
) A
INNER JOIN
(SELECT SALES_ORDER_NUM
       ,DRVR_USER_ID
	   , COUNT(DISTINCT COALESCE(PO_NUM,'0')) AS TOT_REC
	   FROM LMD_DA.TRIP_PO_LIST
	   GROUP BY 1,2
) B
ON A.SALES_ORDER_NUM = B.SALES_ORDER_NUM
AND A.DRVR_USER_ID = B.DRVR_USER_ID
);

 ---Other incentives
 --calculated at week level and distributed to all POs
 --- NEW LOGIC


CREATE OR REPLACE TABLE LMD_DA.SPARK_PAYMENT_INCENT_DRVR_WK_V1 AS
(
with prop as													-- Drvr_user_ID + Actual Payment Week + Payment
	(SELECT 
		A.DRVR_USER_ID, WM_WK , 
		SUM( PYMT_TRANS_AMT) PYMT_TRANS_AMT,
		SUM(distinct CASE WHEN E.promo_nm like '%shop%'  --or promo_nm like '%Shop ‘til you drop!%'or promo_nm like '%Prod Testing Shopper Feature%' 
				THEN A.DLVR_FEE_WM_REWARD_AMT - CAST(B.ACTL_INCTV_AMT AS NUMERIC)
				WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%starting to%'
				THEN 0 --acquisition incentive  
				WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%refer%' --and lower(E.PROMO_NM) not like '%test%'
				THEN 0  -- referral incentive
				WHEN PYMT_TRANS_TYPE_CD = 'EARNINGS_ADJUSTMENT_PAYMENT'
				THEN 0 -- REMOVING THE EARNINGS ADJUSTMENT AMOUNT FROM INCENTIVES (PROP 22) 
				WHEN PYMT_TRANS_TYPE_CD IN ('MISSING_ORDER_PAYMENT','GUARNTEED_PAYMENT','HEALTHCARE_SUBSIDY_PAYMENT') THEN 0 -- REMOVING NEW INCENTIVE COMPONENETS
				WHEN PYMT_TRANS_TYPE_CD = 'BONUS_PAYMENT' AND (E.PROMO_NM IS NULL ) THEN 0 -- REMOVING NEW INCENTIVE COMPONENETS
				ELSE A.DLVR_FEE_WM_REWARD_AMT  
				END) AS INCENTIVE_AMT ,
				
		SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%shop%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) 
		AS SHOPPER_INCENTIVE ,	
	
		SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%'  and (lower(E.PROMO_NM) like '%starting to%' or  lower(E.PROMO_NM) like '%reactivation%')
		THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS ACQ_INCENTIVE ,
				
		SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%'  and lower(E.PROMO_NM) like '%refer%' --and lower(E.PROMO_NM) not like '%test%'
		THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS RFR_INCENTIVE ,
				
		SUM(distinct CASE  WHEN PYMT_TRANS_TYPE_CD = 'EARNINGS_ADJUSTMENT_PAYMENT' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS ERNGS_ADJ_AMT,
		-- NEWLY ADDED INCENTIVE FEATURES
		SUM(distinct CASE WHEN (PYMT_TRANS_TYPE_CD = 'MISSING_ORDER_PAYMENT' ) THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS MISSING_ORDR_AMT,
		SUM(distinct CASE WHEN PYMT_TRANS_TYPE_CD = 'GUARNTEED_PAYMENT' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS GUAR_PYMNT_AMT,
		SUM(distinct CASE WHEN PYMT_TRANS_TYPE_CD = 'HEALTHCARE_SUBSIDY_PAYMENT' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS HLTH_CARE_AMT
		,SUM(distinct CASE WHEN PYMT_TRANS_TYPE_CD = 'BONUS_PAYMENT' AND (E.PROMO_NM IS NULL ) THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS MNUAL_BLK_BNS_PYMT, -- updating by removing the new trip table LAST_MI_DLVR_INCTV_PYMT condition
		
	--------------additional INCENTIVES----------------(TICKET -1121)-------------------------------------------------------
	
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%launch%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS Launch_INCENTIVE ,
				
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%exclusive%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS DNM_INCENTIVE ,

	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%miss you%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS  REACTIVATION_INCENTIVE,

	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%weekend%' AND EXTRACT(DAYOFWEEK FROM PROMO_ACTV_START_DT)=7
	--AND	EXTRACT(DAYOFWEEK FROM PROMO_ACTV_END_DT)=7
	THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS  SUNDAY_CHURN_INCENTIVE,	
				
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%dotcom%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS DOTCOM_INCENTIVE ,		

			
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%special%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS  SPECIAL_INCENTIVE ,
							
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%morning%' and lower(E.PROMO_NM) like '%store%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END)
	AS  MORNING_STORE_INCENTIVE ,
							
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%evening%' and lower(E.PROMO_NM) like '%store%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END)
	AS  EVENING_STORE_INCENTIVE ,
							
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%exciting%' and lower(E.PROMO_NM) like '%store%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END)
	AS  STORE_INCENTIVE ,
								
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%morning%'  THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS  MORNING_ZONE_INCENTIVE ,
				
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%evening%' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0   END) AS  EVENING_ZONE_INCENTIVE ,				
							
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and (lower(E.PROMO_NM) like '%exciting%' or lower(E.PROMO_NM) like '%monday%' OR lower(E.PROMO_NM) like '%tuesday%'
	OR  lower(E.PROMO_NM) like '%wednesday%' OR  lower(E.PROMO_NM) like '%thursday%' OR  lower(E.PROMO_NM) like '%friday%')  THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0   END)
	AS  Zone_Incentive,				
	
	SUM(distinct CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%'  and lower(E.PROMO_NM) like '%joyrun%'  THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0  END) AS  joyrun_incentive ,	
	
	-------------------------------------------------x-----------------------------------------------------------------------
		FROM 
			(SELECT * FROM  `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_DRVR_PYMT` WHERE TRIP_ID LIKE 'INC%') A  

		LEFT JOIN (SELECT DISTINCT PROMO_PYMT_TRIGGER_ID, PROMO_ID, ACTL_INCTV_AMT FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DLVR_PROMO_EXEC_USER`) B
			on A.PROMO_PYMT_TRIGGER_ID = B.PROMO_PYMT_TRIGGER_ID
		LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DLVR_PROMO` E
			ON B.PROMO_ID = E.PROMO_ID
		LEFT JOIN LMD_DA.WMT_WEEK RDT  
			ON RDT.CAL_DT = A.PYMT_RQ_DT
			-- LEFT JOIN (
		-- SELECT DRVR_USER_ID,INCTV_PROMO_NM, PYMT_TRIGGER_ID,
              -- DATE(PYMT_TRIGGER_TS) PYMT_TRIGGER_TS,trip_id -- need to include trip id so to join with other trip level data
              -- PROMO_ID,
            -- INCTV_AMT 
          -- FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_INCTV_PYMT` 
          -- --new table
              -- -- LIMIT 10
        -- -- WHERE DATE(PYMT_TRIGGER_TS) = '2022-11-10'
            -- GROUP BY 1,2,3,4,5,6
		-- ) new_inc ON a.PROMO_PYMT_TRIGGER_ID = new_inc.PYMT_TRIGGER_ID ---CHECK THE JOINING CONDITION OF THIS TABLE.
		
		LEFT JOIN (
			SELECT  PROMO_ID,MIN(CASE WHEN evnt.TM_COND_NM IN ('IN_BETWEEN_DATES', 'ON_DATE') THEN CAST(evnt.TM_COND_VAR_VAL AS DATE) END) AS PROMO_ACTV_START_DT,
							 MAX(CASE WHEN evnt.TM_COND_NM IN ('IN_BETWEEN_DATES', 'ON_DATE') THEN CAST(evnt.TM_COND_VAR_VAL AS DATE) END) AS PROMO_ACTV_END_DT,
			   FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DLVR_PROMO_EVENT_QRY` evnt
			   where DEP_EVENT_NM = 'TRIP_COMPLETED'
			   GROUP BY 1 ) PRO
		ON  E.PROMO_ID = PRO.PROMO_ID	
		GROUP BY 1, 2
),

tpo as															-- Count of rec for each driver by deliv.week
(
	SELECT WM_WK , DRVR_USER_ID  ,COUNT(DISTINCT TRIP_ID||SALES_ORDER_NUM||COALESCE(PO_NUM,'0')) AS TOT_REC
	FROM LMD_DA.TRIP_PO_LIST    GROUP BY 1,2

),

prop_drvr_wk as													-- Latest Delivery week <= Actual payment week
(
  select * from
  (
  select *, rank() over(partition by drvr_user_id, pymt_wk order by trip_wk desc) last_week 
  from
	(
		select prop.drvr_user_id, prop.wm_wk as pymt_wk, 
		
		prop.PYMT_TRANS_AMT,
		prop.ERNGS_ADJ_AMT,
		
		-- NEWLY ADDED INCENTIVE COMPONENTS
		prop.MISSING_ORDR_AMT,
		prop.GUAR_PYMNT_AMT,
		prop.HLTH_CARE_AMT,
		prop.MNUAL_BLK_BNS_PYMT,
		
		prop.INCENTIVE_AMT, prop.SHOPPER_INCENTIVE, prop.ACQ_INCENTIVE, prop.RFR_INCENTIVE,
		prop.Launch_INCENTIVE, prop.DNM_INCENTIVE, prop.REACTIVATION_INCENTIVE, prop.SUNDAY_CHURN_INCENTIVE, prop.DOTCOM_INCENTIVE,
		prop.SPECIAL_INCENTIVE, prop.MORNING_STORE_INCENTIVE,
		prop.EVENING_STORE_INCENTIVE, prop.STORE_INCENTIVE, prop.MORNING_ZONE_INCENTIVE,
		prop.EVENING_ZONE_INCENTIVE, prop.Zone_Incentive, prop.joyrun_incentive,
		tpo.wm_wk as trip_wk
		from prop left join tpo 
		on prop.drvr_user_ID=tpo.drvr_user_ID
		and tpo.wm_wk<=prop.wm_wk					
	)
  )  where last_week=1
),

EA as															-- Summing up payments for Deliv.Week
(
  select drvr_user_id, trip_wk as wm_wk, 
  sum(PYMT_TRANS_AMT) as PYMT_TRANS_AMT,
  sum(ERNGS_ADJ_AMT) as ERNGS_ADJ_AMT,
  -- ADDING UP NEWLY ADDED INCENTIVE COMPONENTS
  sum(MISSING_ORDR_AMT) as MISSING_ORDR_AMT,
  sum(GUAR_PYMNT_AMT) as GUAR_PYMNT_AMT,
  sum(HLTH_CARE_AMT) as HLTH_CARE_AMT,
  sum(MNUAL_BLK_BNS_PYMT) as MNUAL_BLK_BNS_PYMT,
  
  sum(INCENTIVE_AMT) as INCENTIVE_AMT,
  sum(SHOPPER_INCENTIVE) as SHOPPER_INCENTIVE,
  sum(ACQ_INCENTIVE) as ACQ_INCENTIVE,
  sum(RFR_INCENTIVE) as RFR_INCENTIVE,
  sum(Launch_INCENTIVE) as Launch_INCENTIVE,
  sum(DNM_INCENTIVE) as DNM_INCENTIVE, 
  sum(REACTIVATION_INCENTIVE) as REACTIVATION_INCENTIVE,
  sum(SUNDAY_CHURN_INCENTIVE) as SUNDAY_CHURN_INCENTIVE,
  sum(DOTCOM_INCENTIVE) as DOTCOM_INCENTIVE,
  sum(SPECIAL_INCENTIVE) as SPECIAL_INCENTIVE,
  sum(MORNING_STORE_INCENTIVE) as MORNING_STORE_INCENTIVE,
  sum(EVENING_STORE_INCENTIVE) as EVENING_STORE_INCENTIVE,
  sum(STORE_INCENTIVE) as STORE_INCENTIVE,
  sum(MORNING_ZONE_INCENTIVE) as MORNING_ZONE_INCENTIVE,
  sum(EVENING_ZONE_INCENTIVE) as EVENING_ZONE_INCENTIVE, 
  sum(Zone_Incentive) as Zone_Incentive,
  sum(joyrun_incentive) as joyrun_incentive,  
  from prop_drvr_wk group by 1,2
)

select  EA.DRVR_USER_ID, EA.WM_WK, 		-- TRIP WEEK
 	EA.PYMT_TRANS_AMT,		
	safe_divide(EA.INCENTIVE_AMT,tpo.TOT_REC) as INCENTIVE_AMT
	,safe_divide(  EA.MISSING_ORDR_AMT,tpo.TOT_REC) as MISSING_ORDR_AMT
	,safe_divide(  EA.MNUAL_BLK_BNS_PYMT,tpo.TOT_REC) as MNUAL_BLK_BNS_PYMT
	,safe_divide(  EA.GUAR_PYMNT_AMT,tpo.TOT_REC) as GUAR_PYMNT_AMT
	,safe_divide(  EA.HLTH_CARE_AMT,tpo.TOT_REC) as HLTH_CARE_AMT
	,safe_divide(  EA.SHOPPER_INCENTIVE,tpo.TOT_REC) as SHOPPER_INCENTIVE
	,safe_divide(  EA.ACQ_INCENTIVE,tpo.TOT_REC) as ACQ_INCENTIVE
	,safe_divide(  EA.RFR_INCENTIVE,tpo.TOT_REC) as RFR_INCENTIVE
	,safe_divide(  EA.ERNGS_ADJ_AMT,tpo.TOT_REC) as ERNGS_ADJ_AMT
	,safe_divide(  EA.Launch_INCENTIVE,tpo.TOT_REC) as Launch_INCENTIVE
	,safe_divide(  EA.DNM_INCENTIVE,tpo.TOT_REC) as DNM_INCENTIVE
	,safe_divide(  EA.REACTIVATION_INCENTIVE,tpo.TOT_REC) as REACTIVATION_INCENTIVE
	,safe_divide(  EA.SUNDAY_CHURN_INCENTIVE,tpo.TOT_REC) as SUNDAY_CHURN_INCENTIVE
	,safe_divide(  EA.DOTCOM_INCENTIVE,tpo.TOT_REC) as DOTCOM_INCENTIVE
	,safe_divide(  EA.SPECIAL_INCENTIVE,tpo.TOT_REC) as SPECIAL_INCENTIVE
	,safe_divide(  EA.MORNING_STORE_INCENTIVE,tpo.TOT_REC) as MORNING_STORE_INCENTIVE
	,safe_divide(  EA.EVENING_STORE_INCENTIVE,tpo.TOT_REC) as EVENING_STORE_INCENTIVE
	,safe_divide(  EA.STORE_INCENTIVE,tpo.TOT_REC) as STORE_INCENTIVE
	,safe_divide(  EA.MORNING_ZONE_INCENTIVE,tpo.TOT_REC) as MORNING_ZONE_INCENTIVE
	,safe_divide(  EA.EVENING_ZONE_INCENTIVE,tpo.TOT_REC) as EVENING_ZONE_INCENTIVE
	,safe_divide(  EA.Zone_Incentive,tpo.TOT_REC) as Zone_Incentive
	,safe_divide(  EA.joyrun_incentive,tpo.TOT_REC) as joyrun_incentive
from EA INNER JOIN tpo 
	ON EA.WM_WK = tpo.WM_WK
	AND EA.DRVR_USER_ID = tpo.DRVR_USER_ID
);


--new inc code

CREATE OR REPLACE TABLE LMD_DA.SPARK_PAYMENT_INCENT_DRVR_WK_V2 AS    		-- After 8/22
(
with trip_level_incntv as													-- Drvr_user_ID + Actual Payment Week + Payment
	(SELECT 
		A.DRVR_USER_ID,  WM_WK , TRIP_ID,
		-- SUM( PYMT_TRANS_AMT) PYMT_TRANS_AMT,			
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%shop%' THEN A.INCTV_AMT ELSE 0  END) AS SHOPPER_INCENTIVE ,	
		
		/*		old logic- 1121
		SUM(CASE WHEN A.INCTV_PROMO_NM like '%shop%' or promo_nm like '%Shop ‘til you drop!%'  or promo_nm like '%Prod Testing Shopper Feature%' THEN CAST(B.ACTL_INCTV_AMT AS NUMERIC)  END) AS SHOPPER_INCENTIVE,     
		SUM(CASE WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(A.INCTV_PROMO_NM) like '%starting%' THEN A.INCTV_AMT ELSE 0  END)AS ACQ_INCENTIVE ,		*/
		
	MAX(CASE WHEN (lower(A.INCTV_PROMO_NM) like '%starting to%' or  lower(A.INCTV_PROMO_NM) like '%reactivation%') THEN A.INCTV_AMT ELSE 0 END) AS ACQ_INCENTIVE ,
				
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%refer%' THEN A.INCTV_AMT ELSE 0  END) AS RFR_INCENTIVE ,
		
						
	--------------additional INCENTIVES----------------(TICKET -1121)-------------------------------------------------------
	
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%launch%' THEN A.INCTV_AMT ELSE 0  END) AS Launch_INCENTIVE ,
				
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%exclusive%' THEN A.INCTV_AMT ELSE 0  END) AS DNM_INCENTIVE ,

	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%miss you%' THEN A.INCTV_AMT ELSE 0  END) AS  REACTIVATION_INCENTIVE,

	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%weekend%' AND EXTRACT(DAYOFWEEK FROM PROMO_ACTV_START_DT)=7 THEN A.INCTV_AMT ELSE 0 END) AS  SUNDAY_CHURN_INCENTIVE,	
				
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%dotcom%' THEN A.INCTV_AMT ELSE 0  END) AS DOTCOM_INCENTIVE ,		

			
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%special%' THEN A.INCTV_AMT ELSE 0  END) AS  SPECIAL_INCENTIVE ,
							
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%morning%' and lower(A.INCTV_PROMO_NM) like '%store%' THEN A.INCTV_AMT ELSE 0  END) AS  MORNING_STORE_INCENTIVE ,
							
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%evening%' and lower(A.INCTV_PROMO_NM) like '%store%' THEN A.INCTV_AMT ELSE 0 END) AS  EVENING_STORE_INCENTIVE ,
							
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%exciting%' and lower(A.INCTV_PROMO_NM) like '%store%' THEN A.INCTV_AMT ELSE 0 END) AS  STORE_INCENTIVE ,
								
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%morning%'  THEN A.INCTV_AMT ELSE 0 END) AS  MORNING_ZONE_INCENTIVE ,
				
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%evening%' THEN A.INCTV_AMT ELSE 0   END) AS  EVENING_ZONE_INCENTIVE ,				
							
	MAX(CASE WHEN (lower(A.INCTV_PROMO_NM) like '%exciting%' or lower(A.INCTV_PROMO_NM) like '%monday%' OR lower(A.INCTV_PROMO_NM) like '%tuesday%'
	OR  lower(A.INCTV_PROMO_NM) like '%wednesday%' OR  lower(A.INCTV_PROMO_NM) like '%thursday%' OR  lower(A.INCTV_PROMO_NM) like '%friday%')  THEN A.INCTV_AMT ELSE 0   END)
	AS  Zone_Incentive,				
	
	MAX(CASE WHEN lower(A.INCTV_PROMO_NM) like '%joyrun%'  THEN A.INCTV_AMT ELSE 0  END) AS  joyrun_incentive,
	
	-- COALESCE(SUM(A.INCTV_AMT),0) AS USAP_INC_PYMT_AMT
	SUM(COALESCE(A.INCTV_AMT,0)) AS USAP_INC_PYMT_AMT
	--------x-----------------------------------------------------------------------
		FROM 
		(
		select A.DRVR_USER_ID,A.TRIP_ID,A.INCTV_PROMO_NM, round(safe_divide(SUB.INCTV_AMT,SUB.trips),2) as INCTV_AMT, RDT.WM_WK, PRO.PROMO_ACTV_START_DT, PRO.PROMO_ACTV_END_DT
			from (
					SELECT DRVR_USER_ID,PYMT_TRIGGER_ID,TRIP_ID,INCTV_PROMO_NM, 
						  DATE(PYMT_TRIGGER_TS) PYMT_TRIGGER_TS,
						  PROMO_ID,
						--INCTV_AMT 
					  FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_INCTV_PYMT` 
								WHERE EVENT_NM = 'INCENTIVE_TRIGGER_SUCCESS'
                AND DATE(PYMT_TRIGGER_TS) >= DATE1
					  
						GROUP BY 1,2,3,4,5,6
				) A
			left join 
				(
				SELECT distinct  DRVR_USER_ID, PYMT_TRIGGER_ID, INCTV_PROMO_NM, count(distinct trip_id) trips,  max(coalesce(INCTV_AMT,0)) INCTV_AMT
				FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_INCTV_PYMT` 
				WHERE EVENT_NM = 'INCENTIVE_TRIGGER_SUCCESS'
        AND  DATE(PYMT_TRIGGER_TS) >= DATE1
				group by 1,2,3
				) SUB 
			on A.drvr_user_id = sub.drvr_user_id and A.PYMT_TRIGGER_ID = sub.PYMT_TRIGGER_ID
			LEFT JOIN LMD_DA.WMT_WEEK RDT  
				ON RDT.CAL_DT = A.PYMT_TRIGGER_TS
			LEFT JOIN (
				SELECT  PROMO_ID,MIN(CASE WHEN evnt.TM_COND_NM IN ('IN_BETWEEN_DATES', 'ON_DATE') THEN CAST(evnt.TM_COND_VAR_VAL AS DATE) END) AS PROMO_ACTV_START_DT,
								 MAX(CASE WHEN evnt.TM_COND_NM IN ('IN_BETWEEN_DATES', 'ON_DATE') THEN CAST(evnt.TM_COND_VAR_VAL AS DATE) END) AS PROMO_ACTV_END_DT,
				   FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DLVR_PROMO_EVENT_QRY` evnt
				   where DEP_EVENT_NM = 'TRIP_COMPLETED'
				   GROUP BY 1 ) PRO
			ON  A.PROMO_ID = PRO.PROMO_ID
		) A
		GROUP BY 1, 2,3
	),

tpo as															-- Count of rec for each driver by deliv.week
(
	SELECT WM_WK , DRVR_USER_ID  , COUNT(DISTINCT TRIP_ID||SALES_ORDER_NUM||COALESCE(PO_NUM,'0')) AS TOT_REC
	FROM `LMD_DA.TRIP_PO_LIST`    GROUP BY 1,2

),

other_pymnts as (
	SELECT A.DRVR_USER_ID, WM_WK,
	SUM(case when TRIP_ID LIKE 'INC%' then PYMT_TRANS_AMT end) PYMT_TRANS_AMT,
			-- SUM(CASE WHEN E.promo_nm like '%shop%'  --or promo_nm like '%Shop ‘til you drop!%'or promo_nm like '%Prod Testing Shopper Feature%' 
					-- THEN A.DLVR_FEE_BY_WM_REWARD_AMT - CAST(B.ACTL_INCTV_AMT AS NUMERIC)
					-- WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%starting to%'
					-- THEN 0 --acquisition incentive  
					-- WHEN lower(E.PROMO_TYPE_NM) like '%incentive%' and lower(E.PROMO_NM) like '%refer%' --and lower(E.PROMO_NM) not like '%test%'
					-- THEN 0  -- referral incentive
					-- WHEN PYMT_TRANS_TYPE_CD = 'EARNINGS_ADJUSTMENT_PAYMENT'
					-- THEN 0 -- REMOVING THE EARNINGS ADJUSTMENT AMOUNT FROM INCENTIVES (PROP 22) 
					-- ELSE A.DLVR_FEE_BY_WM_REWARD_AMT  
					-- END) AS INCENTIVE_AMT, 
	SUM(distinct CASE WHEN PYMT_TRANS_TYPE_CD = 'EARNINGS_ADJUSTMENT_PAYMENT' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS ERNGS_ADJ_AMT,
	SUM(distinct  CASE WHEN (PYMT_TRANS_TYPE_CD = 'MISSING_ORDER_PAYMENT' ) THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS MISSING_ORDR_AMT,
	SUM(distinct  CASE WHEN PYMT_TRANS_TYPE_CD = 'GUARNTEED_PAYMENT' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS GUAR_PYMNT_AMT,
	SUM(distinct  CASE WHEN PYMT_TRANS_TYPE_CD = 'HEALTHCARE_SUBSIDY_PAYMENT' THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS HLTH_CARE_AMT,
	-- added by vn55chk 20-02-24 --
	SUM(CASE WHEN  PYMT_TRANS_TYPE_CD = 'TIP_REIMBURSEMENT_PAYMENT' THEN A.PYMT_TRANS_AMT ELSE 0 END) AS Tip_coverage,
	
	--below line added by HA
	SUM(CASE WHEN PYMT_TRANS_TYPE_CD = 'BONUS_PAYMENT' AND (E.PROMO_NM IS NULL AND new_inc.INCTV_PROMO_NM IS NULL) THEN A.DLVR_FEE_WM_REWARD_AMT ELSE 0 END) AS MNUAL_BLK_BNS_PYMT

					FROM
	(SELECT * FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_DRVR_PYMT`  --old table--
	-- AND DATE(RQ_DRVR_PYMT_DT) = '2022-12-15'
  -- where TRIP_ID LIKE 'INC%' 
	) A  
	LEFT JOIN (SELECT DISTINCT PROMO_PYMT_TRIGGER_ID, PROMO_ID, ACTL_INCTV_AMT FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DLVR_PROMO_EXEC_USER`) B
		on A.PROMO_PYMT_TRIGGER_ID = B.PROMO_PYMT_TRIGGER_ID
	LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DLVR_PROMO` E
		ON B.PROMO_ID = E.PROMO_ID
	LEFT JOIN (
		SELECT DRVR_USER_ID,INCTV_PROMO_NM, PYMT_TRIGGER_ID,
              DATE(PYMT_TRIGGER_TS) PYMT_TRIGGER_TS,
              PROMO_ID,
            INCTV_AMT 
          FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_INCTV_PYMT` 
          --new table
              -- LIMIT 10
        -- WHERE DATE(PYMT_TRIGGER_TS) = '2022-11-10'
            GROUP BY 1,2,3,4,5,6
		) new_inc ON a.PROMO_PYMT_TRIGGER_ID = new_inc.PYMT_TRIGGER_ID
	LEFT JOIN LMD_DA.WMT_WEEK RDT  
		ON RDT.CAL_DT = A.PYMT_RQ_DT
		GROUP BY 1,2
),

prop_drvr_wk as													-- Latest Delivery week <= Actual payment week
(
  select * from
  (
  select *, rank() over(partition by drvr_user_id, pymt_wk order by trip_wk desc) last_week 
  from
	(
		select prop.drvr_user_id, prop.wm_wk as pymt_wk, 
		prop.PYMT_TRANS_AMT, prop.ERNGS_ADJ_AMT,
		prop.MISSING_ORDR_AMT,prop.GUAR_PYMNT_AMT , prop.HLTH_CARE_AMT,
		prop.MNUAL_BLK_BNS_PYMT,
		prop.Tip_coverage,
		tpo.wm_wk as trip_wk
		from other_pymnts prop
		left join tpo 
		on prop.drvr_user_ID=tpo.drvr_user_ID
		and tpo.wm_wk<=prop.wm_wk					
	)
  )  where last_week=1
),
			
EA2 as															-- Summing up payments for Deliv.Week
(
  select drvr_user_id, pymt_wk wm_wk, 
  sum(PYMT_TRANS_AMT) as PYMT_TRANS_AMT,
  sum(ERNGS_ADJ_AMT) as ERNGS_ADJ_AMT,
  SUM(MISSING_ORDR_AMT) as  MISSING_ORDR_AMT ,
  SUM(GUAR_PYMNT_AMT) as  GUAR_PYMNT_AMT ,
  SUM(HLTH_CARE_AMT)  as HLTH_CARE_AMT,
  SUM(MNUAL_BLK_BNS_PYMT) as MNUAL_BLK_BNS_PYMT,
  SUM(Tip_coverage) as Tip_coverage
  from prop_drvr_wk group by 1,2
),
EA1 as															-- Summing up payments for Deliv.Week
(
  select drvr_user_id,  TRIP_ID,
  sum(SHOPPER_INCENTIVE) as SHOPPER_INCENTIVE,
  sum(ACQ_INCENTIVE) as ACQ_INCENTIVE,
  sum(RFR_INCENTIVE) as RFR_INCENTIVE,
  sum(Launch_INCENTIVE) as Launch_INCENTIVE,
  sum(DNM_INCENTIVE) as DNM_INCENTIVE, 
  sum(REACTIVATION_INCENTIVE) as REACTIVATION_INCENTIVE,
  sum(SUNDAY_CHURN_INCENTIVE) as SUNDAY_CHURN_INCENTIVE,
  sum(DOTCOM_INCENTIVE) as DOTCOM_INCENTIVE,
  sum(SPECIAL_INCENTIVE) as SPECIAL_INCENTIVE,
  sum(MORNING_STORE_INCENTIVE) as MORNING_STORE_INCENTIVE,
  sum(EVENING_STORE_INCENTIVE) as EVENING_STORE_INCENTIVE,
  sum(STORE_INCENTIVE) as STORE_INCENTIVE,
  sum(MORNING_ZONE_INCENTIVE) as MORNING_ZONE_INCENTIVE,
  sum(EVENING_ZONE_INCENTIVE) as EVENING_ZONE_INCENTIVE, 
  sum(Zone_Incentive) as Zone_Incentive,
  sum(joyrun_incentive) as joyrun_incentive,
  sum(USAP_INC_PYMT_AMT) AS USAP_INC_PYMT_AMT
  from trip_level_incntv group by 1,2
),
tpp as															-- Count of rec for each driver by deliv.week
(
	SELECT trip_id ,drvr_user_id, COUNT(distinct sales_order_num||coalesce(po_num,'0')) AS TOT_REC -- need to add drvr_user_id in group by
	FROM `LMD_DA.TRIP_PO_LIST`    GROUP BY 1,2

)

SELECT * EXCEPT(pRE_INCENTIVE_AMT), --INCENTIVE_AMT + GUAR_PYMNT_AMT + MNUAL_BLK_BNS_PYMT as INCENTIVE_AMT
coalesce(pRE_INCENTIVE_AMT,0) + coalesce(GUAR_PYMNT_AMT,0) + coalesce(MNUAL_BLK_BNS_PYMT,0) as INCENTIVE_AMT
		
		FROM
(select *, 
		-- GUAR_PYMNT_AMT+
		-- + MNUAL_BLK_BNS_PYMT+
		--  Launch_INCENTIVE + DNM_INCENTIVE + REACTIVATION_INCENTIVE + SUNDAY_CHURN_INCENTIVE 
		-- + DOTCOM_INCENTIVE + SPECIAL_INCENTIVE + MORNING_STORE_INCENTIVE + 
		-- EVENING_STORE_INCENTIVE + Zone_Incentive + joyrun_incentive
		-- as 
		-- INCENTIVE_AMT, 
		USAP_INC_PYMT_AMT AS USAP_INCENTIVE_AMT,
		USAP_INC_PYMT_AMT - (SHOPPER_INCENTIVE + Launch_INCENTIVE + DNM_INCENTIVE + REACTIVATION_INCENTIVE + SUNDAY_CHURN_INCENTIVE 
		+ DOTCOM_INCENTIVE + SPECIAL_INCENTIVE + MORNING_STORE_INCENTIVE + ACQ_INCENTIVE +RFR_INCENTIVE +
		EVENING_STORE_INCENTIVE + Zone_Incentive + joyrun_incentive) EXTRA_INCENTIVE_AMT,
    USAP_INC_PYMT_AMT - (SHOPPER_INCENTIVE+ ACQ_INCENTIVE +RFR_INCENTIVE) pRE_INCENTIVE_AMT -- change the naming so to remove confusion
 FROM
(select  TPL.DRVR_USER_ID, TPL.WM_WK, TPL.TRIP_ID,		-- TRIP WEEK
 	--EA.INCENTIVE_AMT/tpo.TOT_REC as INCENTIVE_AMT,		
	EAB2.ERNGS_ADJ_AMT as ERNGS_ADJ_AMT,
    EAB2.MISSING_ORDR_AMT as MISSING_ORDR_AMT , --added new 
    EAB2.GUAR_PYMNT_AMT as GUAR_PYMNT_AMT, --added new
    EAB2.HLTH_CARE_AMT as HLTH_CARE_AMT,
    EAB2.MNUAL_BLK_BNS_PYMT as MNUAL_BLK_BNS_PYMT,--added new
	EAB2.Tip_coverage as Tip_coverage,
	EAB2.PYMT_TRANS_AMT as	PYMT_TRANS_AMT,
	SAFE_DIVIDE(EA1.SHOPPER_INCENTIVE, tpp.TOT_REC) as SHOPPER_INCENTIVE,	
	SAFE_DIVIDE(EA1.ACQ_INCENTIVE, tpp.TOT_REC) as ACQ_INCENTIVE,
	SAFE_DIVIDE(EA1.RFR_INCENTIVE, tpp.TOT_REC) as RFR_INCENTIVE,	
	SAFE_DIVIDE(EA1.Launch_INCENTIVE, tpp.TOT_REC) as Launch_INCENTIVE ,
	SAFE_DIVIDE(EA1.DNM_INCENTIVE, tpp.TOT_REC) as  DNM_INCENTIVE,
	SAFE_DIVIDE(EA1.REACTIVATION_INCENTIVE, tpp.TOT_REC) as  REACTIVATION_INCENTIVE,
	SAFE_DIVIDE(EA1.SUNDAY_CHURN_INCENTIVE, tpp.TOT_REC) as SUNDAY_CHURN_INCENTIVE  ,
	SAFE_DIVIDE(EA1.DOTCOM_INCENTIVE, tpp.TOT_REC) as DOTCOM_INCENTIVE ,
	SAFE_DIVIDE(EA1.SPECIAL_INCENTIVE, tpp.TOT_REC) as  SPECIAL_INCENTIVE ,
	SAFE_DIVIDE(EA1.MORNING_STORE_INCENTIVE, tpp.TOT_REC) as  MORNING_STORE_INCENTIVE,
	SAFE_DIVIDE(EA1.EVENING_STORE_INCENTIVE, tpp.TOT_REC) as EVENING_STORE_INCENTIVE ,
	SAFE_DIVIDE(EA1.STORE_INCENTIVE, tpp.TOT_REC) as  STORE_INCENTIVE,
	SAFE_DIVIDE(EA1.MORNING_ZONE_INCENTIVE, tpp.TOT_REC) as  MORNING_ZONE_INCENTIVE ,
	SAFE_DIVIDE(EA1.EVENING_ZONE_INCENTIVE, tpp.TOT_REC) as EVENING_ZONE_INCENTIVE ,
	SAFE_DIVIDE(EA1.Zone_Incentive, tpp.TOT_REC) as  Zone_Incentive ,
	SAFE_DIVIDE(EA1.joyrun_incentive, tpp.TOT_REC) as  joyrun_incentive ,
	SAFE_DIVIDE(EA1.USAP_INC_PYMT_AMT, tpp.TOT_REC) as  USAP_INC_PYMT_AMT
from (SELECT distinct DRVR_USER_ID, WM_WK, TRIP_ID FROM `LMD_DA.TRIP_PO_LIST`) TPL
left join  EA1 ON  EA1.DRVR_USER_ID = TPL.DRVR_USER_ID
	AND EA1.trip_id = TPL.trip_id

left join
(select EA2.DRVR_USER_ID, EA2.WM_WK,		-- TRIP WEEK
 	--EA.INCENTIVE_AMT/tpo.TOT_REC as INCENTIVE_AMT,		
	SAFE_DIVIDE(EA2.ERNGS_ADJ_AMT, tpo.TOT_REC) as ERNGS_ADJ_AMT,
  SAFE_DIVIDE(EA2.MISSING_ORDR_AMT, tpo.TOT_REC) as MISSING_ORDR_AMT , --added new 
   SAFE_DIVIDE(EA2.GUAR_PYMNT_AMT, tpo.TOT_REC)  as GUAR_PYMNT_AMT, --added new
   SAFE_DIVIDE(EA2.HLTH_CARE_AMT, tpo.TOT_REC) as HLTH_CARE_AMT,
   SAFE_DIVIDE(EA2.MNUAL_BLK_BNS_PYMT, tpo.TOT_REC) as MNUAL_BLK_BNS_PYMT,--added new
   SAFE_DIVIDE(EA2.Tip_coverage, tpo.TOT_REC) as Tip_coverage,
	SAFE_DIVIDE(EA2.PYMT_TRANS_AMT,tpo.TOT_REC) as	PYMT_TRANS_AMT 
	from EA2 left JOIN tpo 
	ON EA2.WM_WK = tpo.WM_WK 
	AND EA2.DRVR_USER_ID = tpo.DRVR_USER_ID
	) EAB2
	ON TPL.WM_WK = EAB2.WM_WK
	AND TPL.DRVR_USER_ID = EAB2.DRVR_USER_ID 
	left join tpp on EA1.trip_id = tpp.trip_id 
	and EA1.drvr_user_ID = tpp.drvr_user_ID  --correction
	)
));

--Batched orders are found

CREATE OR REPLACE TABLE LMD_DA.BATCH_ORDERS AS 
(
 
 SELECT TRIP_ID,
 CASE WHEN TOT_ORDERS > 1 THEN 1 ELSE 0 END AS SPARK_BATCH_FLAG
 FROM
 (SELECT 
	    TRIP_ID,
       COUNT(DISTINCT CONCAT(SALES_ORDER_NUM, coalesce(PO_NUM, '0'))) AS TOT_ORDERS
   FROM LMD_DA.TRIP_PO_LIST
  GROUP BY 1) A
);
    
  
--Offer metrics

 CREATE OR REPLACE TABLE LMD_DA.OFFERS AS(
SELECT DISTINCT
SALES_ORDER_NUM
,DLVR_OFFR_TRIP_ID
,DRVR_USER_ID
,DLVR_OFFR_STS_NM
,DLVR_OFFR_CRE_TS
,DLVR_OFFR_MODFD_TS
,DLVR_OFFR_EXP_TS
FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.CARRIER_DLVR_OFFR`
--WHERE DLVR_OFFR_CRE_TS > '2019-11-01'
WHERE DLVR_OFFR_CRE_TS between DATE1 and current_date("US/Pacific") --TWO_MONTHS
);

--Aggregated at trip and order level

 CREATE OR REPLACE TABLE LMD_DA.OFFER_METRICS AS(
SELECT SALES_ORDER_NUM
,DLVR_OFFR_TRIP_ID
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'OFFER_PUBLISHED' THEN 1 end) AS OFFER_PUBLISHED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'ACCEPTED' THEN 1 end) AS ACCEPTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'DROPPED' THEN 1 end) AS DROPPED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'REJECTED' THEN 1 end) AS REJECTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'EXPIRED' THEN 1 end) AS EXPIRED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'OFFER_BROADCASTED' THEN 1 end) AS OFFER_BROADCASTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_ACCEPTED' THEN 1 end) AS BROADCAST_ACCEPTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_DROPPED' THEN 1 end) AS BROADCAST_DROPPED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_REJECTED' THEN 1 end) AS BROADCAST_REJECTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_EXPIRED' THEN 1 end) AS BROADCAST_EXPIRED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'OFFER_BROADCASTED_WITH_SURGE' THEN 1 end) AS OFFER_BROADCASTED_WITH_SURGE
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_WITH_SURGE_ACCEPTED' THEN 1 end) AS BROADCAST_WITH_SURGE_ACCEPTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_WITH_SURGE_DROPPED' THEN 1 end) AS BROADCAST_WITH_SURGE_DROPPED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_WITH_SURGE_REJECTED' THEN 1 end) AS BROADCAST_WITH_SURGE_REJECTED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'BROADCAST_WITH_SURGE_EXPIRED' THEN 1 end) AS BROADCAST_WITH_SURGE_EXPIRED
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'THIRD_PARTY_OFFER_PUBLISH' THEN 1 end) AS THIRD_PARTY_OFFER_PUBLISH
,SUM(CASE WHEN DLVR_OFFR_STS_NM = 'THIRD_PARTY_EXPIRED' THEN 1 end) AS THIRD_PARTY_EXPIRED
FROM LMD_DA.OFFERS
GROUP BY 1,2
);

--NPS & DCSAT tables

CREATE OR REPLACE TABLE LMD_DA.ORDER_DCSAT_DS                                                     
AS                                                           
(                                                              
SELECT                                                  
                ref.po_num,                                                                    
				MAX(case when cast(ref.DCSAT_ONEAPP_RATING AS INT64)=2 OR cast(ref.DCSAT_GLASS_RATING AS INT64) in(4,5)  then 1 else 0 end) AS DCSAT_promoters
				,max(case when ref.DCSAT_ONEAPP_RATING is not null or ref.DCSAT_GLASS_RATING is not null then 1 else 0 end) as DCSAT_Total_respondents
                ,MAX(case when cast(ref.DCSAT_ONEAPP_RATING AS INT64)=2 then 1 else 0 end) AS DCSAT_ONEAPP_promoters
				,max(case when ref.DCSAT_ONEAPP_RATING is not null then 1 else 0 end) as DCSAT_ONEAPP_Total_respondents
				,MAX(case when cast(ref.DCSAT_GLASS_RATING AS INT64) in(4,5)  then 1 else 0 end) AS DCSAT_GLASS_promoters
				,max(case when ref.DCSAT_GLASS_RATING is not null then 1 else 0 end) as DCSAT_GLASS_Total_respondents
				,MAX(COALESCE(DCSAT_GLASS_COMMENTS,DCSAT_ONEAPP_COMMENTS)) AS DCSAT_COMMENTS
                
FROM                                                   
                (                                              
                                SELECT                                  
                                                a.src_rspns_id AS po_num           
                                                ,MAX(CASE WHEN a.survey_qstn_id=5411 THEN a.rspns_val ELSE NULL END) AS DCSAT_ONEAPP_RATING	
												,MAX(CASE WHEN a.survey_qstn_id=5441 THEN a.rspns_val ELSE NULL END) AS DCSAT_GLASS_RATING
												,MAX(CASE WHEN a.survey_qstn_id=5414 THEN a.rspns_val ELSE NULL END) AS DCSAT_ONEAPP_COMMENTS
												,MAX(CASE WHEN a.survey_qstn_id=5443 THEN a.rspns_val ELSE NULL END) AS DCSAT_GLASS_COMMENTS
                                                FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_SURVY_RSPNS` a                             
                                WHERE                 
                                                a.survey_qstn_id IN (5411,5441, 5414, 5443)
                                                AND a.RSPNS_DT  >= '2018-06-01'                             
                                                                GROUP BY 1        
                                ) ref                                       
GROUP BY 1                                        
) ;

--NPS of Dotcom orders

CREATE OR REPLACE TABLE LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1_DT
AS(
SELECT CAST(sales_order_nbr as string) AS SALES_ORDER_NUM,
MAX(case when net_promoter_score_desc= 'Promoter' then 1 else 0 end) as Promoters,
MAX(case when net_promoter_score_desc= 'Detractor' then 1 else 0 end) as Detractors,
MAX(case when net_promoter_score_desc is not null then 1 else 0 end) as Total_Respondents
FROM `wmt-marketing-cust-journey.cust_journey_ard.gm_response_base_partition`
WHERE survy_start_dt between DATE4 and current_date("US/Pacific") --TWO_MONTHS
GROUP BY 1
);

--NPS of GLASS deliveries

CREATE OR REPLACE TABLE LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1_GLASS as   
(
SELECT          CAST(order_nbr as string) as SALES_ORDER_NUM                                                              
                ,MAX(CASE WHEN ltr IN (9,10) THEN  1 ELSE 0 END) AS Promoters                                    
                ,MAX(CASE WHEN ltr IN (0,1,2,3,4,5,6) THEN  1 ELSE 0 END) AS Detractors                                        
                ,MAX(CASE WHEN ltr IS NOT NULL THEN  1 ELSE 0 END) AS Total_Respondents 
FROM            `wmt-marketing-cust-journey.cust_journey_ard.glass_survey_responses` 
				--where survy_start_dt>= '2021-01-01'
				WHERE survy_start_dt between DATE4 and current_date("US/Pacific") --TWO_MONTHS
GROUP BY 1);




CREATE OR REPLACE TABLE LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1
AS(
SELECT * FROM LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1_OG 
UNION ALL
SELECT * FROM LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1_DT
UNION ALL
SELECT * FROM LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1_GLASS
);

CREATE or REPLACE TABLE  LMD_DA.CUSTOMER_NPS_ORDER_INFO_STAGE2
AS
(SELECT SALES_ORDER_NUM, TRIP_ID, PO_NUM, FULFMT_TYPE_CD, CARRIER_ORG_NM, PICKER_TYPE_NM, REC_SRC ,STORE_ID, SVC_ID, SPARK_ZONE,DLVR_TS,
		(COALESCE(CARRIER_DLVR_TS_TZ, AT_DROPOFF_TS_TZ, ENR_DROPOFF_TS_TZ, AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ,CAR_REQ_TS_TZ, ORDER_DROP_TS, Slot_From_TS)) AS Timestamp_comb
		--new slot_dt logic
	,Extract (DATE from(COALESCE(DLVR_SLOT_START_TS_TZ, AT_DROPOFF_TS_TZ, ENR_DROPOFF_TS_TZ, AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ,CAR_REQ_TS_TZ,
         Slot_From_TS,ORDER_DROP_TS, CARRIER_DLVR_TS_TZ))) AS Slot_DT
		 --old slot_dt logic
		-- Extract (DATE from(COALESCE(CARRIER_DLVR_TS_TZ, AT_DROPOFF_TS_TZ, ENR_DROPOFF_TS_TZ, AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ,CAR_REQ_TS_TZ,
				 -- Slot_From_TS, DLVR_SLOT_START_TS_TZ,ORDER_DROP_TS))) AS Slot_DT
FROM
(SELECT  CRR.SALES_ORDER_NUM AS SALES_ORDER_NUM
		, CRR.TRIP_ID AS TRIP_ID
		, CRR.PO_NUM AS PO_NUM
		, SOL.FMT_TYPE AS FULFMT_TYPE_CD
		,CRR.CARRIER_ORG_NM AS CARRIER_ORG_NM
		,CRR.PICKER_TYPE_NM AS PICKER_TYPE_NM
		, SOL.STORE_ID AS STORE_ID
		, SOL.SVC_ID AS SVC_ID
		, d.SPARK_ZONE AS SPARK_ZONE
		,CRR.REC_SRC AS REC_SRC
		,CRR.DLVR_TS
		,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_TS ELSE DATETIME(CRR.DLVR_TS_UTC,OBU.ORG_TM_ZONE)  END AS CARRIER_DLVR_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST'  OR CRR.REC_SRC = 'DAAS' THEN CRR.AT_DROPOFF_TS ELSE DATETIME(CRR.AT_DROPOFF_TS_UTC,OBU.ORG_TM_ZONE)  END AS AT_DROPOFF_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST'  OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_DROPOFF_TS ELSE DATETIME(CRR.ENR_DROPOFF_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_DROPOFF_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST'  OR CRR.REC_SRC = 'DAAS' THEN CRR.AT_PICKUP_TS ELSE DATETIME(CRR.AT_PICKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS AT_PICKUP_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST'  OR CRR.REC_SRC = 'DAAS' THEN CRR.ENR_PICKUP_TS ELSE DATETIME(CRR.ENR_PICKUP_TS_UTC,OBU.ORG_TM_ZONE)  END AS ENR_PICKUP_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.CAR_REQ_TS ELSE DATETIME(CRR.CAR_REQ_TS_UTC,OBU.ORG_TM_ZONE)  END AS CAR_REQ_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST' OR CRR.REC_SRC = 'DAAS' THEN CRR.DLVR_SLOT_START_TS ELSE DATETIME(CRR.DLVR_SLOT_START_TS_UTC,OBU.ORG_TM_ZONE)  END AS DLVR_SLOT_START_TS_TZ
		,CASE WHEN OBU.ORG_TM_ZONE='MST' 
             THEN SOL.SLOT_START_TS
             ELSE DATETIME(SOL.SLOT_START_TS_UTC,OBU.ORG_TM_ZONE)  
	     END AS Slot_From_TS
		,CASE WHEN OBU.ORG_TM_ZONE='MST' THEN DRP.dropped_time_gmt ELSE DATETIME(DRP.dropped_time_gmt_UTC,OBU.ORG_TM_ZONE) END ORDER_DROP_TS
FROM  
		LMD_DA.CARRIER_DLVR_TRKSTS_V2 CRR
		LEFT JOIN LMD_DA.VOL_SALES_ORDER_LINE_V2 SOL 
		ON CRR.SALES_ORDER_NUM = SOL.SALES_ORDER_NUM
	 AND CRR.PO_NUM = SOL.PO_NUM
     LEFT JOIN 
	  (SELECT DISTINCT STORE_ID, SPARK_ZONE, CBSA FROM `LMD_DA.SPARK_ZONE_NEW` 
	  UNION ALL
	  SELECT DISTINCT STORE_ID, SPARK_ZONE, CBSA FROM LMD_DA.SPARK_ZONE_DAAS
	  )d 
     ON COALESCE(CAST(CRR.ORDER_PCKUP_PNT_ID AS STRING), CAST(SOL.STORE_ID AS STRING) ) = CAST(d.STORE_ID AS STRING)
	 LEFT JOIN LMD_DA.ORDER_PO_DROP_TIME_V2 DRP
	 ON SOL.SALES_ORDER_NUM = DRP.SALES_ORDER_NUM
	 AND SOL.PO_NUM = DRP.PO_NUM
	 LEFT JOIN
			(SELECT 
				    ORG_CD  
				   ,WM_DSTRBTR_NO
				   ,OG_MKT_ID
				   ,CASE
      				     WHEN ORG_TM_ZONE ='MDT' 
						 THEN 'US/Mountain'
			             WHEN ORG_TM_ZONE ='MST' 
						 THEN 'MST'
			             WHEN ORG_TM_ZONE ='PDT' 
						 THEN 'US/Pacific'
			             WHEN ORG_TM_ZONE ='PST' 
						 THEN 'US/Pacific'
			             WHEN ORG_TM_ZONE ='EST' 
						 THEN 'US/Eastern'
			             WHEN ORG_TM_ZONE ='EDT' 
						 THEN 'US/Eastern'
			             WHEN ORG_TM_ZONE ='CST' 
						 THEN 'US/Central'
			             WHEN ORG_TM_ZONE ='CDT' 
						 THEN 'US/Central'
			             WHEN ORG_TM_ZONE ='AKD' 
						 THEN 'US/Alaska'
			             WHEN ORG_TM_ZONE ='AKS' 
						 THEN 'US/Alaska'
			             WHEN ORG_TM_ZONE IN ('HAS','HST') 
						 THEN 'US/Aleutian'
			             ELSE 'US/Pacific'   
			        END AS ORG_TM_ZONE
				    ,REGION
			   FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_SHIP_NODE`
         WHERE ORG_TM_ZONE IS NOT NULL AND ACTV_IND=1
			) OBU 
	 --ON SH.SHIP_NODE_ORG_ID = OBU.ORG_ID
	 ON COALESCE(CAST(CRR.ORDER_PCKUP_PNT_ID AS STRING), CAST(SOL.STORE_ID AS STRING) ) = CAST(OBU.WM_DSTRBTR_NO AS STRING)
));


CREATE OR REPLACE TABLE LMD_DA.CUSTOMER_NPS_ORDER_RANKED_STAGE3
AS
(SELECT A.*
		,RDT.WM_WK
		,CASE 
		WHEN UPPER(REC_SRC) = 'DAAS' THEN 'DaaS'
		WHEN SVC_ID = 31 THEN 'GlassApp'
		ELSE 'OneApp' END AS APP_TYPE
FROM
(SELECT *,
		ROW_NUMBER() OVER (PARTITION BY SALES_ORDER_NUM ORDER BY Timestamp_comb DESC) RN
		from LMD_DA.CUSTOMER_NPS_ORDER_INFO_STAGE2 
		WHERE Timestamp_comb IS NOT NULL
)A
INNER JOIN LMD_DA.WMT_WEEK RDT 
ON  A.Slot_DT = RDT.CAL_DT	
WHERE A.RN = 1 
--AND A.SLOT_DT >= '2021-01-30'
AND A.SLOT_DT between DATE3 and current_date("US/Pacific") --TWO_MONTHS
);

CREATE OR REPLACE TABLE LMD_DA.CUSTOMER_NPS_FINAL
AS
(SELECT DISTINCT A.SALES_ORDER_NUM
,CASE WHEN C.SALES_ORDER_NUM IS NOT NULL THEN 'SPARK' ELSE 'NON-SPARK' END AS DSP
,TRIP_ID
,PO_NUM
,STORE_ID
--,CUSTOMER_ID
,FULFMT_TYPE_CD
,CARRIER_ORG_NM
,PICKER_TYPE_NM
,REC_SRC
,SVC_ID
,SPARK_ZONE
,APP_TYPE
,SLOT_DT
--,RSPNS_DT
,WM_WK
-- ,CUSTOMER_NPS_RATING
--,CUSTOMER_REVIEWS
,PROMOTERS
,DETRACTORS
,Total_Respondents
FROM LMD_DA.CUSTOMER_NPS_ORDER_RANKED_STAGE3 A
INNER JOIN LMD_DA.ORDER_CUSTOMER_NPS_DS_STAGE1 B
ON A.SALES_ORDER_NUM = B.SALES_ORDER_NUM
LEFT JOIN
(SELECT DISTINCT SALES_ORDER_NUM FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL
--WHERE CARRIER_DLVR_TS_TZ IS NOT NULL
) C
ON A.SALES_ORDER_NUM = C.SALES_ORDER_NUM
);


-- COMMENT THE FOLLOWING DELETE AND INSERT STATEMENT WHEN RUNNING A FULL_REFRESH. 
-- THIS TABLE BELOW IS BEING USED FOR LMD NPS DASHBOARD

   delete from LMD_DA.CUSTOMER_NPS2_SS where SLOT_DT between date_add(current_date("US/Pacific"),interval -7 day) and current_date("US/Pacific"); --TWO_MONTHS (DELETE COMMAND - COMMENT IT WHEN RUNNING FULL QUERY)
insert into LMD_DA.CUSTOMER_NPS2_SS
( SELECT A.*, B.WM_MTH_ID AS WALMART_MONTH, B.CAL_MTH_ID AS MONTH_NUM FROM
(
SELECT STORE_ID,WM_WK
,SLOT_DT
,CARRIER_ORG_NM
,PICKER_TYPE_NM
,DSP
,CASE
WHEN UPPER(REC_SRC) = 'DAAS' THEN 'DaaS'
WHEN FULFMT_TYPE_CD = 9 THEN 'OG Express Delivery'
WHEN FULFMT_TYPE_CD = 7 THEN 'OG Scheduled Delivery'
ELSE 'Dotcom Delivery' END AS FULFILMENT_TYPE
,SUM(PROMOTERS) AS PROMOTER_NUMBER
,SUM(DETRACTORS) AS DETRACTOR_NUMBER
,SUM(TOTAL_RESPONDENTS) AS RESPONSES_NUMBER
FROM LMD_DA.CUSTOMER_NPS_FINAL
where SLOT_DT between date_add(current_date("US/Pacific"),interval -7 day) and current_date("US/Pacific") --TWO_MONTHS
GROUP BY 1,2,3,4,5,6,7
) A JOIN
`wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_DT` B ON A.SLOT_DT = B.CAL_DT
);       
  

-- UNCOMMENT THE FOLLOWING CREATE STATEMENT WHEN RUNNING A FULL_REFRESH

 
--   CREATE OR REPLACE TABLE LMD_DA.CUSTOMER_NPS2_SS
-- AS( SELECT A.*, B.WM_MTH_ID AS WALMART_MONTH, B.CAL_MTH_ID AS MONTH_NUM FROM
-- (
-- SELECT STORE_ID,WM_WK
-- ,SLOT_DT
-- ,CARRIER_ORG_NM
-- ,PICKER_TYPE_NM
-- ,DSP
-- ,CASE
-- WHEN UPPER(REC_SRC) = 'DAAS' THEN 'DaaS'
-- WHEN FULFMT_TYPE_CD = 9 THEN 'OG Express Delivery'
-- WHEN FULFMT_TYPE_CD = 7 THEN 'OG Scheduled Delivery'
-- ELSE 'Dotcom Delivery' END AS FULFILMENT_TYPE
-- ,SUM(PROMOTERS) AS PROMOTER_NUMBER
-- ,SUM(DETRACTORS) AS DETRACTOR_NUMBER
-- ,SUM(TOTAL_RESPONDENTS) AS RESPONSES_NUMBER
-- FROM LMD_DA.CUSTOMER_NPS_FINAL
-- GROUP BY 1,2,3,4,5,6,7
-- ) A JOIN
-- `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_DT` B ON A.SLOT_DT = B.CAL_DT
-- );   
 



--Spark now drivers at zone date and slot level

CREATE OR REPLACE TABLE LMD_DA.SS_SPARK_NOW_DLY AS
( SELECT *, 
CASE WHEN ACTV_START_HR >=5 THEN ACTV_START_TS_CRCTD
              ELSE CAST(CONCAT(ACTV_START_DT,'T','05:00:00') AS DATETIME)
              END AS ACTV_START_TS_NORML,
CASE WHEN ACTL_END_HR <=22 THEN ACTL_ACTV_END_TS_CRCTD
              ELSE CAST(CONCAT(ACTL_END_DT,'T','22:00:00') AS DATETIME)
              END AS ACTV_END_TS_NORML
FROM
(
SELECT D.*, 
EXTRACT(DATE FROM ACTV_START_TS_CRCTD ) AS ACTV_START_DT,
EXTRACT(HOUR FROM ACTV_START_TS_CRCTD ) AS ACTV_START_HR,
EXTRACT(DATE FROM ACTL_ACTV_END_TS_CRCTD ) AS ACTL_END_DT,
CASE WHEN EXTRACT(MINUTE FROM ACTL_ACTV_END_TS_CRCTD ) > 0 THEN EXTRACT(HOUR FROM ACTL_ACTV_END_TS_CRCTD) + 1 ELSE EXTRACT(HOUR FROM ACTL_ACTV_END_TS_CRCTD) 
   END AS ACTL_END_HR,
DATETIME_DIFF(ACTL_ACTV_END_TS_CRCTD ,ACTV_START_TS_CRCTD, minute) as ACTV_TIME
FROM
(SELECT A.DRVR_USER_ID,
A.ACTV_DT,
CASE WHEN (OBU.ORG_TM_ZONE='MST' OR OBU.ORG_TM_ZONE IS NULL) THEN A.ACTV_START_TS ELSE DATETIME(A.ACTV_START_TS_UTC,OBU.ORG_TM_ZONE)  END AS ACTV_START_TS_CRCTD,
CASE WHEN (OBU.ORG_TM_ZONE='MST' OR OBU.ORG_TM_ZONE IS NULL) THEN A.EXPC_ACTV_END_TS ELSE DATETIME(A.EXPC_ACTV_END_TS_UTC,OBU.ORG_TM_ZONE)  END AS  EXPC_ACTV_END_TS_CRCTD,
CASE WHEN (OBU.ORG_TM_ZONE='MST' OR OBU.ORG_TM_ZONE IS NULL) THEN A.ACTL_ACTV_END_TS ELSE DATETIME(A.ACTL_ACTV_END_TS_UTC,OBU.ORG_TM_ZONE)  END AS ACTL_ACTV_END_TS_CRCTD,
A.ACTV_DUR_MIN_QTY,
B.WM_WK, C.STORE_ID, C.SPARK_ZONE,
C.Last_2_Wk_Orders
FROM
(SELECT DRVR_USER_ID, ACTV_START_TS_UTC, ACTV_START_TS, EXPC_ACTV_END_TS_UTC, EXPC_ACTV_END_TS, 
ACTL_ACTV_END_TS_UTC, ACTL_ACTV_END_TS, ACTV_DUR_MIN_QTY, CAST(ACTV_DT AS DATE) AS ACTV_DT
FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DRVR_APPLN_ACTV` 
WHERE ACTV_NM = 'ONLINE'
--AND ACTV_DT >= '2019-11-01' 
AND CAST(ACTV_DT AS DATE) between DATE1 and current_date("US/Pacific") --TWO_MONTHS
) A
INNER JOIN LMD_DA.WMT_WEEK B
ON A.ACTV_DT = B.CAL_DT
INNER JOIN 
(SELECT * FROM LMD_DA.DRVR_WEEK_METRICS
) C
ON A.DRVR_USER_ID = C.DRVR_USER_ID
AND CAST(B.WM_WK AS STRING) = CAST(C.WM_WK AS STRING)
LEFT JOIN
(SELECT 
                                                                    ORG_CD  
                                                                   ,WM_DSTRBTR_NO
                                                                   ,OG_MKT_ID
                                                                   ,CASE
                                                                    WHEN ORG_TM_ZONE ='MDT' 
                                                                                                 THEN 'US/Mountain'
                                                             WHEN ORG_TM_ZONE ='MST' 
                                                                                                 THEN 'MST'
                                                             WHEN ORG_TM_ZONE ='PDT' 
                                                                                                 THEN 'US/Pacific'
                                                             WHEN ORG_TM_ZONE ='PST' 
                                                                                                 THEN 'US/Pacific'
                                                             WHEN ORG_TM_ZONE ='EST' 
                                                                                                 THEN 'US/Eastern'
                                                             WHEN ORG_TM_ZONE ='EDT' 
                                                                                                 THEN 'US/Eastern'
                                                             WHEN ORG_TM_ZONE ='CST' 
                                                                                                 THEN 'US/Central'
                                                             WHEN ORG_TM_ZONE ='CDT' 
                                                                                                 THEN 'US/Central'
                                                             WHEN ORG_TM_ZONE ='AKD' 
                                                                                                 THEN 'US/Alaska'
                                                             WHEN ORG_TM_ZONE ='AKS' 
                                                                                                 THEN 'US/Alaska'
                                                             WHEN ORG_TM_ZONE IN ('HAS','HST') 
                                                                                                 THEN 'US/Aleutian'
                                                             ELSE 'US/Pacific'   
                                                        END AS ORG_TM_ZONE
                                                                    ,REGION
                                                   FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.ORG_SHIP_NODE`
         WHERE ORG_TM_ZONE IS NOT NULL AND PUT_IND IS NOT NULL
                                                ) OBU 
ON C.STORE_ID = OBU.WM_DSTRBTR_NO 
) D
));

create or replace table `wmt-edw-sandbox.LMD_DA.SS_SPARK_NOW_DLY` as (select * from `wmt-driver-insights.LMD_DA.SS_SPARK_NOW_DLY`);


CREATE OR REPLACE TABLE LMD_DA.SS_SPARK_NOW_HRS1_DLY AS
(SELECT C.ACTV_DT, A.HR AS ACT_HR, 
C.SPARK_ZONE, C.WM_WK,
COUNT(DISTINCT C.DRVR_USER_ID) AS SPARK_NOW_DRV_SLOT
FROM 
(SELECT DISTINCT ACTV_START_HR AS HR FROM LMD_DA.SS_SPARK_NOW_DLY
UNION ALL 
SELECT DISTINCT ACTL_END_HR AS HR FROM LMD_DA.SS_SPARK_NOW_DLY
) A
INNER JOIN 
(SELECT DISTINCT STORE_ID FROM LMD_DA.SS_SPARK_NOW_DLY) B
ON 1= 1
INNER JOIN LMD_DA.SS_SPARK_NOW_DLY C
ON B.STORE_ID = C.STORE_ID
AND A.HR >= C.ACTV_START_HR AND A.HR < C.ACTL_END_HR
GROUP BY 1,2,3,4
);

CREATE OR REPLACE TABLE LMD_DA.SS_SPARK_NOW_WK AS
(SELECT SPARK_ZONE, WM_WK,
COUNT(DISTINCT DRVR_USER_ID) AS SPARK_NOW_DRV_SLOT
FROM
(SELECT 
C.ACTV_DT, A.HR AS ACT_HR, 
C.SPARK_ZONE, C.WM_WK,
C.DRVR_USER_ID
FROM 
(SELECT DISTINCT ACTV_START_HR AS HR FROM LMD_DA.SS_SPARK_NOW_DLY
UNION ALL 
SELECT DISTINCT ACTL_END_HR AS HR FROM LMD_DA.SS_SPARK_NOW_DLY
) A
INNER JOIN 
(SELECT DISTINCT STORE_ID FROM LMD_DA.SS_SPARK_NOW_DLY) B
ON 1= 1
INNER JOIN 
(SELECT * FROM LMD_DA.SS_SPARK_NOW_DLY
WHERE ACTV_TIME > 15) C
ON B.STORE_ID = C.STORE_ID
AND A.HR >= C.ACTV_START_HR AND A.HR < C.ACTL_END_HR
)
GROUP BY 1,2
);


CREATE OR REPLACE TABLE LMD_DA.SS_SPARK_NOW_ZONE_DLY AS
(SELECT SPARK_ZONE, WM_DLY,
COUNT(DISTINCT DRVR_USER_ID) AS SPARK_NOW_DLY_DRV_SLOT
FROM
(SELECT 
C.ACTV_DT, A.HR AS ACT_HR, 
C.SPARK_ZONE, C.ACTV_DT AS WM_DLY,
C.DRVR_USER_ID
FROM 
(SELECT DISTINCT ACTV_START_HR AS HR FROM LMD_DA.SS_SPARK_NOW_DLY
UNION ALL 
SELECT DISTINCT ACTL_END_HR AS HR FROM LMD_DA.SS_SPARK_NOW_DLY
) A
INNER JOIN 
(SELECT DISTINCT STORE_ID FROM LMD_DA.SS_SPARK_NOW_DLY) B
ON 1= 1
INNER JOIN 
(SELECT * FROM LMD_DA.SS_SPARK_NOW_DLY
WHERE ACTV_TIME > 15) C
ON B.STORE_ID = C.STORE_ID
AND A.HR >= C.ACTV_START_HR AND A.HR < C.ACTL_END_HR
)
GROUP BY 1,2
);

create OR REPLACE table LMD_DA.ITEMS_QTY AS
(select 
  A.SALES_ORDER_NUM,
  A.PO_NUM, 
  COUNT(DISTINCT(CASE WHEN B.ACTL_PO_QTY>0 THEN B.UPC ELSE NULL END)) AS TOT_ITEMS  
from LMD_DA.VOL_SALES_ORDER_LINE_V2 AS A 
LEFT JOIN `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER_ITEM_360` AS B 
ON A.SALES_ORDER_NUM = B.SALES_ORDER_NUM 
AND A.PO_NUM = B.PO_NUM 
WHERE RPT_DT between DATE1 and current_date("US/Pacific")
GROUP BY 1,2
);

--Combining all metrics


 CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_1 AS 
(SELECT 
	DISTINCT A.* EXCEPT(PO_SHIP_COL, SHOPPER_PICK_PAYMENT, ESTIMATED_DISTANCE_AMT, DELIVERED_EXTRA_AMT, SURGE_PRICE_AMT,
						WAIT_TIME_AMT, RETURNED_AMT, BLANK_BONUS_AMT, ARRIVED_AT_STORE_AMT, BASE_PRICE_CAPPING_AMT,
						DELIVERED_OR_ATTEMPTED_AMT, ORDER_SIZE_AMT,EXTRA_HEAVY_ORDER_AMT, HEAVY_ORDER_AMT,
						APARTMENT_PYMT_AMT,
						ML_BASE_PRICE_AMT,ML_BASE_PRICE_CAPPING_AMT,
						ML_BASE_ADJUSTMENT,
						SHOPPER_EXPRESS,
						SHOPPER_BLANK_BONUS_AMT,
						SHOPPER_ENTRY_FEE_AMT,
						SHOPPER_UNITS_AMT,
						SHOPPER_EXIT_FEE_AMT,
						SHOPPER_TRIP_CAPPING_AMT,
						SHOPPER_ITEMS_AMT,
						EASY_RTNS_PARTIAL_AMT,
						EASY_RTNS_AMT
						,CANCELLATION_FEE
						,EST_SCHED_DRIVE_TIME_FEE_LMT
						,EST_UNSCHED_DRIVE_TIME_FEE_LMT,EST_UNSCHED_BILLABLE_WEIGHT_FEE, EST_SCHED_BILLABLE_WEIGHT_FEE ,EST_AE_BILLABLE_WEIGHT_FEE,CHAINING_COMPLEXITY_FEE,MARKET_FACTOR_AMT),
	CTPS.SHOPPER_PICK_PAYMENT ,
	CTPS.SHOPPER_BLANK_BONUS_AMT,
	CTPS.SHOPPER_ENTRY_FEE_AMT,
	CTPS.SHOPPER_UNITS_AMT,
	CTPS.SHOPPER_EXIT_FEE_AMT,
	CTPS.SHOPPER_TRIP_CAPPING_AMT,
	CTPS.SHOPPER_ITEMS_AMT,
	CTPS.SHOPPER_EXPRESS,
	CTP.ML_BASE_PRICE_AMT,CTP.ML_BASE_PRICE_CAPPING_AMT,
	CTP.ML_BASE_ADJUSTMENT, --vn53vov
	CTP.ESTIMATED_DISTANCE_AMT ,
	CTP.DELIVERED_EXTRA_AMT,
	CTP.SURGE_PRICE_AMT ,
	CTP.WAIT_TIME_AMT,
	CTP.RETURNED_AMT ,
	CTP.BLANK_BONUS_AMT ,
	CTP.ARRIVED_AT_STORE_AMT ,
	CTP.BASE_PRICE_CAPPING_AMT ,
	CTP.DELIVERED_OR_ATTEMPTED_AMT ,
	CTP.ORDER_SIZE_AMT ,
	COALESCE(CTP.EXTRA_HEAVY_ORDER_AMT,0) AS EXTRA_HEAVY_ORDER_AMT, 
	COALESCE(CTP.HEAVY_ORDER_AMT ,0) AS HEAVY_ORDER_AMT, 
	COALESCE(CTP.APARTMENT_PYMT_AMT,0) APARTMENT_PYMT_AMT, 
	COALESCE(CTP.EASY_RTNS_AMT,0) EASY_RTNS_AMT,
	COALESCE(CTP.EASY_RTNS_PARTIAL_AMT,0) EASY_RTNS_PARTIAL_AMT,
	COALESCE(CTP.CANCELLATION_FEE,0) CANCELLATION_FEE,
	COALESCE(CTP.EST_SCHED_DRIVE_TIME_FEE_LMT,0) EST_SCHED_DRIVE_TIME_FEE_LMT,
	COALESCE(CTP.EST_UNSCHED_DRIVE_TIME_FEE_LMT,0) EST_UNSCHED_DRIVE_TIME_FEE_LMT,
	COALESCE(CTP.EST_UNSCHED_BILLABLE_WEIGHT_FEE,0) EST_UNSCHED_BILLABLE_WEIGHT_FEE,
	COALESCE(CTP.EST_SCHED_BILLABLE_WEIGHT_FEE,0) EST_SCHED_BILLABLE_WEIGHT_FEE,
	COALESCE(CTP.EST_AE_BILLABLE_WEIGHT_FEE,0) EST_AE_BILLABLE_WEIGHT_FEE,
	COALESCE(CTP.CHAINING_COMPLEXITY_FEE,0) CHAINING_COMPLEXITY_FEE,
	COALESCE(CTP.MARKET_FACTOR_AMT,0) MARKET_FACTOR_AMT,
	COALESCE(CTP.SURGE_PRICE_AMT,B.BONUS_PAYMENT,0) AS BONUS_PAYMENT,
--  coalesce(((B.PYMT_TRANS_AMT-CTP.SURGE_PRICE_AMT)-COALESCE(CTP.SHOPPER_PICK_PAYMENT,0)),B.ORDER_PAYMENT,0) AS ORDER_PAYMENT,

	COALESCE((CTP.ESTIMATED_DISTANCE_AMT+ CTP.DELIVERED_EXTRA_AMT+ CTP.WAIT_TIME_AMT+ 
			CTP.RETURNED_AMT+ CTP.BLANK_BONUS_AMT+ CTP.ARRIVED_AT_STORE_AMT+CTP.BASE_PRICE_CAPPING_AMT+
			CTP.DELIVERED_OR_ATTEMPTED_AMT+CTP.ORDER_SIZE_AMT+COALESCE(CTP.ML_BASE_PRICE_AMT,0)+COALESCE(CTP.ML_BASE_PRICE_CAPPING_AMT,0)
			+COALESCE(CTPS.SHOPPER_EXPRESS,0)
			+COALESCE(CTPS.SHOPPER_TRIP_CAPPING_AMT,0)
			+COALESCE(CTP.ML_BASE_ADJUSTMENT,0)
			+COALESCE(CTP.EXTRA_HEAVY_ORDER_AMT,0)
			+COALESCE(CTP.HEAVY_ORDER_AMT,0)
			+COALESCE(CTP.APARTMENT_PYMT_AMT,0)
			+COALESCE(CTP.EASY_RTNS_AMT,0)
			+COALESCE(CTP.EASY_RTNS_PARTIAL_AMT,0)
			+coalesce(CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.HLTH_CARE_AMT ELSE DV2.HLTH_CARE_AMT END,0)
			+coalesce(CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.MISSING_ORDR_AMT ELSE DV2.MISSING_ORDR_AMT END,0)
			+COALESCE(CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.ERNGS_ADJ_AMT ELSE DV2.ERNGS_ADJ_AMT END,0)
			+COALESCE(CTP.CANCELLATION_FEE,0) 
			+COALESCE(CTP.EST_SCHED_DRIVE_TIME_FEE_LMT,0)
			+COALESCE(CTP.EST_UNSCHED_DRIVE_TIME_FEE_LMT,0) +COALESCE(CTP.EST_UNSCHED_BILLABLE_WEIGHT_FEE,0) + COALESCE(CTP.EST_SCHED_BILLABLE_WEIGHT_FEE,0)
			+ COALESCE(CTP.EST_AE_BILLABLE_WEIGHT_FEE,0) +COALESCE(CTP.CHAINING_COMPLEXITY_FEE,0) + COALESCE(CTP.MARKET_FACTOR_AMT,0)
			)
			,(B.ORDER_PAYMENT+COALESCE(CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.ERNGS_ADJ_AMT ELSE DV2.ERNGS_ADJ_AMT END,0)),0) AS ORDER_PAYMENT,  

	C.TIP_PAYMENT,
	CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.MISSING_ORDR_AMT ELSE DV2.MISSING_ORDR_AMT END as MISSING_ORDR_AMT,
	CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.GUAR_PYMNT_AMT ELSE DV2.GUAR_PYMNT_AMT END as GUAR_PYMNT_AMT,
	CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.HLTH_CARE_AMT ELSE DV2.HLTH_CARE_AMT END as HLTH_CARE_AMT,
	CASE WHEN A.SLOT_DT <= '2022-07-31' THEN DV1.MNUAL_BLK_BNS_PYMT ELSE DV2.MNUAL_BLK_BNS_PYMT END as MNUAL_BLK_BNS_PYMT,
	DV2.Tip_coverage,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.INCENTIVE_AMT ELSE DV2.INCENTIVE_AMT END AS INCENTIVE_AMT,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.SHOPPER_INCENTIVE ELSE DV2.SHOPPER_INCENTIVE END as SHOPPER_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.ACQ_INCENTIVE ELSE DV2.ACQ_INCENTIVE END as ACQ_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.RFR_INCENTIVE ELSE DV2.RFR_INCENTIVE END as RFR_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.ERNGS_ADJ_AMT ELSE DV2.ERNGS_ADJ_AMT END as ERNGS_ADJ_AMT,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.Launch_INCENTIVE ELSE DV2.Launch_INCENTIVE END  as Launch_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.DNM_INCENTIVE ELSE DV2.DNM_INCENTIVE END as DNM_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.REACTIVATION_INCENTIVE ELSE DV2.REACTIVATION_INCENTIVE END as REACTIVATION_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.SUNDAY_CHURN_INCENTIVE ELSE DV2.SUNDAY_CHURN_INCENTIVE END as SUNDAY_CHURN_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.DOTCOM_INCENTIVE  ELSE DV2.DOTCOM_INCENTIVE  END as DOTCOM_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.SPECIAL_INCENTIVE ELSE DV2.SPECIAL_INCENTIVE END as SPECIAL_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.MORNING_STORE_INCENTIVE ELSE DV2.MORNING_STORE_INCENTIVE END as MORNING_STORE_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.EVENING_STORE_INCENTIVE ELSE DV2.EVENING_STORE_INCENTIVE END as EVENING_STORE_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.STORE_INCENTIVE ELSE DV2.STORE_INCENTIVE END as STORE_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.MORNING_ZONE_INCENTIVE ELSE DV2.MORNING_ZONE_INCENTIVE END  as MORNING_ZONE_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.EVENING_ZONE_INCENTIVE ELSE DV2.EVENING_ZONE_INCENTIVE END  as EVENING_ZONE_INCENTIVE,
	CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.Zone_Incentive ELSE DV2.Zone_Incentive END as Zone_Incentive,
    CASE WHEN A.SLOT_DT <='2022-07-31' THEN DV1.joyrun_incentive ELSE DV2.joyrun_incentive END as joyrun_incentive,
	E.SPARK_BATCH_FLAG,
	OFFER_PUBLISHED
	,ACCEPTED
	,DROPPED
	,REJECTED
	,EXPIRED
	,OFFER_BROADCASTED
	,BROADCAST_ACCEPTED
	,BROADCAST_DROPPED
	,BROADCAST_REJECTED
	,BROADCAST_EXPIRED
	,OFFER_BROADCASTED_WITH_SURGE
	,BROADCAST_WITH_SURGE_ACCEPTED
	,BROADCAST_WITH_SURGE_DROPPED
	,BROADCAST_WITH_SURGE_REJECTED
	,BROADCAST_WITH_SURGE_EXPIRED
	,THIRD_PARTY_OFFER_PUBLISH
	,THIRD_PARTY_EXPIRED
	,ST.store_classification
	,NPF.PROMOTERS   AS NPS_Promoters,			
	NPF.DETRACTORS   AS NPS_Detractors,
	NPF.Total_Respondents   AS NPS_Total_Respondents,
	SAT.SDSAT_DEN,
	SAT.SDSAT_NUM,
  --CANC.NO_DRV_CANC,
	CASE WHEN (CANC.cancel_Sub_category IN ('Case4: No Driver', 'Case2: Express Coldchain, Driver Late or did not arrive')
			OR (CANC.cancel_Sub_category IN ('Exclude1: Did not request Carrier') AND FIRST_OFFER_PUBLISH_TS_TZ IS NOT NULL))
			AND AT_PICKUP_TS_TZ IS NULL THEN 1 
		ELSE 0 
		END AS NO_DRV_CANC_OLD,
	STR_HST.POSTAL_CD,
	STR_HST.LAT_NBR,
	STR_HST.LONG_NBR,
	NW.SPARK_NOW_DRV_SLOT,
	ZD.SPARK_NOW_DLY_DRV_SLOT,
	CASE WHEN UPPER(STS_DESC)='CANCELLED' THEN CANC.CANCEL_CATEGORY ELSE 'NOT CANCELLED' END AS CANCEL_CATEGORY,
	CASE WHEN UPPER(STS_DESC)='CANCELLED' THEN CANC.CANCEL_SUB_CATEGORY ELSE 'NOT CANCELLED' END AS CANCEL_SUB_CATEGORY,
	NP.DCSAT_promoters,
	NP.DCSAT_Total_respondents,
	NP.DCSAT_ONEAPP_promoters,
	NP.DCSAT_ONEAPP_Total_respondents,
	NP.DCSAT_GLASS_promoters,
	NP.DCSAT_GLASS_Total_respondents,
	NP.DCSAT_COMMENTS,
	ITM.TOT_ITEMS
FROM LMD_DA.TRIP_PO_LIST A
LEFT JOIN LMD_DA.TRIP_PAYMENT_TEMP  B
	ON A.DRVR_USER_ID = B.DRVR_USER_ID
	AND A.TRIP_ID = B.TRIP_ID
LEFT JOIN LMD_DA.TIP_PAYMENT_TEMP C
	ON A.SALES_ORDER_NUM = C.SALES_ORDER_NUM
	AND A.DRVR_USER_ID = C.DRVR_USER_ID
LEFT JOIN LMD_DA.SPARK_PAYMENT_INCENT_DRVR_WK_V1 DV1
	ON A.DRVR_USER_ID = DV1.DRVR_USER_ID
	AND cast(A.WM_WK as numeric) = cast(DV1.wm_wk as numeric)
LEFT JOIN LMD_DA.SPARK_PAYMENT_INCENT_DRVR_WK_V2 DV2
	ON A.DRVR_USER_ID = DV2.DRVR_USER_ID 
	AND COALESCE(A.TRIP_ID,'0') = COALESCE(DV2.TRIP_ID,'0') 
	AND A.wm_wk = DV2.wm_wk  -- need to add on wm_wk as well
LEFT JOIN LMD_DA.BATCH_ORDERS E
	ON A.TRIP_ID = E.TRIP_ID
LEFT JOIN LMD_DA.OFFER_METRICS F
	ON A.TRIP_ID = F.DLVR_OFFR_TRIP_ID
	AND A.SALES_ORDER_NUM = F.SALES_ORDER_NUM
LEFT JOIN LMD_DA.usf_launch_store_framework_spark ST   -- updated as the table not found inside DI
    ON a.store_id = ST.store_id 
	AND a.cbsa = ST.cbsa 
	AND a.spark_zone = ST.spark_zone
LEFT JOIN LMD_DA.SPARK_DEL_DS RAT  -- updated as the table not found inside DI
	ON A.SALES_ORDER_NUM= RAT.SALES_ORDER_NUM
LEFT JOIN LMD_DA.ORDER_DCSAT_DS	NP
	ON A.PO_SHIP_COL = NP.po_num
LEFT JOIN LMD_DA.CUSTOMER_NPS_FINAL NPF
	ON A.SALES_ORDER_NUM=NPF.SALES_ORDER_NUM
	AND A.TRIP_ID=NPF.TRIP_ID
	AND A.PO_NUM=NPF.PO_NUM
LEFT JOIN LMD_DA.CARR_DRVR_TRIP_PYMT  CTP
	ON IFNULL(A.DRVR_USER_ID, '0') = IFNULL(CTP.DRVR_USER_ID, '0')
	AND A.TRIP_ID = CTP.TRIP_ID
LEFT JOIN LMD_DA.CARR_DRVR_TRIP_PYMT_SHOPPER  CTPS
	ON IFNULL(A.DRVR_USER_ID, '0') = IFNULL(CTPS.DRVR_USER_ID, '0')
	AND A.TRIP_ID = CTPS.TRIP_ID
	AND A.PICKER_TYPE_NM = CTPS.PICKER_TYPE_NM
LEFT JOIN
	(SELECT 
		ORDER_ID,
		MAX(CASE WHEN ST.RATINGS IS NOT NULL THEN 1 ELSE 0 END) AS SDSAT_DEN,
		MAX(CASE WHEN ST.RATINGS = 2 THEN 1 ELSE 0 END) AS SDSAT_NUM
	FROM LMD_DA.TRE_ST_SDSAT ST -- updated as the table not found inside DI
	GROUP BY 1
	) SAT
	ON A.SALES_ORDER_NUM = SAT.ORDER_ID
LEFT JOIN 
	(SELECT * FROM `LMD_DA.SPARK_LMD_DRIVER_Cancellation_rsn` WHERE UPPER(CANCEL_CATEGORY)<>'NOT CANCELLED')CANC
	ON A.SALES_ORDER_NUM = CANC.SALES_ORDER_NUM
	AND A.TRIP_ID = CANC.TRIP_ID
LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST` STR_HST
	ON A.STORE_ID=STR_HST.STORE_NBR 
LEFT JOIN LMD_DA.SS_SPARK_NOW_WK NW
	ON A.SPARK_ZONE = NW.SPARK_ZONE
	AND A.WM_WK=NW.WM_WK
LEFT JOIN LMD_DA.SS_SPARK_NOW_ZONE_DLY ZD
	ON A.SPARK_ZONE = ZD.SPARK_ZONE
	AND A.Slot_Dt=ZD.WM_DLY
LEFT JOIN LMD_DA.ITEMS_QTY ITM
	ON A.SALES_ORDER_NUM=ITM.SALES_ORDER_NUM
	AND A.PO_NUM = ITM.PO_NUM
WHERE STR_HST.CURR_IND=1
  );


create or replace table LMD_DA.OPDD_ZONE_WEEK AS( select aa.*, b.max_OPDD_rank , 
case 
when (OPDD_rank/max_OPDD_rank) >= 0 and   (OPDD_rank/max_OPDD_rank) < 0.1   then '0-10%' 
when (OPDD_rank/max_OPDD_rank) >= 0.1 and (OPDD_rank/max_OPDD_rank) < 0.2 then '10-20%' 
when (OPDD_rank/max_OPDD_rank) >= 0.2 and (OPDD_rank/max_OPDD_rank) < 0.3 then '20-30%' 
when (OPDD_rank/max_OPDD_rank) >= 0.3 and (OPDD_rank/max_OPDD_rank) < 0.4 then '30-40%' 
when (OPDD_rank/max_OPDD_rank) >= 0.4 and (OPDD_rank/max_OPDD_rank) < 0.5 then '40-50%' 
when (OPDD_rank/max_OPDD_rank) >= 0.5 and (OPDD_rank/max_OPDD_rank) < 0.6 then '50-60%' 
when (OPDD_rank/max_OPDD_rank) >= 0.6 and (OPDD_rank/max_OPDD_rank) < 0.7 then '60-70%' 
when (OPDD_rank/max_OPDD_rank) >= 0.7 and (OPDD_rank/max_OPDD_rank) < 0.8 then '70-80%' 
when (OPDD_rank/max_OPDD_rank) >= 0.8 and (OPDD_rank/max_OPDD_rank) < 0.9 then '80-90%' 
when (OPDD_rank/max_OPDD_rank) >= 0.9 and (OPDD_rank/max_OPDD_rank) <= 1 then '90-100%'  else null end as opdd_bucket

from 
( 
select a.*, dense_rank() over( partition by cast(wm_wk as int64) order by round(safe_divide(opdd_num, opdd_den), 2) desc) as  OPDD_rank from (
SELECT WM_WK, SPARK_ZONE, CBSA, COUNT( DISTINCT ( CASE WHEN lower(CARRIER_ORG_NM) like '%spark%' and CARRIER_DLVR_TS_TZ is not null then sales_order_num else null end )) as opdd_num, 
COUNT( DISTINCT ( CASE WHEN lower(CARRIER_ORG_NM) like '%spark%'  then DRVR_USER_ID else null end)) as opdd_den from 
LMD_DA.SPARK_DELIVERY_DS_1 group by 1,2,3) a ) aa

left join 
(select wm_wk, max(OPDD_rank) as   max_OPDD_rank from ( 
select a.*, dense_rank() over( partition by cast(wm_wk as int64) order by round(safe_divide(opdd_num, opdd_den), 2) desc) as  OPDD_rank from (
SELECT WM_WK, SPARK_ZONE, CBSA, COUNT( DISTINCT ( CASE WHEN lower(CARRIER_ORG_NM) like '%spark%' and CARRIER_DLVR_TS_TZ is not null then sales_order_num else null end )) as opdd_num, 
COUNT( DISTINCT ( CASE WHEN lower(CARRIER_ORG_NM) like '%spark%'  then DRVR_USER_ID else null end)) as opdd_den from 
LMD_DA.SPARK_DELIVERY_DS_1 group by 1,2,3) a ) cc group by 1 ) b  on 
aa.wm_wk = b.wm_wk   ); 



CREATE OR REPLACE TABLE LMD_DA.drvr_trip_dtl AS (
SELECT trip_id, store_id, spark_zone, slot_dt,  drvr_user_id
,MIN(slot_from_ts) slot_from_ts ,MIN(CAR_REQ_TS_TZ) CR_TS  ,MIN(ENR_PICKUP_TS_TZ) EP_TS  ,MIN(AT_PICKUP_TS_TZ) AP_TS ,MIN(ENR_DROPOFF_TS_TZ) ED_TS ,
MAX(AT_DROPOFF_TS_TZ) AD_TS ,MAX(CARRIER_DLVR_TS_TZ) DL_TS  ,MAX(ENR_RETURN_TS_TZ) ER_TS , MAX(RETURNED_TS_TZ) RT_TS
,MIN(ENR_PICKUP_TS_TZ) start_ts, 
MAX(coalesce(CARRIER_DLVR_TS_TZ,RETURNED_TS_TZ,ENR_RETURN_TS_TZ, AT_DROPOFF_TS_TZ,ENR_DROPOFF_TS_TZ,AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ))
AS end_ts, 
MIN(REC_SRC) REC_SRC
FROM LMD_DA.SPARK_DELIVERY_DS_1 a GROUP BY 1,2,3,4,5 );

-- trip details of spark drvrs
CREATE OR REPLACE TABLE LMD_DA.drvr_trip_dtl_spark_drvr AS (
SELECT trip_id, store_id, spark_zone, slot_dt,  drvr_user_id
,MIN(slot_from_ts) slot_from_ts ,MIN(CAR_REQ_TS_TZ) CR_TS  ,MIN(ENR_PICKUP_TS_TZ) EP_TS  ,MIN(AT_PICKUP_TS_TZ) AP_TS ,MIN(ENR_DROPOFF_TS_TZ) ED_TS ,
MAX(AT_DROPOFF_TS_TZ) AD_TS ,MAX(CARRIER_DLVR_TS_TZ) DL_TS  ,MAX(ENR_RETURN_TS_TZ) ER_TS , MAX(RETURNED_TS_TZ) RT_TS
,MIN(CAR_REQ_TS_TZ) start_ts,
CASE WHEN  
date(MAX(coalesce(RETURNED_TS_TZ,ENR_RETURN_TS_TZ, CARRIER_DLVR_TS_TZ, AT_DROPOFF_TS_TZ,ENR_DROPOFF_TS_TZ,AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ))) > date(MIN(CAR_REQ_TS_TZ))
THEN (CASE WHEN MAX(FMT_TYPE) = 7 THEN date_add(MIN(CAR_REQ_TS_TZ),interval  90 minute)
			WHEN MAX(FMT_TYPE) = 9 THEN date_add(MIN(CAR_REQ_TS_TZ),interval 60 minute)
			WHEN (MAX(FMT_TYPE) NOT IN (7,9) OR MAX(FMT_TYPE) IS NULL) THEN date_add(MIN(CAR_REQ_TS_TZ),interval 300 minute)
		END)
		ELSE  MAX(coalesce(RETURNED_TS_TZ,ENR_RETURN_TS_TZ, CARRIER_DLVR_TS_TZ, AT_DROPOFF_TS_TZ,ENR_DROPOFF_TS_TZ,AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ)) END
AS end_ts, 
MAX(coalesce(RETURNED_TS_TZ,ENR_RETURN_TS_TZ, CARRIER_DLVR_TS_TZ, AT_DROPOFF_TS_TZ,ENR_DROPOFF_TS_TZ,AT_PICKUP_TS_TZ, ENR_PICKUP_TS_TZ)) as  orig_end_ts,
MIN(REC_SRC) REC_SRC
FROM LMD_DA.SPARK_DELIVERY_DS_1 a 
WHERE UPPER(CARRIER_ORG_NM) = 'SPARK'
GROUP BY 1,2,3,4,5 );



CREATE OR REPLACE TABLE LMD_DA.s1s2s3s4 AS ( 
WITH  s1 AS   
	( select a.*,  datetime_diff(start_ts, end_lag_time, MINUTE) time_gap from (
	SELECT 
	a.* 	, MIN(start_ts) OVER(PARTITION BY DRVR_USER_ID, slot_dt ORDER BY start_ts ASC ROWS 1 PRECEDING) start_lag_time
	, MIN(end_ts) OVER(PARTITION BY DRVR_USER_ID, slot_dt ORDER BY end_ts ASC ROWS 1 PRECEDING) end_lag_time
	FROM  LMD_DA.drvr_trip_dtl_spark_drvr a 	
	WHERE start_ts IS NOT NULL 
	)a )
,s2 AS 
	(SELECT s1.*, s1b.circuit_ID FROM s1
	LEFT JOIN (
	SELECT  s1.trip_id,slot_dt,  RANK() OVER(PARTITION BY DRVR_USER_ID, slot_dt ORDER BY end_ts )  +1 circuit_ID
	FROM s1
	WHERE (time_gap) >  180
	) s1b
	ON  s1b.trip_id=s1.trip_id
	and s1b.slot_dt=s1.slot_dt)
 ,s3 AS 
	(SELECT s2.*, MIN(circuit_ID) OVER(PARTITION BY DRVR_USER_ID, slot_dt ORDER BY end_ts ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING ) min_circuit_id
	,MAX(circuit_ID) OVER(PARTITION BY DRVR_USER_ID,slot_dt ) AS max_circuit_id
	FROM s2)
,s4 AS 
	(SELECT s3.*
	,CASE 
		WHEN max_circuit_id IS NULL THEN 1
		WHEN min_circuit_id IS NULL THEN max_circuit_id
		WHEN circuit_ID IS NULL THEN min_circuit_id-1 ELSE circuit_ID END AS fin_circuit_ID FROM s3
	)
SELECT trip_id, store_id, spark_zone, slot_dt, slot_from_ts, drvr_user_id
,start_ts , end_ts ,end_lag_time ,time_gap ,fin_circuit_ID
, b.CR_TS ,b.EP_TS ,b.AP_TS ,b.ED_TS ,b.AD_TS ,b.DL_TS ,b.ER_TS ,b.RT_TS
 FROM s4 b
);

CREATE OR REPLACE TABLE LMD_DA.s1s2s3s4s5 AS (
WITH s5 AS
	( 	SELECT  DRVR_USER_ID, slot_dt, fin_circuit_ID,  COUNT(DISTINCT trip_id) AS trips, MIN(START_ts) START_ts
	,MAX(END_ts) END_ts 	, SUM(datetime_diff(END_ts,start_ts, MINUTE )) min_time
	FROM LMD_DA.s1s2s3s4  	GROUP BY 1,2,3 	)
SELECT s5.*, datetime_diff(END_ts, start_ts, MINUTE) Total_time_spent FROM s5  );   

CREATE OR REPLACE TABLE LMD_DA.s1s2s3s4s56 AS
	( 	SELECT  DRVR_USER_ID, slot_dt,sum(Total_time_spent)  Total_time_spent , sum(min_time) min_time
	from   LMD_DA.s1s2s3s4s5 group by 1, 2 ) ; 
	
CREATE OR REPLACE TABLE LMD_DA.driver_rows AS   (
select DRVR_USER_ID, slot_dt , count(distinct trip_id||sales_order_num||coalesce(po_num,'-0')) as rows_total 
FROM 
(SELECT DISTINCT a.* 
EXCEPT( CANCEL_SUB_CATEGORY,CANCEL_CATEGORY)
 FROM LMD_DA.SPARK_DELIVERY_DS_1 a) GROUP BY 1,2 
 );

--updated code for Driver utilisation

CREATE OR REPLACE TABLE LMD_DA.drvr_trip_dt2 AS (
SELECT * FROM(
SELECT * ,
RANK ()OVER(PARTITION BY DRVR_USER_ID, slot_dt,cr_ts order by DIFFERENCE_MINUTES ) as rank_col
FROM(
SELECT DRVR_USER_ID, slot_dt, end_ts, CR_TS, DL_TS, ACTV_START_TS_NORML as ORG_ON_TS,
ACTV_END_TS_NORML as ORG_OFF_TS,
--LEAD(ACTV_START_TS_NORML,1) OVER(PARTITION BY DRVR_USER_ID,ACTV_DT ORDER BY ACTV_START_TS_NORML) as NXT_ON_TS,
ABS(DATETIME_DIFF(CR_TS,ACTV_START_TS_NORML,minute)) AS DIFFERENCE_MINUTES,
OFF_TS, ON_TS, NXT_ON_TS, REC_SRC, RT_TS
from(
SELECT A.*, ACTV_START_TS_NORML,ACTV_END_TS_NORML,ACTV_DT,OFF_TS, ON_TS, NXT_ON_TS
FROM
 LMD_DA.drvr_trip_dtl_spark_drvr A
LEFT JOIN  
( 
SELECT *,
 --MAX( ACTV_END_TS_NORML ,NXT_OFF_TS)
CASE WHEN ACTV_END_TS_NORML > NXT_ON_TS THEN 
               CASE WHEN ACTV_END_TS_NORML >NXT_OFF_TS
               THEN ACTV_END_TS_NORML 
                ELSE NXT_OFF_TS END
 ELSE ACTV_END_TS_NORML
 END AS OFF_TS,
CASE WHEN ACTV_START_TS_NORML < PREV_OFF_TS THEN NULL ELSE ACTV_START_TS_NORML END AS ON_TS 
FROM(
SELECT * ,
LEAD(ACTV_START_TS_NORML,1) OVER(PARTITION BY DRVR_USER_ID,ACTV_DT ORDER BY ACTV_START_TS_NORML) as NXT_ON_TS,
LEAD(ACTV_END_TS_NORML,1) OVER(PARTITION BY DRVR_USER_ID,ACTV_DT ORDER BY ACTV_END_TS_NORML) as NXT_OFF_TS,
LAG(ACTV_END_TS_NORML,1) OVER(PARTITION BY DRVR_USER_ID,ACTV_DT ORDER BY ACTV_END_TS_NORML) as PREV_OFF_TS
FROM  LMD_DA.SS_SPARK_NOW_DLY
)) B
ON 
 A.slot_dt = B.ACTV_DT	AND
 A.drvr_user_id = B.drvr_user_id
 )
 where ON_TS is not null
)
WHERE CR_TS >= ON_TS
)
WHERE RANK_COL=1
--AND drvr_user_id='jason_p03@yahoo.com' AND SLOT_DT='2021-12-17'
--   LIMIT 50
);

-- to calc active hours from spark-now ON and OFF timestamps
CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_1 as(
SELECT * FROM 
(
SELECT A.DRVR_USER_ID,ACTV_DT,
SUM(DATETIME_DIFF(ACTV_END_TS_NORML,ACTV_START_TS_NORML, minute)) AS Total_time_spent_1
FROM (SELECT * FROM LMD_DA.SS_SPARK_NOW_DLY
		WHERE ACTV_DUR_MIN_QTY >= 0) A
JOIN 
(SELECT * FROM (
SELECT DRVR_USER_ID,slot_dt, MIN(end_ts) end_ts 
FROM LMD_DA.drvr_trip_dtl_spark_drvr
GROUP BY 1,2
) 
WHERE end_ts IS NOT NULL ) B
ON A.ACTV_DT = B.slot_dt
AND A.DRVR_USER_ID = B.drvr_user_id
WHERE EXTRACT(DATE FROM ACTV_END_TS_NORML) = EXTRACT(DATE FROM ACTV_START_TS_NORML)
--AND drvr_user_id='jason_p03@yahoo.com' AND SLOT_DT='2021-12-17'
GROUP BY 1,2)
WHERE Total_time_spent_1 > 0
);

--to exclude active hours from the days where the driver has not accepted RR-offers received 
-- CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_1a as(
-- SELECT A.DRVR_USER_ID,ACTV_DT,
-- SUM(DATETIME_DIFF(ACTV_END_TS_NORML,ACTV_START_TS_NORML, minute)) AS Total_time_spent_1a
-- FROM LMD_DA.SS_SPARK_NOW_DLY A
-- JOIN 
-- (SELECT DRVR_USER_ID, CAST(DLVR_OFFR_CRE_TS AS DATE) AS DLVR_OFFR_CRE_DT, COUNT(DISTINCT DLVR_OFFR_TRIP_ID) AS RR_COUNT
-- FROM LMD_DA.OFFERS
-- WHERE DLVR_OFFR_STS_NM = 'OFFER_PUBLISHED'
-- GROUP BY 1,2
-- HAVING COUNT(DISTINCT DLVR_OFFR_TRIP_ID) >=2 ) B
-- ON A.DRVR_USER_ID = B.DRVR_USER_ID
-- AND A.ACTV_DT = B.DLVR_OFFR_CRE_DT
-- JOIN 
-- (SELECT drvr_user_id, slot_dt
-- FROM LMD_DA.drvr_trip_dtl
-- WHERE CR_TS IS NULL) C
-- ON A.DRVR_USER_ID = C.drvr_user_id
-- AND A.ACTV_DT = C.slot_dt
-- WHERE EXTRACT(DATE FROM ACTV_END_TS_NORML) = EXTRACT(DATE FROM ACTV_START_TS_NORML)
-- GROUP BY 1,2
-- );


-- to calc time spent on deliveries made upto 90 Minutes post OFF-time (for WM)
CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_2 as (
select DRVR_USER_ID,slot_dt,sum(Total_time_spent) AS Total_time_spent_2 from(
SELECT * 
FROM(
SELECT DISTINCT *,
DATETIME_DIFF( end_ts, OFF_TS, minute) AS Total_time_spent
 FROM LMD_DA.drvr_trip_dt2
WHERE REC_SRC = 'DISPATCHER'
  AND end_ts > OFF_TS  AND (end_ts < NXT_ON_TS OR NXT_ON_TS IS NULL)
  
))
--order by 1  
WHERE Total_time_spent <=90
group by 1,2
) ;  
   
   
-- to consider orders accepted upto 60 minutes before ON-time (for WM)
-- CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_3 as (
-- select DRVR_USER_ID,slot_dt,sum(Total_time_spent) AS Total_time_spent_3 from(
-- SELECT * 
-- FROM(
-- SELECT DISTINCT *,
	-- CASE WHEN NXT_ON_TS IS NULL THEN 0
	-- ELSE DATETIME_DIFF(NXT_ON_TS, CR_TS, minute)
	-- END AS Total_time_spent
 -- FROM LMD_DA.drvr_trip_dt2
  -- WHERE REC_SRC = 'DISPATCHER'
-- AND CR_TS > OFF_TS AND (CR_TS < NXT_ON_TS OR NXT_ON_TS IS NULL)
-- )
-- WHERE Total_time_spent <=60
-- AND (DL_TS IS NOT NULL OR RT_TS IS NOT NULL)
-- order by 1
-- )
-- group by 1,2
-- ) ;  


-- to include window between OFF_TS AND NXT_ON_TS in case of on-going deliveries (for WM)
CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_4 as (
select DRVR_USER_ID,slot_dt,sum(Total_time_spent_4) AS Total_time_spent_4 from(
SELECT * 
FROM(
SELECT DISTINCT *,  
CASE WHEN NXT_ON_TS IS NULL THEN 0 ELSE DATETIME_DIFF(NXT_ON_TS, OFF_TS, minute) END AS Total_time_spent_4
 FROM LMD_DA.drvr_trip_dt2
  WHERE REC_SRC = 'DISPATCHER'
--WHERE end_ts > NXT_ON_TS  AND CR_TS < OFF_TS
AND DL_TS > NXT_ON_TS
AND CR_TS < OFF_TS 
)
--order by 1 desc
)
group by 1,2
) ;  
	
   
-- to calc time spent on DaaS deliveries made during Inactive-time 
CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_5 as (
select DRVR_USER_ID,slot_dt,sum(Total_time_spent_5) AS Total_time_spent_5 from(
SELECT * 
FROM(
SELECT DISTINCT *,
CASE
WHEN CR_TS < ON_TS AND end_ts > ON_TS THEN DATETIME_DIFF(ON_TS, CR_TS, minute)
WHEN CR_TS < ON_TS AND end_ts < ON_TS THEN DATETIME_DIFF(end_ts, CR_TS, minute)
WHEN CR_TS > OFF_TS AND (end_ts < NXT_ON_TS OR NXT_ON_TS IS NULL) THEN DATETIME_DIFF(end_ts, CR_TS, minute)
WHEN CR_TS > OFF_TS AND end_ts > NXT_ON_TS THEN DATETIME_DIFF(NXT_ON_TS, CR_TS, minute)
WHEN CR_TS < OFF_TS AND end_ts > OFF_TS AND (end_ts < NXT_ON_TS OR NXT_ON_TS IS NULL) THEN DATETIME_DIFF(end_ts, OFF_TS, minute) 
END
AS Total_time_spent_5
  FROM LMD_DA.drvr_trip_dt2
 WHERE REC_SRC = 'DAAS'
--WHERE end_ts > OFF_TS  AND (end_ts < NXT_ON_TS OR NXT_ON_TS IS NULL)
)
--order by 1
WHERE Total_time_spent_5 > 0
)
group by 1,2
) ;  


--combining all 5 hours 
CREATE OR REPLACE TABLE LMD_DA.DRVR_TIME_TOT as (   
SELECT A.DRVR_USER_ID,A.ACTV_DT, 
--F.spark_zone,
MAX(Total_time_spent_1) Total_time_spent_1, 
MAX(Total_time_spent_2) Total_time_spent_2, 
-- MAX(Total_time_spent_3) Total_time_spent_3, 
MAX(Total_time_spent_4) Total_time_spent_4, 
MAX(Total_time_spent_5) Total_time_spent_5,
MAX(COALESCE(Total_time_spent_1,0) + COALESCE(Total_time_spent_2,0) + COALESCE(Total_time_spent_4,0) 
	+ COALESCE(Total_time_spent_5,0) ) 
	AS Total_time_spent 
FROM LMD_DA.DRVR_TIME_1 A
LEFT JOIN  LMD_DA.DRVR_TIME_2 B
ON A.DRVR_USER_ID=B.DRVR_USER_ID AND
   A.ACTV_dt = B.slot_dt
-- LEFT JOIN  LMD_DA.DRVR_TIME_3 C 
-- ON A.DRVR_USER_ID=C.DRVR_USER_ID AND
   -- A.ACTV_dt = C.slot_dt   
LEFT JOIN  LMD_DA.DRVR_TIME_4 D
ON A.DRVR_USER_ID=D.DRVR_USER_ID AND
   A.ACTV_dt = D.slot_dt
LEFT JOIN  LMD_DA.DRVR_TIME_5 E
ON A.DRVR_USER_ID=E.DRVR_USER_ID AND
   A.ACTV_dt = E.slot_dt   
-- LEFT JOIN LMD_DA.DRVR_TIME_1a F
-- ON A.DRVR_USER_ID=F.DRVR_USER_ID AND
   -- A.ACTV_dt = F.ACTV_DT 
--LEFT JOIN LMD_DA.drvr_trip_dtl G
--ON A.DRVR_USER_ID=G.DRVR_USER_ID AND
--   A.ACTV_dt = G.slot_dt  
WHERE A.ACTV_DT >= '2021-01-01'
 GROUP BY 1,2)
;

CREATE OR REPLACE TABLE LMD_DA.s1s2s3s4s56_spark_now AS
(SELECT  A.DRVR_USER_ID, slot_dt,sum(Total_time_spent)  Total_time_spent , SUM(min_time) min_time
	from   LMD_DA.DRVR_TIME_TOT A 
	LEFT JOIN (SELECT DRVR_USER_ID, slot_dt, SUM(datetime_diff(END_ts,start_ts, MINUTE )) min_time
                 FROM LMD_DA.drvr_trip_dtl_spark_drvr
                --  WHERE Slot_dt='2022-4-17' and DRVR_USER_ID = 'ivonnebradero57@gmail.com'
                GROUP BY 1,2) B
ON A.DRVR_USER_ID=B.DRVR_USER_ID AND
   A.ACTV_dt = B.slot_dt
	group by 1, 2 );

--------------------------------------------------------------------------------hlya 's updated drvr uti logic begins ---------------------------------------------

--USED FOR CALCULATING STORE-MARKET TIME ZONES  FOR NEW DRIVER UTILISATION LOGIC (PROVIDED BY HULYA)
CREATE OR REPLACE TABLE LMD_DA.MARKET_TZ_DRVR_UTI AS
(
WITH 
 ak_MARKET_TZ  AS
(
SELECT  
    ofr.ORDER_PCKUP_PNT_ID AS STORE_NBR,
    UPPER( store_hist.STORE_NM) AS STORE_NM,
    UPPER( store_hist.DLVR_AREA_NM) AS MARKET_NAME,
    store_hist.TENANT_ID,
    UPPER( store_hist.TENANT_NM) TENANT_NM,
    store_hist.STORE_TZ_CD as TM_ZONE,
    UPPER( store_hist.CITY_NM) CITY_NM,
    UPPER( store_hist.ST_CD) ST_CD,
FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.CARRIER_DLVR_OFFR` ofr

LEFT JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST` store_hist
    ON CAST( ofr.ORDER_PCKUP_PNT_ID as INT) = CAST (store_hist.STORE_NBR AS INT)

WHERE --CAST( ofr.DLVR_OFFR_CRE_TS AS DATE) >= DATE_SUB(CURRENT_DATE("US/Pacific"), INTERVAL 50 DAY) AND 
	store_hist.CURR_IND = 1 -- only taking rows which are current
GROUP BY 1,2,3,4,5,6,7,8 ),

MARKET_FINAL AS (
SELECT STORE_NBR , STORE_NM,MARKET_NAME,   TENANT_ID, TENANT_NM, CITY_NM,ST_CD,
 MAX(TM_ZONE) OVER (PARTITION BY MARKET_NAME ) AS TIME_ZONE --around 10 market names had multiple values 
FROM  ak_MARKET_TZ
--GROUP BY 1,2,3,4,5,6,7
)

SELECT STORE_NBR , STORE_NM,
CASE WHEN  UPPER( MARKET_NAME) = UPPER( "Odessa") THEN UPPER( "Walmart Odessa") 
	  WHEN  UPPER( MARKET_NAME) = UPPER( "West Memphis") THEN UPPER( "Walmart West Memphis")
      ELSE 	  MARKET_NAME END AS  MARKET_NM,
	  TENANT_ID, TENANT_NM,
	  CASE WHEN UPPER(MARKET_NAME) IN ('WALMART BENTONVILLE','WALMART CROSSVILLE','WALMART DEFUNIAK SPRINGS','WALMART PENSACOLA')  THEN 'America/Chicago' 
	  ELSE TIME_ZONE END AS TM_ZONE, 	  --(These MARKETS WERE MAPPED TO 2 DIFFERENT TIME ZONE'S , HENCE MAPPED THEM TO THEIR ACTUAL TIME ZONE'S)
	  CITY_NM,ST_CD
      FROM MARKET_FINAL
      WHERE UPPER( MARKET_NAME) NOT LIKE ("%JOYRUN%")
);


-- THIS TABEL WILL LATER BE USED FOR FINDING the "Elibile" spark now sessions (PROVIDED BY HULYA)
CREATE OR REPLACE TABLE LMD_DA.SPARK_NOW_DRVR_ELIGBL_SESN_BASE as
(
WITH

ak_SPARK_NOW_ACTIVITY AS
(
SELECT
  a.DRVR_USER_ID,
  UPPER( a.ACTV_NM) as ACTIVITY_NM,
  CAST( a.ACTV_DT AS DATE) ACTV_DT,
  d.WKDAY_LONG_NM AS DAY_WEEK,
  CASE WHEN e.WM_WK_NBR_OF_YR_NBR < 10 THEN TRIM( CAST(EXTRACT(YEAR FROM d.WM_YR_BEG_DT) AS STRING))||'0'||TRIM(CAST (e.WM_WK_NBR_OF_YR_NBR AS STRING))
   ELSE TRIM( CAST(EXTRACT(YEAR FROM d.WM_YR_BEG_DT) AS STRING)) ||TRIM(CAST (e.WM_WK_NBR_OF_YR_NBR AS STRING)) END AS WM_WEEK,
  a.ACTV_START_TS_UTC,
  a.ACTL_ACTV_END_TS_UTC,
  CAST( a.ACTV_DUR_MIN_QTY as FLOAT64) actual_online_duration_mins,
  UPPER( b.MARKET_NM) MARKET_NM,
FROM  (
		SELECT * FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DRVR_APPLN_ACTV` a 
		WHERE CAST( a.ACTV_DT AS DATE) >= DATE1   
		AND (LOWER( a.DRVR_USER_ID) not like '%walmart.com%' or LOWER( a.DRVR_USER_ID) not like '%test%') AND
		UPPER( a.ACTV_NM) = 'ONLINE'
		AND CAST( a.ACTV_DUR_MIN_QTY as FLOAT64) >=5 --take sessions that are 5 minutes or longer(AS PER HULYA'S LATEST LOGIC)
	) a

LEFT JOIN 
    (select DRVR_USER_ID,SNAPSHOT_BEG_TS_UTC,SNAPSHOT_END_TS_UTC,lower(SPARK_MARKET_NM) MARKET_NM,k.TM_ZONE
      from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_DRVR_HIST` a 
      LEFT JOIN LMD_DA.MARKET_TZ_DRVR_UTI k 
        on(lower(SPARK_MARKET_NM) = lower(MARKET_NM))) b
    ON (UPPER (a.DRVR_USER_ID) = UPPER (b.DRVR_USER_ID) and
    DATETIME(a.ACTV_START_TS) between DATETIME(SNAPSHOT_BEG_TS_UTC,b.TM_ZONE) and DATETIME(SNAPSHOT_END_TS_UTC,b.TM_ZONE) AND b.MARKET_NM IS NOT NULL) -- CAN USE DATE(a.ACTV_DT)
   
LEFT JOIN `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_DT` d
    ON  CAST( a.ACTV_DT AS DATE) = CAST( d.CAL_DT AS DATE)

LEFT JOIN `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_WM_WK` e -- table is used to get WM Week number
    ON d.WM_WK_BEG_DT = e.WM_WK_BEG_DT


GROUP BY 1,2,3,4,5,6,7,8,9)

,ak_OFFER_ACTIVITY AS --For getting all rr,bc offers per drivers 
(
SELECT
  a.DRVR_USER_ID,
  a.ORDER_PCKUP_PNT_ID,
  UPPER( a.MARKET_NM) AS MARKET_NM,
  b.TM_ZONE,
  a.DLVR_OFFR_CRE_TS_UTC as OFFER_CRE_TS_UTC,
  COUNT( DISTINCT CASE WHEN a.DLVR_OFFR_STS_NM = 'OFFER_PUBLISHED' THEN DLVR_OFFR_TRIP_ID ELSE NULL END) RR_offers,
  COUNT( DISTINCT CASE WHEN a.DLVR_OFFR_STS_NM = 'ACCEPTED' THEN DLVR_OFFR_TRIP_ID ELSE NULL END) RR_accepted,
  COUNT( DISTINCT CASE WHEN a.DLVR_OFFR_STS_NM IN ('OFFER_BROADCASTED', 'OFFER_BROADCASTED_WITH_SURGE') THEN DLVR_OFFR_TRIP_ID ELSE NULL END) BC_offers,
  COUNT( DISTINCT CASE WHEN a.DLVR_OFFR_STS_NM IN ('BROADCAST_ACCEPTED', 'BROADCAST_WITH_SURGE_ACCEPTED') THEN DLVR_OFFR_TRIP_ID ELSE NULL END) BC_accepted
FROM (	SELECT * FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.CARRIER_DLVR_OFFR` a  
		WHERE CAST( a.DLVR_OFFR_CRE_TS AS DATE) >= DATE1
		) a

LEFT JOIN LMD_DA.MARKET_TZ_DRVR_UTI b
   ON UPPER( a.MARKET_NM) = UPPER( b.MARKET_NM)


  --AND CAST( a.DLVR_OFFR_CRE_TS AS DATE) <= DATE_SUB( CURRENT_DATE( "US/Pacific"), INTERVAL 1 DAY)

GROUP BY 1,2,3,4,5
ORDER BY DLVR_OFFR_CRE_TS_UTC ASC, DRVR_USER_ID)

,ak_SPARK_NOW as
(
SELECT
  a.DRVR_USER_ID,
  a.ACTIVITY_NM,
  a.ACTV_DT,
  a.DAY_WEEK,
  a.WM_WEEK,
  a.MARKET_NM,
  b.TM_ZONE,
  a.ACTV_START_TS_UTC,
  a.ACTL_ACTV_END_TS_UTC,
  a.actual_online_duration_mins,
  DATETIME (a.ACTV_START_TS_UTC, b.TM_ZONE) AS ACTV_START_TS_TZ,
  DATETIME (a.ACTL_ACTV_END_TS_UTC, b.TM_ZONE) AS ACTL_ACTV_END_TS_TZ,
  IFNULL(SUM(c.RR_offers),0) as RR_offers,
  IFNULL(SUM(c.RR_accepted),0) as RR_accepted,
  IFNULL(SUM(c.BC_offers),0) as BC_offers,
  IFNULL(SUM(c.BC_accepted),0) as BC_accepted
	FROM ak_SPARK_NOW_ACTIVITY a

	LEFT JOIN (select MARKET_NM, TM_ZONE from ak_OFFER_ACTIVITY group by 1,2) b
	  ON UPPER( a.MARKET_NM) = UPPER( b.MARKET_NM)

	LEFT JOIN ak_OFFER_ACTIVITY c
	  ON UPPER( a.DRVR_USER_ID) = UPPER( c.DRVR_USER_ID)
	  AND CAST( c.OFFER_CRE_TS_UTC AS TIMESTAMP) BETWEEN CAST( a.ACTV_START_TS_UTC AS TIMESTAMP) AND CAST( a.ACTL_ACTV_END_TS_UTC AS TIMESTAMP)

	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12	)

,ak_SPARK_NOW2 as
(SELECT 
    a.*,
    EXTRACT( HOUR FROM ACTV_START_TS_TZ)*100 AS HOUR_60,
    EXTRACT( HOUR FROM ACTV_START_TS_TZ)*100 +
		(CASE    WHEN EXTRACT(MINUTE FROM ACTV_START_TS_TZ) BETWEEN 0 AND 29 THEN 0	ELSE 30 END) AS HOUR_30,
    EXTRACT(HOUR FROM ACTV_START_TS_TZ)*100 +
		(CASE
        WHEN EXTRACT(MINUTE FROM ACTV_START_TS_TZ) BETWEEN 0 AND 14 THEN 0
        WHEN EXTRACT(MINUTE FROM ACTV_START_TS_TZ) BETWEEN 15 AND 29 THEN 15
        WHEN EXTRACT(MINUTE FROM ACTV_START_TS_TZ) BETWEEN 30 AND 44 THEN 30 ELSE 45 END) AS HOUR_15
FROM ak_SPARK_NOW a)

SELECT * FROM ak_SPARK_NOW2
);

--this table will act as the base table for calculating driver engagement time (as per huly's logic)
CREATE OR REPLACE TABLE LMD_DA.DRVR_LASTMILE_NOW_ENGMNT_BASE AS
( 
WITH
ak_DRVR_LASTMILE_ACTV_PRE AS(

SELECT
    COALESCE( CAST( dtl.TRIP_START_TS AS DATE), CAST( dtl.ENR_PICKUP_TS AS DATE),CAST( dtl.TRIP_CREATED_TS AS DATE)) as TRIP_DT,
    dtl.TRIP_ID,
    dtl.DRVR_USER_ID ,
    UPPER( B.MARKET_NM) AS MARKET_NM,
    MIN(LEAST (
    IFNULL(DLVR_TS_UTC,"9999-12-31"),
    IFNULL(CAR_REQ_TS_UTC,"9999-12-31"),
  --  IFNULL(DRVR_REASSGN_TS_UTC,"9999-12-31"),
    IFNULL(ENR_PICKUP_TS_UTC,"9999-12-31"),
    IFNULL(AT_PICKUP_TS_UTC,"9999-12-31"),
    IFNULL(ENR_DROPOFF_TS_UTC,"9999-12-31"),
    IFNULL(AT_DROPOFF_TS_UTC,"9999-12-31"),
    IFNULL(ENR_RETURN_TS_UTC,"9999-12-31"),
   -- IFNULL(RTN_TO_STORE_TS_UTC,"9999-12-31"),
    IFNULL(Returned_TS_UTC,"9999-12-31")
  --  ,IFNULL(ENRTE_TO_STORE_TS_UTC,"9999-12-31")
	)) AS LASTMILE_START_TS_UTC,
    MAX(  GREATEST    (
    IFNULL(DLVR_TS_UTC,"1900-12-31"),
    IFNULL(CAR_REQ_TS_UTC,"1900-12-31"),
 --   IFNULL(DRVR_REASSGN_TS_UTC,"1900-12-31"),
    IFNULL(ENR_PICKUP_TS_UTC,"1900-12-31"),
    IFNULL(AT_PICKUP_TS_UTC,"1900-12-31"),
    IFNULL(ENR_DROPOFF_TS_UTC,"1900-12-31"),
    IFNULL(AT_DROPOFF_TS_UTC,"1900-12-31"),
    IFNULL(ENR_RETURN_TS_UTC,"1900-12-31"),
  --  IFNULL(RTN_TO_STORE_TS_UTC,"1900-12-31"),
    IFNULL(Returned_TS_UTC,"1900-12-31")
    --,IFNULL(ENRTE_TO_STORE_TS_UTC,"1900-12-31")
    )) AS LASTMILE_END_TS_UTC,
    MAX(SRC_CRE_TS_UTC) AS ASSOC_DLVR_CPLT_TS_UTC,

    MAX( if(picker_type_nm="SHOPPER",(greatest(
    IFNULL(CAR_REQ_TS_UTC,"1900-12-31"),
		    IFNULL(if(DLVR_TS_UTC is not null and AT_PICKUP_TS_UTC <= DLVR_TS_UTC ,AT_PICKUP_TS_UTC,"1900-12-31"),"1900-12-31"),
				--changes made by VN551CS || sid || 10th april 2024
    -- IFNULL(if(DLVR_TS_UTC is not null and DISPATCHED_TS_UTC <= DLVR_TS_UTC ,DISPATCHED_TS_UTC,"1900-12-31"),"1900-12-31"),
    -- IFNULL(if(DLVR_TS_UTC is not null and LOADED_TS_UTC <= DLVR_TS_UTC ,LOADED_TS_UTC,"1900-12-31"),"1900-12-31"),
    -- IFNULL(if(DLVR_TS_UTC is not null and PKG_RCPT_DRVR_TS_UTC <= DLVR_TS_UTC ,PKG_RCPT_DRVR_TS_UTC,"1900-12-31"),"1900-12-31"),
    IFNULL(if(DLVR_TS_UTC is not null and PICK_START_TS_UTC <= DLVR_TS_UTC ,PICK_START_TS_UTC,"1900-12-31"),"1900-12-31")
    )),(GREATEST(
    IFNULL(CAR_REQ_TS_UTC,"1900-12-31"),
    IFNULL(if(DLVR_TS_UTC is not null and DISPATCHED_TS_UTC <= DLVR_TS_UTC ,DISPATCHED_TS_UTC,"1900-12-31"),"1900-12-31"),
    -- IFNULL(if(DLVR_TS_UTC is not null and LOADED_TS_UTC <= DLVR_TS_UTC ,LOADED_TS_UTC,"1900-12-31"),"1900-12-31"),
    IFNULL(if(DLVR_TS_UTC is not null and PKG_RCPT_DRVR_TS_UTC <= DLVR_TS_UTC ,PKG_RCPT_DRVR_TS_UTC,"1900-12-31"),"1900-12-31"),
    IFNULL(if(DLVR_TS_UTC is not null and AT_PICKUP_TS_UTC <= DLVR_TS_UTC ,AT_PICKUP_TS_UTC,"1900-12-31"),"1900-12-31")
    )))) AS P2_END_TS_UTC 


FROM  (
	select * from 	`LMD_DA.CARRIER_DLVR_TRKSTS_V2`
	where CAST( SRC_CRE_TS AS DATE)>=  date_add(DATE1,interval -20 day) AND UPPER( CARRIER_ORG_NM) IN ("SPARK", "NA")  
	AND DRVR_USER_ID IS NOT NULL
	)  dtl

LEFT JOIN `LMD_DA.MARKET_TZ_DRVR_UTI` B
    ON CAST( dtl.ORDER_PCKUP_PNT_ID AS STRING) = CAST( B.STORE_NBR AS STRING)
  

GROUP BY 1,2,3,4
)

,ak_DRVR_LASTMILE_ACTV AS
(SELECT
    a.DRVR_USER_ID,    a.TRIP_ID,   a.TRIP_DT,
    d.WKDAY_LONG_NM AS DAY_WEEK,
    CASE WHEN e.WM_WK_NBR_OF_YR_NBR < 10 THEN TRIM( CAST(EXTRACT(YEAR FROM d.WM_YR_BEG_DT) AS STRING))||'0'||TRIM(CAST (e.WM_WK_NBR_OF_YR_NBR AS STRING))
         ELSE TRIM( CAST(EXTRACT(YEAR FROM d.WM_YR_BEG_DT) AS STRING)) ||TRIM(CAST (e.WM_WK_NBR_OF_YR_NBR AS STRING)) END AS WM_WEEK,
    A.MARKET_NM,
    B.TM_ZONE,
    a.LASTMILE_START_TS_UTC,
    a.LASTMILE_END_TS_UTC,
    a.P2_END_TS_UTC,
    (TIMESTAMP_DIFF(CAST(a.LASTMILE_END_TS_UTC as TIMESTAMP), CAST(a.LASTMILE_START_TS_UTC as TIMESTAMP), SECOND))/60 as lastmile_duration_mins,
        (TIMESTAMP_DIFF(CAST(a.P2_END_TS_UTC as TIMESTAMP), CAST(a.LASTMILE_START_TS_UTC as TIMESTAMP), SECOND))/60 as P2_duration_mins,
    (TIMESTAMP_DIFF(CAST(a.ASSOC_DLVR_CPLT_TS_UTC as TIMESTAMP), CAST(a.LASTMILE_START_TS_UTC as TIMESTAMP), SECOND))/60 as assoc_lastmile_duration_mins,
    DATETIME (a.LASTMILE_START_TS_UTC, B.TM_ZONE) AS LASTMILE_START_TS_TZ,
    DATETIME (a.LASTMILE_END_TS_UTC, B.TM_ZONE) AS LASTMILE_END_TS_TZ,
    DATETIME (a.P2_END_TS_UTC, B.TM_ZONE) AS P2_END_TS_TZ,
    DATETIME (a.ASSOC_DLVR_CPLT_TS_UTC, B.TM_ZONE) AS ASSOC_DLVR_CPLT_TS_TZ
FROM ak_DRVR_LASTMILE_ACTV_PRE a

LEFT JOIN LMD_DA.MARKET_TZ_DRVR_UTI b
  ON UPPER(a.MARKET_NM) = UPPER( b.MARKET_NM)

LEFT JOIN `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_DT` d
    ON  CAST( a.TRIP_DT AS DATE) = CAST( d.CAL_DT AS DATE)

LEFT JOIN `wmt-edw-prod.WW_CORE_DIM_DL_VM.CAL_WM_WK` e -- table is used to get WM Week number
    ON d.WM_WK_BEG_DT = e.WM_WK_BEG_DT

GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)

,ak_DRVR_LASTMILE_NOW AS
( select 
    a.*,
    case
    when lastmile_duration_mins = 0 and ASSOC_DLVR_CPLT_TS_TZ is null then LASTMILE_END_TS_TZ
    when lastmile_duration_mins = 0 and ASSOC_DLVR_CPLT_TS_TZ is not null and assoc_lastmile_duration_mins <=180 then ASSOC_DLVR_CPLT_TS_TZ
    when lastmile_duration_mins = 0 and ASSOC_DLVR_CPLT_TS_TZ is not null and assoc_lastmile_duration_mins >180 then TIMESTAMP_ADD(LASTMILE_START_TS_TZ, INTERVAL 3 HOUR)
    when lastmile_duration_mins >180 then TIMESTAMP_ADD(LASTMILE_START_TS_TZ, INTERVAL 3 HOUR)
    else LASTMILE_END_TS_TZ
    END AS ACTUAL_LASTMILE_END_TS_TZ,

    case
    when P2_duration_mins >180 then TIMESTAMP_ADD(LASTMILE_START_TS_TZ, INTERVAL 3 HOUR)
    when extract(date from p2_end_ts_tz) = "1900-12-30" then LASTMILE_END_TS_TZ
    else P2_END_TS_TZ
    END AS ACTUAL_P2_time



	FROM ak_DRVR_LASTMILE_ACTV A
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)

SELECT  * FROM ak_DRVR_LASTMILE_NOW
where (EXTRACT( YEAR FROM LASTMILE_START_TS_UTC) <> 9999 AND EXTRACT( YEAR FROM LASTMILE_END_TS_UTC) <> 1900 ) OR  TM_ZONE IS NOT NULL
);

													--final table for calculating hulyas driver utilisation values
create or replace table LMD_DA.hy_DRIVER_UTILIZATION_SPARK_NOW as(
WITH 
SPARK_NOW as (

select EXTRACT (HOUR FROM ACTV_START_TS_TZ) AS SESSION_START_HOUR,
  (EXTRACT (HOUR FROM ACTV_START_TS_TZ))*100 + (EXTRACT (MINUTE FROM ACTV_START_TS_TZ)) AS SESSION_START,
  (EXTRACT (HOUR FROM TIMESTAMP_SUB(CAST (ACTL_ACTV_END_TS_TZ AS TIMESTAMP) ,INTERVAL 1 SECOND)))*100 + (EXTRACT (MINUTE FROM TIMESTAMP_SUB(CAST (ACTL_ACTV_END_TS_TZ AS TIMESTAMP) ,INTERVAL 1 SECOND))) AS SESSION_END
	,* from LMD_DA.SPARK_NOW_DRVR_ELIGBL_SESN_BASE
	where concat(ACTV_START_TS_UTC,ACTL_ACTV_END_TS_UTC) not in 
	(  	SELECT distinct concat(ACTV_START_TS_UTC,ACTL_ACTV_END_TS_UTC)
		FROM `LMD_DA.SPARK_NOW_DRVR_ELIGBL_SESN_BASE` 
		where (RR_offers > 0 and RR_accepted =0 AND BC_accepted = 0 ) or  (RR_offers = 0 and (BC_offers > 3 and BC_accepted = 0))  --main part of updated logic
    )),
-- Find engagemnt time (num part for drvr utiz)
ak_SPARK_WORKING AS(
SELECT EXTRACT (HOUR FROM LASTMILE_START_TS_TZ) AS WORK_START_HOUR,
  (EXTRACT (HOUR FROM LASTMILE_START_TS_TZ))*100 + (EXTRACT (MINUTE FROM LASTMILE_START_TS_TZ)) AS WORK_START,
  (EXTRACT (HOUR FROM TIMESTAMP_SUB(CAST (ACTUAL_LASTMILE_END_TS_TZ AS TIMESTAMP) ,INTERVAL 1 SECOND)))*100 + (EXTRACT (MINUTE FROM TIMESTAMP_SUB(CAST (ACTUAL_LASTMILE_END_TS_TZ AS TIMESTAMP) ,INTERVAL 1 SECOND))) AS WORK_END,
  * FROM `LMD_DA.DRVR_LASTMILE_NOW_ENGMNT_BASE`),

-- merge the spark now sessions with engagaments
MERGE_TABLES AS(
SELECT distinct
SN.DRVR_USER_ID, 
SN.SESSION_START,
SN.SESSION_END,
SN.ACTV_DT,
SN.DAY_WEEK,
SN.WM_WEEK,
SN.MARKET_NM,
SN.ACTV_START_TS_TZ,
case when SN.ACTL_ACTV_END_TS_TZ < SW.ACTUAL_LASTMILE_END_TS_TZ then SW.ACTUAL_LASTMILE_END_TS_TZ else SN.ACTL_ACTV_END_TS_TZ end ACTL_ACTV_END_TS_TZ,
-- SN.actual_online_duration_mins DURATION_SPARK_NOW,
date_diff(case when SN.ACTL_ACTV_END_TS_TZ < SW.ACTUAL_LASTMILE_END_TS_TZ then SW.ACTUAL_LASTMILE_END_TS_TZ else SN.ACTL_ACTV_END_TS_TZ end , SN.ACTV_START_TS_TZ, MINUTE) DURATION_SPARK_NOW,
coalesce(date_diff(SW.ACTUAL_LASTMILE_END_TS_TZ,SW.LASTMILE_START_TS_TZ,MINUTE),0) DURATION_WORK ,

coalesce(date_diff(SW.ACTUAL_P2_time,SW.LASTMILE_START_TS_TZ,MINUTE),0) P2_time , --p2 time

SW.ACTUAL_LASTMILE_END_TS_TZ,
SW.LASTMILE_START_TS_TZ,
percentile_cont(coalesce(date_diff(SW.ACTUAL_LASTMILE_END_TS_TZ,SW.LASTMILE_START_TS_TZ,MINUTE),0),0.995) over () outlier_duration_work, --will be used for removing outliers
percentile_cont(date_diff(case when SN.ACTL_ACTV_END_TS_TZ < SW.ACTUAL_LASTMILE_END_TS_TZ then SW.ACTUAL_LASTMILE_END_TS_TZ else SN.ACTL_ACTV_END_TS_TZ end , SN.ACTV_START_TS_TZ, MINUTE) ,0.995) over () outlier_duration_sparknow

	FROM SPARK_NOW SN LEFT JOIN ak_SPARK_WORKING SW 
	ON(  SN.ACTV_DT = SW.TRIP_DT  AND SN.DAY_WEEK= SW.DAY_WEEK  AND  SN.WM_WEEK = SW.WM_WEEK AND
		SN.DRVR_USER_ID = SW.DRVR_USER_ID AND   WORK_START >= SESSION_START AND  WORK_START <= SESSION_END)
	where ACTV_START_TS_TZ is not null)

select distinct A.*
  from(
 select DRVR_USER_ID,
         ACTV_DT,
         DAY_WEEK, 
         WM_WEEK,
        -- lower(MARKET_NM) MARKET_NM,(inlcuded in hya code)
         sum(DURATION_SPARK_NOW) TOT_DURATION_SPARK_NOW,
         sum(TOT_DURATION_WORK) TOT_DURATION_WORK,
         sum(TOT_P2_time) P2_time,
         safe_divide(sum(TOT_DURATION_WORK) ,sum(DURATION_SPARK_NOW)) UTILIZATION_RATE
    from (
     SELECT 
         DRVR_USER_ID,
         ACTV_DT,
         DAY_WEEK, 
         WM_WEEK,
         lower(MARKET_NM) MARKET_NM,
         concat(SESSION_START, SESSION_END),
         max(DURATION_SPARK_NOW) DURATION_SPARK_NOW, 
         sum(DURATION_WORK) TOT_DURATION_WORK,
         if(sum(P2_time)< sum(DURATION_WORK) and sum(P2_time)>=0 ,sum(P2_time),sum(DURATION_WORK))as TOT_P2_time
      FROM MERGE_TABLES 
      where (DURATION_WORK <= outlier_duration_work or DURATION_SPARK_NOW <= outlier_duration_sparknow) and DURATION_WORK >= 0 group by 1,2,3,4,5,6)
      group by 1,2,3,4) A
	  --inner join LMD_DA.MARKET_TZ_DRVR_UTI B on (A.MARKET_NM = lower(B.MARKET_NM)) --for only very small percent (e.g., 0.0002) this condition did not met so we remove those instants where  UTILIZATION_RATE <= 1
  );
--------------------------------------------------------------------------------hlya 's updated drvr uti logic ends ---------------------------------------------

create or replace table LMD_DA.SPARK_DELIVERY_DS_2 as ( 
select a.* ,d.fin_circuit_id, b.Total_time_spent ,b.min_time, c.rows_total , 
cx.EXCPT_RSN_DESC as DAAS_Cancel_reason_desc,   --for DAAS cancellations, at order-level 
wx.EXCPT_RSN_DESC as WM_Cancel_reason_desc,   -- for non-shopper Walmart cancellations, at PO-level 
cxt.EXCPT_RSN_DESC as Daas_Cancel_reason_desc_trip,   --for DAAS cancellations, at trip-level 
wxt.EXCPT_RSN_DESC as WM_Cancel_reason_desc_trip,   -- for non-shopper Walmart cancellations, at trip-level 
sx.EXCPT_RSN_DESC as SHPR_Cancel_reason_desc,   -- for Shopper cancellations, at PO-level 
sxt.EXCPT_RSN_DESC as SHPR_Cancel_reason_desc_trip, 	-- for Shopper cancellations, at Trip-level 
round(safe_divide( b.Total_time_spent,c.rows_total ),3) as Total_time_spent_rows, 
 round(safe_divide(b.min_time,c.rows_total),3) as min_time_rows,
datetime_diff(E.END_ts,E.start_ts, MINUTE ) as LAST_MILE_TIME,
spk.Total_time_spent as Total_time_spent_spark_now, 
round(safe_divide( spk.Total_time_spent,c.rows_total ),3) as Total_time_spent_spark_now_rows,
 round(safe_divide(dusn.TOT_DURATION_WORK,c.rows_total),3) as TOT_DURATION_WORK_hy, -- driver eng time as per hya
 round(safe_divide( dusn.TOT_DURATION_SPARK_NOW,c.rows_total ),3) as TOT_DURATION_SPARK_NOW_hy, --eligible sessions as per to hya
 round(safe_divide( dusn.P2_Time,c.rows_total ),3) as P2_Time_hy

 from 
LMD_DA.SPARK_DELIVERY_DS_1 a 
left join 
LMD_DA.s1s2s3s4s56 b 
on a.drvr_user_id=b.drvr_user_id
and a.slot_dt=b.slot_dt
left join 
LMD_DA.s1s2s3s4s56_spark_now spk 
on a.drvr_user_id=spk.drvr_user_id
and a.slot_dt=spk.slot_dt
left join 
 `LMD_DA.driver_rows`  c 
on a.drvr_user_id=c.drvr_user_id
and a.slot_dt=c.slot_dt 
left join LMD_DA.s1s2s3s4 d
on a.trip_id=d.trip_id 
and a.slot_dt=d.slot_dt
--To add last mile delivery time
left join LMD_DA.drvr_trip_dtl E
ON A.TRIP_ID = E.TRIP_ID
AND A.DRVR_USER_ID = E.DRVR_USER_ID
AND A.store_id = E.STORE_ID
AND A.spark_zone = E.SPARK_ZONE
AND A.slot_dt = E.SLOT_DT
--updated spark now logic for drvr utiz
left join  LMD_DA.hy_DRIVER_UTILIZATION_SPARK_NOW dusn
on a.drvr_user_id= dusn.drvr_user_id
and a.slot_dt= dusn.ACTV_DT
--for DAAS cancellations, at order-level 
left join
		(select 
			SRC_SALES_ORDER_NUM, 
			EXCPT_RSN_DESC 
		from 
			(
				SELECT 
					*, 
					ROW_NUMBER() OVER(PARTITION BY SRC_SALES_ORDER_NUM ORDER BY Reason_count DESC) AS RANKING 
				FROM 
					(
						select 
						case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM, 
							EXCPT_RSN_DESC, 
							count(*) as Reason_count 
						from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` E
						INNER JOIN 
						(
						SELECT SALES_ORDER_NUM FROM 
						(SELECT SALES_ORDER_NUM, MIN(CARRIER_DLVR_TS_TZ) AS CARRIER_DLVR_TS_TZ, MIN(RETURNED_TS_TZ) AS RETURNED_TS_TZ
						FROM LMD_DA.SPARK_DELIVERY_DS_1 D 
                        group by 1
						) F
                        WHERE F.CARRIER_DLVR_TS_TZ IS NULL AND F.RETURNED_TS_TZ IS NULL
                        ) G
                    ON E.SRC_SALES_ORDER_NUM = G.SALES_ORDER_NUM
						WHERE 
							DATA_SRC_CD='DAAS' 
							--AND DLVR_CLNT_ID !='1019' 
							AND EXCPT_RSN_DESC IS NOT NULL 
                            --AND SRC_CRE_DT > '2019-11-01' 
							AND SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
						group by 1,2 
					)
			) 	where RANKING = 1
		) as cx
		on cx.SRC_SALES_ORDER_NUM = A.SALES_ORDER_NUM

-- for non-shopper Walmart cancellations, at PO-level 		
left join
           (select 
           SRC_SALES_ORDER_NUM, PO_NUM,
           EXCPT_RSN_DESC 
           from 
				(
				SELECT 
				*, 
				ROW_NUMBER() OVER(PARTITION BY SRC_SALES_ORDER_NUM, PO_NUM ORDER BY Reason_count DESC) AS RANKING 
				FROM 
					(
                    select 
						case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
						B.PO_NUM,
                    EXCPT_RSN_DESC, 
                    count(*) as Reason_count 
                    from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` B
                    INNER JOIN 
						(
						SELECT SALES_ORDER_NUM, PO_NUM FROM 
						(SELECT SALES_ORDER_NUM, PO_NUM, MIN(CARRIER_DLVR_TS_TZ) AS CARRIER_DLVR_TS_TZ, MIN(RETURNED_TS_TZ) AS RETURNED_TS_TZ
						FROM LMD_DA.SPARK_DELIVERY_DS_1 D 
                        group by 1,2
						) D
                        WHERE D.CARRIER_DLVR_TS_TZ IS NULL AND D.RETURNED_TS_TZ IS NULL
                        ) C
                    ON B.SRC_SALES_ORDER_NUM = C.SALES_ORDER_NUM
                    AND B.PO_NUM = C.PO_NUM
					/*
					INNER JOIN `wmt-edw-prod.WW_GEC_VM.SALES_PO` SP 
						ON B.SRC_SALES_ORDER_NUM = SP.SALES_ORDER_NUM
						AND B.PO_NUM = SP.PO_NUM
					INNER JOIN `wmt-edw-prod.WW_GEC_VM.STS_LKP` SL  
						ON SL.STS_ID = SP.CURR_STS_ID
						*/
					INNER JOIN (select SALES_ORDER_NUM,PO_NUM,SRC_CRE_DT,min(TOT_CNCL_QTY) as TOT_CNCL_QTY from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_LINE` 
					group by 1,2,3) as SP
					ON B.SRC_SALES_ORDER_NUM = SP.SALES_ORDER_NUM
						AND B.PO_NUM = SP.PO_NUM
                    WHERE 
						B.DATA_SRC_CD='DISPATCHER' 
                        AND EXCPT_RSN_DESC IS NOT NULL 
						--AND B.SRC_CRE_DT > '2019-11-01' 
                        AND B.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
                        AND SP.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
						AND CARRIER_NM = 'SPARK'
                        AND PICKER_TYPE_NM != 'SHOPPER'
						--AND LOWER(SL.STS_DESC) LIKE '%cancel%'
						AND TOT_CNCL_QTY > 0
					group by 1,2,3
                    )
                )
				where RANKING = 1
            ) as wx
            on wx.SRC_SALES_ORDER_NUM = A.SALES_ORDER_NUM
            AND wx.PO_NUM = A.PO_NUM

--for DAAS cancellations, at trip-level 
left join
		(select 
			SRC_SALES_ORDER_NUM, TRIP_ID,
			EXCPT_RSN_DESC 
		from 
			(
				SELECT 
					*, 
					ROW_NUMBER() OVER(PARTITION BY SRC_SALES_ORDER_NUM, TRIP_ID ORDER BY Reason_count DESC) AS RANKING 
				FROM 
					(
						select 
							case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
							G.TRIP_ID,
							EXCPT_RSN_DESC, 
							count(*) as Reason_count 
						from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` E
						INNER JOIN 
						(
						SELECT SALES_ORDER_NUM, TRIP_ID FROM 
						(SELECT SALES_ORDER_NUM, TRIP_ID, MIN(CARRIER_DLVR_TS_TZ) AS CARRIER_DLVR_TS_TZ, MIN(RETURNED_TS_TZ) AS RETURNED_TS_TZ
						FROM LMD_DA.SPARK_DELIVERY_DS_1 D 
                        group by 1,2
						) F
                        WHERE F.CARRIER_DLVR_TS_TZ IS NULL AND F.RETURNED_TS_TZ IS NULL
                        ) G
                    ON E.SRC_SALES_ORDER_NUM = G.SALES_ORDER_NUM
					AND E.TRIP_ID = G.TRIP_ID
						WHERE 
							DATA_SRC_CD='DAAS' 
							--AND DLVR_CLNT_ID !='1019' 
							AND EXCPT_RSN_DESC IS NOT NULL 
                            --AND SRC_CRE_DT > '2019-11-01' 
							AND SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
						group by 1,2,3 
					)
			) 	where RANKING = 1
		) as cxt
		on cxt.SRC_SALES_ORDER_NUM = A.SALES_ORDER_NUM
		AND cxt.TRIP_ID = A.TRIP_ID

-- for non-shopper Walmart cancellations, at trip-level 
left join
           (select 
           SRC_SALES_ORDER_NUM, PO_NUM, TRIP_ID,
           EXCPT_RSN_DESC
           from 
				(
				SELECT 
				*, 
				ROW_NUMBER() OVER(PARTITION BY SRC_SALES_ORDER_NUM, PO_NUM, TRIP_ID  ORDER BY Reason_count DESC) AS RANKING 
				FROM 
					(
                    select 
						case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM, 
						B.PO_NUM, 
						C.TRIP_ID, 
                    EXCPT_RSN_DESC, 
                    count(*) as Reason_count 
                    from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` B
                    INNER JOIN 
						(
						SELECT SALES_ORDER_NUM, PO_NUM, TRIP_ID FROM 
						(SELECT SALES_ORDER_NUM, PO_NUM, TRIP_ID, MIN(CARRIER_DLVR_TS_TZ) AS CARRIER_DLVR_TS_TZ, MIN(RETURNED_TS_TZ) AS RETURNED_TS_TZ
						FROM LMD_DA.SPARK_DELIVERY_DS_1 D 
                        group by 1,2,3
						) D
                        WHERE D.CARRIER_DLVR_TS_TZ IS NULL AND D.RETURNED_TS_TZ IS NULL
                        ) C
                    ON B.SRC_SALES_ORDER_NUM = C.SALES_ORDER_NUM
                    AND B.PO_NUM = C.PO_NUM
					AND B.TRIP_ID = C.TRIP_ID
--					INNER JOIN `wmt-edw-prod.WW_GEC_VM.SALES_PO` SP 
--						ON B.SRC_SALES_ORDER_NUM = SP.SALES_ORDER_NUM
--						AND B.PO_NUM = SP.PO_NUM
--					INNER JOIN `wmt-edw-prod.WW_GEC_VM.STS_LKP` SL  
--						ON SL.STS_ID = SP.CURR_STS_ID
                    WHERE 
						B.DATA_SRC_CD='DISPATCHER' 
                        AND EXCPT_RSN_DESC IS NOT NULL 
                        --AND B.SRC_CRE_DT > '2019-11-01' 
						AND B.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
                        AND CARRIER_NM = 'SPARK'
                        AND PICKER_TYPE_NM != 'SHOPPER'
--						AND LOWER(SL.STS_DESC) LIKE '%cancel%'
					group by 1,2,3,4
                    )
                )
				where RANKING = 1
            ) as wxt
            on wxt.SRC_SALES_ORDER_NUM = A.SALES_ORDER_NUM
            AND wxt.PO_NUM = A.PO_NUM
			AND wxt.TRIP_ID = A.TRIP_ID

-- for Shopper cancellations, at PO-level 	
left join
           (select 
           Z.SRC_SALES_ORDER_NUM, Z.PO_NUM,
		   CASE WHEN OFFER_BROADCASTED >0 AND EXCPT_RSN_DESC = 'Customer: Requested' THEN 'No_driver_cncl'
				ELSE EXCPT_RSN_DESC
				END AS EXCPT_RSN_DESC             
           from 
				(
				SELECT 
				*, 
				ROW_NUMBER() OVER(PARTITION BY SRC_SALES_ORDER_NUM, PO_NUM ORDER BY Reason_count DESC) AS RANKING 
				FROM 
					(
                    select 
						case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
						B.PO_NUM,
                    EXCPT_RSN_DESC, 
                    count(*) as Reason_count 
                    from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` B
                    INNER JOIN 
						(
						SELECT SALES_ORDER_NUM, PO_NUM FROM 
						(SELECT SALES_ORDER_NUM, PO_NUM, MIN(CARRIER_DLVR_TS_TZ) AS CARRIER_DLVR_TS_TZ, MIN(RETURNED_TS_TZ) AS RETURNED_TS_TZ
						FROM LMD_DA.SPARK_DELIVERY_DS_1 D 
                        group by 1,2
						) D
                        WHERE D.CARRIER_DLVR_TS_TZ IS NULL AND D.RETURNED_TS_TZ IS NULL
                        ) C
                    ON B.SRC_SALES_ORDER_NUM = C.SALES_ORDER_NUM
                    AND B.PO_NUM = C.PO_NUM
					/*
					INNER JOIN `wmt-edw-prod.WW_GEC_VM.SALES_PO` SP 
						ON B.SRC_SALES_ORDER_NUM = SP.SALES_ORDER_NUM
						AND B.PO_NUM = SP.PO_NUM
					INNER JOIN `wmt-edw-prod.WW_GEC_VM.STS_LKP` SL  
						ON SL.STS_ID = SP.CURR_STS_ID
						*/
					INNER JOIN (select SALES_ORDER_NUM,PO_NUM,SRC_CRE_DT,min(TOT_CNCL_QTY) as TOT_CNCL_QTY from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_LINE` 
					group by 1,2,3) as SP
					ON B.SRC_SALES_ORDER_NUM = SP.SALES_ORDER_NUM
						AND B.PO_NUM = SP.PO_NUM
				
                    WHERE 
						B.DATA_SRC_CD='DISPATCHER' 
                        AND EXCPT_RSN_DESC IS NOT NULL 
                        --AND B.SRC_CRE_DT > '2019-11-01' 
						AND B.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
						AND SP.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
                        AND CARRIER_NM = 'SPARK'
                        AND PICKER_TYPE_NM = 'SHOPPER'
						--AND LOWER(SL.STS_DESC) LIKE '%cancel%'
						AND TOT_CNCL_QTY > 0
					group by 1,2,3
                    )
                ) Z
				LEFT JOIN 
					(SELECT SALES_ORDER_NUM, PO_NUM, MAX(OFFER_BROADCASTED) AS OFFER_BROADCASTED
					FROM LMD_DA.SPARK_DELIVERY_DS_1
                    GROUP BY 1,2) D2
					ON Z.SRC_SALES_ORDER_NUM = D2.SALES_ORDER_NUM
                    AND Z.PO_NUM = D2.PO_NUM
                    where RANKING = 1
                   ) as sx
            on sx.SRC_SALES_ORDER_NUM = A.SALES_ORDER_NUM
            AND sx.PO_NUM = A.PO_NUM

-- for Shopper cancellations, at Trip-level 		
left join
           (select 
           Z.SRC_SALES_ORDER_NUM, Z.PO_NUM, Z.TRIP_ID,
		   CASE WHEN OFFER_BROADCASTED >0 AND EXCPT_RSN_DESC = 'Customer: Requested' THEN 'No_driver_cncl'
				ELSE EXCPT_RSN_DESC
				END AS EXCPT_RSN_DESC             
           from 
				(
				SELECT 
				*, 
				ROW_NUMBER() OVER(PARTITION BY SRC_SALES_ORDER_NUM, PO_NUM, TRIP_ID  ORDER BY Reason_count DESC) AS RANKING 
				FROM 
					(
                    select 
						case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
						B.PO_NUM, 
						C.TRIP_ID, 
                    EXCPT_RSN_DESC, 
                    count(*) as Reason_count 
                    from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` B
                    INNER JOIN 
						(
						SELECT SALES_ORDER_NUM, PO_NUM, TRIP_ID FROM 
						(SELECT SALES_ORDER_NUM, PO_NUM, TRIP_ID, MIN(CARRIER_DLVR_TS_TZ) AS CARRIER_DLVR_TS_TZ, MIN(RETURNED_TS_TZ) AS RETURNED_TS_TZ
						FROM LMD_DA.SPARK_DELIVERY_DS_1 D 
                        group by 1,2,3
						) D
                        WHERE D.CARRIER_DLVR_TS_TZ IS NULL AND D.RETURNED_TS_TZ IS NULL
                        ) C
                    ON B.SRC_SALES_ORDER_NUM = C.SALES_ORDER_NUM
                    AND B.PO_NUM = C.PO_NUM
					AND B.TRIP_ID = C.TRIP_ID
--					INNER JOIN `wmt-edw-prod.WW_GEC_VM.SALES_PO` SP 
--						ON B.SRC_SALES_ORDER_NUM = SP.SALES_ORDER_NUM
--						AND B.PO_NUM = SP.PO_NUM
--					INNER JOIN `wmt-edw-prod.WW_GEC_VM.STS_LKP` SL  
--						ON SL.STS_ID = SP.CURR_STS_ID
                    WHERE 
						DATA_SRC_CD='DISPATCHER' 
                        AND EXCPT_RSN_DESC IS NOT NULL 
                        --AND B.SRC_CRE_DT > '2019-11-01' 
						AND B.SRC_CRE_DT between DATE1 and current_date("US/Pacific") --TWO_MONTHS
                        AND CARRIER_NM = 'SPARK'
                        AND PICKER_TYPE_NM = 'SHOPPER'
--						AND LOWER(SL.STS_DESC) LIKE '%cancel%'
					group by 1,2,3,4
                    )
                ) Z
				LEFT JOIN 
					(SELECT SALES_ORDER_NUM, PO_NUM, MAX(OFFER_BROADCASTED) AS OFFER_BROADCASTED
					FROM LMD_DA.SPARK_DELIVERY_DS_1
                    GROUP BY 1,2) D2
					ON Z.SRC_SALES_ORDER_NUM = D2.SALES_ORDER_NUM
                    AND Z.PO_NUM = D2.PO_NUM
                    where RANKING = 1
                   ) as sxt
            on sxt.SRC_SALES_ORDER_NUM = A.SALES_ORDER_NUM
            AND sxt.PO_NUM = A.PO_NUM
			AND sxt.TRIP_ID = A.TRIP_ID
); 


create or replace table LMD_DA.SPARK_DELIVERY_DS_ALL as ( 
select a.*  , b.opdd_num, b.opdd_den,b.OPDD_rank	, b.max_OPDD_rank, b.opdd_bucket	 
from LMD_DA.SPARK_DELIVERY_DS_2 a
left join 
LMD_DA.OPDD_ZONE_WEEK b on 
a.wm_wk = b.wm_wk and 
a.spark_zone = b.spark_zone
AND A.CBSA=B.CBSA  
--WHERE A.SLOT_DT >= '2020-03-15' 
group by 
SALES_ORDER_NUM,	po_num,	OG_MKT_NM,	Store_id,	Slot_From_TS,	Slot_To_TS,	ORDER_DROP_TS,	Dropped_after_hours,	FMT_TYPE,	
AE_IND,	Spark_ZONE,	CARRIER_ORG_NM,	TRIP_ID,	DRVR_USER_ID,	STS_DESC,	CAR_REQ_TS_TZ,	ENR_PICKUP_TS_TZ,	AT_PICKUP_TS_TZ, TRIP_CREATED_TS_TZ,	
ENR_DROPOFF_TS_TZ,	AT_DROPOFF_TS_TZ,	CARRIER_DLVR_TS_TZ,	ENR_RETURN_TS_TZ,	RETURNED_TS_TZ,	DISPATCHED_TS_TZ, LOADED_TS_TZ,	Slot_DT,	
SLOT_HR,
On_Time_Delivery,On_Time_Delivery_EXCEPTION, On_Time_Delivery_DT_Defect,
	CBSA,	Launch_Date,	Delivery_Provider,	SPARK_BATCH_FLAG,	OFFER_PUBLISHED,	ACCEPTED,	DROPPED,	REJECTED,	EXPIRED,	OFFER_BROADCASTED,
	BROADCAST_ACCEPTED,	BROADCAST_DROPPED,	BROADCAST_REJECTED,	BROADCAST_EXPIRED,	OFFER_BROADCASTED_WITH_SURGE,	BROADCAST_WITH_SURGE_ACCEPTED,
	BROADCAST_WITH_SURGE_DROPPED,	BROADCAST_WITH_SURGE_REJECTED,	BROADCAST_WITH_SURGE_EXPIRED,	THIRD_PARTY_OFFER_PUBLISH,	THIRD_PARTY_EXPIRED,
	store_classification,	rows_total,	opdd_num,	opdd_den,	OPDD_rank,	max_OPDD_rank,	opdd_bucket,	BONUS_PAYMENT,	ORDER_PAYMENT,	TIP_PAYMENT,
	DT_TYPE,	INCENTIVE_AMT,	
	MISSING_ORDR_AMT, GUAR_PYMNT_AMT, HLTH_CARE_AMT, MNUAL_BLK_BNS_PYMT,Tip_coverage,
	SHOPPER_INCENTIVE, ACQ_INCENTIVE, RFR_INCENTIVE, ERNGS_ADJ_AMT, Launch_INCENTIVE,DNM_INCENTIVE, REACTIVATION_INCENTIVE,SUNDAY_CHURN_INCENTIVE,
	DOTCOM_INCENTIVE,SPECIAL_INCENTIVE,	MORNING_STORE_INCENTIVE,EVENING_STORE_INCENTIVE,STORE_INCENTIVE,MORNING_ZONE_INCENTIVE,EVENING_ZONE_INCENTIVE, Zone_Incentive,
	joyrun_incentive,  NPS_Promoters,	NPS_Detractors,	NPS_Total_Respondents,	SDSAT_DEN,	SDSAT_NUM,	Total_time_spent,	min_time,	
	Total_time_spent_rows,	min_time_rows, Total_time_spent_spark_now, Total_time_spent_spark_now_rows, TOT_DURATION_WORK_hy,TOT_DURATION_SPARK_NOW_hy,P2_Time_hy,
	WM_WK,WM_WK_ID,	driver_Wait_time,	fin_circuit_id, Dwell_Time,Pavement_time,Driver_lag_Time, DWT, DRVR_WAIT_TM_NEW_WITH_SIGN_TS, --dwell time related metrics--
	Old_Driver_Signature_TS,DRIVER_PIN_OR_SIGNATURE_TS,DRIVER_SIGNATURE_TS, ALCOHOL_IND, CBSA_SPARK,DRVR_ARRIVAL_MINUTES,PLANNED_MILES, DRVR_TO_STORE_DIST_MILES, LAST_MILE_TIME, ORDER_READY_TS,OTP_FLAG,GIF_PICK_DUE_TS, OTP_GIF_FLAG,
	--columns for daas 
    CLNT_PCKUP_FROM_NM, DLVR_PRIORITY_NM, DLVR_CLNT_ID, FULFMT_TYPE_CD,ORDER_SVC_TYPE_NM, 
	TRIP_CHNG_CNT,TRIP_CHNG_IND, OVERSIZED_ITEM_IND, REC_SRC,CLIENT, 
	DLVR_SLOT_END_TS_TZ,
	DLVR_SLOT_START_TS_TZ,
	ORDER_CREATED_TS_TZ,
	LATE_DLVR_TS_TZ,
	ERLY_DLVR_TS_TZ,	
	SVC_ID,
	Order_Size,		--Order_Size column
	--COLUMNS FOR WEIGHT AND VOLUME
	PKG_WT_QTY_LBS,DLVR_PKG_VOL_QTY_CFT, Quantity
	--Role
	,DOM,CITY,STATE_CD,REGION
	,NO_DRV_CANC_OLD
	,PICKER_TYPE_NM
	,first_assgn_carrier_nm
	,POSTAL_CD,
	SPARK_NOW_DRV_SLOT,
    SPARK_NOW_DLY_DRV_SLOT,
	COLCHAIN_VIOLATION_TS_TZ
	, NUDGE_IND
	,AUTO_REBOOK_IND
	,NUDGE_TS_TZ
	,AUTO_REBOOK_TS_TZ,
	PCKUP_TS_TZ,
	TRIP_PLAND_DUR_SEC_QTY,
	COLCHAIN_VIOLATION_IND,
	COLD_CHAIN_VIOLATION,
	COLD_CHAIN_ITEM_IND,
	ADR_Ind_trip,
	GIF_Delivered_TS,
	Converted_to_pickup_ind,
	CANCL_REQ_TS_TZ,
	DRIVER_CANCELLED_TS_TZ,
	DRIVER_DROPPED_TS_TZ,
	CANCEL_CATEGORY,
	CANCEL_SUB_CATEGORY,
	on_time_arrival,
	Late_Carrier_Assignment,
	expected_arrival_time,
	ORDER_PLACED_TS,
	DCSAT_promoters,
  DCSAT_Total_respondents,
  DCSAT_ONEAPP_promoters,
DCSAT_ONEAPP_Total_respondents,
DCSAT_GLASS_promoters,
DCSAT_GLASS_Total_respondents,
DCSAT_COMMENTS,
TOT_ITEMS,
  FIRST_OFFER_PUBLISH_TS_TZ,
  PICK_START_LCL_TS, --vn53vov
  PICK_END_LCL_TS,
  DRIVER_SEARCH_TIME,
		DRIVER_ARRIVAL_GAP,
		DRIVER_TIME_TO_STORE,
		DRIVER_PRE_ARRIVAL_TIME,
		DRIVER_DELIVERED_TIME,
		DELIVERY_DRIVING_TIME,
		SHOPPER_PICK_PAYMENT ,
		SHOPPER_BLANK_BONUS_AMT,
	    SHOPPER_ENTRY_FEE_AMT,
	    SHOPPER_UNITS_AMT,
	    SHOPPER_EXIT_FEE_AMT,
	    SHOPPER_TRIP_CAPPING_AMT,
	    SHOPPER_ITEMS_AMT,
		ML_BASE_PRICE_AMT,ML_BASE_PRICE_CAPPING_AMT,
		ML_BASE_ADJUSTMENT, --vn53vov
		SHOPPER_EXPRESS,
ESTIMATED_DISTANCE_AMT ,
DELIVERED_EXTRA_AMT,
SURGE_PRICE_AMT ,
WAIT_TIME_AMT,
RETURNED_AMT ,
BLANK_BONUS_AMT ,
ARRIVED_AT_STORE_AMT ,
BASE_PRICE_CAPPING_AMT ,
DELIVERED_OR_ATTEMPTED_AMT ,
ORDER_SIZE_AMT,
EXTRA_HEAVY_ORDER_AMT,
HEAVY_ORDER_AMT,
APARTMENT_PYMT_AMT,
EASY_RTNS_AMT,
EASY_RTNS_PARTIAL_AMT,
CANCELLATION_FEE,
EST_SCHED_DRIVE_TIME_FEE_LMT,
EST_UNSCHED_DRIVE_TIME_FEE_LMT,
EST_UNSCHED_BILLABLE_WEIGHT_FEE, 
EST_SCHED_BILLABLE_WEIGHT_FEE ,
EST_AE_BILLABLE_WEIGHT_FEE,
CHAINING_COMPLEXITY_FEE,
MARKET_FACTOR_AMT,
--
--ORDER_SRC_ID,
LAT_NBR, LONG_NBR,
DAAS_Cancel_reason_desc, WM_Cancel_reason_desc,
Daas_Cancel_reason_desc_trip, WM_Cancel_reason_desc_trip,
SHPR_Cancel_reason_desc, SHPR_Cancel_reason_desc_trip,
CUST_ZIP5
) ; 



CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1 AS
(
SELECT * FROM LMD_DA.SPARK_DELIVERY_DS_ALL
WHERE 
-- (upper(first_assgn_carrier_nm)='SPARK' OR upper(CARRIER_ORG_NM)='SPARK') 
     -- AND 
	 SPARK_ZONE <> 'Warrington #5649' 
	 --AND (DLVR_CLNT_ID NOT IN ('1019') OR DLVR_CLNT_ID IS NULL)

);

CREATE OR REPLACE TABLE LMD_DA.SPARK_STORE_HIST AS(
select distinct a.store_id, A.WM_WK , COALESCE((a.wm_wk_Id-b.wm_wk_id),0)+1 AS SPARK_DURATION
from LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1 A
LEFT JOIN (SELECT STORE_ID, MIN(WM_WK_ID) AS WM_WK_ID FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1 GROUP BY 1) B
ON A.STORE_ID=B.STORE_ID
);

--Add the rolled order's car req ts and delivered ts

CREATE OR REPLACE TABLE LMD_DA.ROLLED_ORDER_TS AS(
SELECT A.SALES_ORDER_NUM, A.TRIP_ID, A.PO_NUM,
B.ORDER_ROLLED_CAR_REQ,
B.ORDER_ROLLED_DEL
FROM
(
SELECT SALES_ORDER_NUM, TRIP_ID, PO_NUM 
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1
WHERE Carrier_Dlvr_Ts_Tz is null AND TRIP_CHNG_IND = 1
AND FMT_TYPE IN (7,9)
GROUP BY 1,2,3
) A
LEFT JOIN
(
SELECT SALES_ORDER_NUM, PO_NUM,
MIN(CAR_REQ_TS_TZ) AS ORDER_ROLLED_CAR_REQ,
MIN(Carrier_Dlvr_Ts_Tz) AS ORDER_ROLLED_DEL
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1
WHERE Carrier_Dlvr_Ts_Tz IS NOT NULL
GROUP BY 1,2
) B
ON A.SALES_ORDER_NUM = B.SALES_ORDER_NUM
AND A.PO_NUM = B.PO_NUM
);

--To find the max of trip change count
CREATE OR REPLACE TABLE LMD_DA.ROLLED_ORDER_COUNT AS
(
SELECT SALES_ORDER_NUM, PO_NUM, MAX(TRIP_CHNG_CNT) AS SLOT_ROLL
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1
WHERE TRIP_CHNG_IND = 1 AND FMT_TYPE IN (7,9)
GROUP BY 1,2
);

--creating a table for spark launch dates mapped to correct internal_store_ids
 CREATE OR REPLACE TABLE LMD_DA.SPARK_LAUNCH_DATE2 AS (
  SELECT *, 
  CASE WHEN LOWER(Client) LIKE '%walmart%' THEN CAST(Store_ID AS STRING)
    ELSE Pickup_Point_Id 
    END AS INTERNAL_STORE_NBR,
  CASE WHEN Launch_Type = 'DAAS' THEN STORE_ID
    END AS DAAS_EXT_STORE_NBR
  FROM LMD_DA.SPARK_LAUNCH_DATE --- updated as the table not present in DI
  WHERE Store_ID IS NOT NULL 
 );  


CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL2 AS (
SELECT E.*, SLD.DAAS_EXT_STORE_NBR, SLD.Launch_Date AS SPARK_LAUNCH_DATE
FROM
(SELECT D.*, 
--Maximum slot roll value was given to the first record
--CASE WHEN PO_RN = 1 AND RLC.SLOT_ROLL IS NOT NULL THEN RLC.SLOT_ROLL ELSE NULL END AS SLOT_ROLL
RLC.SLOT_ROLL AS SLOT_ROLL
FROM
(SELECT A.*, B.SPARK_DURATION,
C.ORDER_ROLLED_CAR_REQ,
C.ORDER_ROLLED_DEL,
ROW_NUMBER() OVER(PARTITION BY A.SALES_ORDER_NUM, A.PO_NUM ORDER BY FIRST_OFFER_PUBLISH_TS_TZ ASC) AS PO_RN
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL1 A
LEFT JOIN LMD_DA.SPARK_STORE_HIST B
ON A.STORE_ID=B.STORE_ID
AND A.WM_WK=B.WM_WK
LEFT JOIN LMD_DA.ROLLED_ORDER_TS C
ON A.SALES_ORDER_NUM = C.SALES_ORDER_NUM
AND A.TRIP_ID = C.TRIP_ID
AND A.PO_NUM = C.PO_NUM
) D
LEFT JOIN LMD_DA.ROLLED_ORDER_COUNT RLC
ON D.SALES_ORDER_NUM = RLC.SALES_ORDER_NUM
AND D.PO_NUM = RLC.PO_NUM) E 
LEFT JOIN LMD_DA.SPARK_LAUNCH_DATE2 SLD
ON CAST(E.STORE_ID AS STRING) = SLD.INTERNAL_STORE_NBR
AND UPPER(E.CLIENT)= UPPER(SLD.CLIENT)
);

--capturing cancellation reasons for DaaS at Sales-order level 

CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL3 AS(
SELECT *,
		IF(DAAS_CANCEL_CATEGORY = 'LMD_Cancellation' ,1,0) AS DAAS_LMD_CANCELLATION,
		IF(DAAS_CANCEL_CATEGORY = 'Non_LMD_Cancellation',1,0) AS DAAS_NON_LMD_CANCELLATION
		FROM (
SELECT *, 
CASE WHEN DAAS_CANCEL_SUBCATEGORY IN ('CNCL_by_Customer', 'CNCL_Sysytem_App_issue', 'CNCL_Other_NON_LMD', 'CNCL_Others', 'CNCL_Store_Issue', 'CNCL_Long_wait_time')
	THEN 'Non_LMD_Cancellation'	
WHEN DAAS_CANCEL_SUBCATEGORY IN ('CNCL_by_Driver', 'CNCL_Other_LMD')
	THEN 'LMD_Cancellation'
WHEN DAAS_CANCEL_SUBCATEGORY = 'No_Driver_Cancellation'
	THEN  'No_Driver_Cancellation'
END AS DAAS_CANCEL_CATEGORY		
FROM (
(
WITH CANCE_TEMP AS
	(SELECT 
		*,
		CASE 
					WHEN DAAS_Cancel_reason_desc in ('Order: Not Ready') 
						or LOWER(DAAS_Cancel_reason_desc) LIKE '%store%' then 'CNCL_Store_Issue'
					WHEN lower(DAAS_Cancel_reason_desc) LIKE '%customer%' then 'CNCL_by_Customer'
					WHEN DAAS_Cancel_reason_desc in ('Driver: No Show','Driver no show', 'Driver: No Driver Available') then 'No_Driver_Cancellation'
					WHEN DAAS_Cancel_reason_desc in ('Driver: Refused Order','I have an emergency', 'Accepted by mistake',
												'Vehicle: Infant/Toddler/Young Child Present',
												'Driver: Inappropriate Driver Conduct') THEN 'CNCL_by_Driver'
					WHEN LOWER(DAAS_Cancel_reason_desc) LIKE '%system%' or LOWER(DAAS_Cancel_reason_desc) LIKE '%app issue%' 
						then 'CNCL_Sysytem_App_issue'
					WHEN DAAS_Cancel_reason_desc in ('Long wait time') then 'CNCL_Long_wait_time'
					WHEN DAAS_Cancel_reason_desc in ('Driver: Previous Driver Rejected', 'Driver: Info Does Not Match', 
						'Cold chain compliance violated','Driver: Previously Blocked') OR LOWER(DAAS_Cancel_reason_desc) LIKE '%vehicle%' then 'CNCL_Other_LMD'
					WHEN DAAS_Cancel_reason_desc in ('Long wait time', 'Driver: Unable to Deliver to Door',
						'Order: Delayed Order is Now Ready', 'Order: Returned but Needs Re-Delivery',
						'Order: Forgot Items','Driver: Additional for Large Order','Removed from Attention Needed',
						'No safe location found','Order not ready','Mark as Dispensed'
						) then 'CNCL_Other_NON_LMD'
					WHEN DAAS_Cancel_reason_desc IN ('Other','Could not find the description for the reasonCode In Dispatcher') OR DAAS_Cancel_reason_desc IS NULL
						THEN 'CNCL_Others'
					ELSE NULL
			END AS DAAS_CANCEL_SUBCATEGORY
   FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL2
   )
   SELECT 
		*,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_Store_Issue' ,1,0) AS DAAS_CNCL_Store_Issue,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_by_Customer',1,0) AS DAAS_CNCL_by_Customer,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_by_Driver',1,0) AS DAAS_CNCL_by_Driver,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_Sysytem_App_issue' ,1,0) AS DAAS_CNCL_Sysytem_App_issue,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_Long_wait_time',1,0) AS DAAS_CNCL_Long_wait_time,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_Other_LMD',1,0) AS DAAS_CNCL_Other_LMD,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_Other_NON_LMD' ,1,0) AS DAAS_CNCL_Other_NON_LMD,
		IF(DAAS_CANCEL_SUBCATEGORY = 'CNCL_Others',1,0) AS DAAS_CNCL_Others,
		IF(DAAS_CANCEL_SUBCATEGORY = 'No_Driver_Cancellation' ,1,0) AS DAAS_NO_DRV_CANC,
--		IF(DAAS_CANCEL_CATEGORY = 'LMD_Cancellation' ,1,0) AS DAAS_LMD_CANCELLATION,
--		IF(DAAS_CANCEL_CATEGORY = 'Non_LMD_Cancellation',1,0) AS DAAS_NON_LMD_CANCELLATION
		
			FROM CANCE_TEMP
))));

--capturing cancellation reasons for DaaS at Trip-level  

CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL4 AS
(
WITH CANCE_TEMP_DAAS_TRIP AS
	(SELECT 
		*,
		CASE		
					WHEN Daas_Cancel_reason_desc_trip in ('I have an emergency', 'Accepted by mistake', 'Driver: Refused Order', 
						'Driver: Previous Driver Rejected', 'Driver: Info Does Not Match', 'Cold chain compliance violated', 'Vehicle: Infant/Toddler/Young Child Present') 
						then 'LMD_Cancellation'
					WHEN Daas_Cancel_reason_desc_trip in ('Other', 'App Issue', 'Long wait time', 'Store: Issue/Outage', 'System: Issue/Outage', 
						'Order: Not Ready', 'Vehicle: Insufficient Space', 'Driver: Unable to Deliver to Door', 
						'Could not find the description for the reasonCode In Dispatcher', 'Customer: Converted to Pickup', 
						'Customer: Requested', 'Order: Delayed Order is Now Ready', 'Order: Returned but Needs Re-Delivery') 
						then 'Non_LMD_Cancellation'	
					WHEN Daas_Cancel_reason_desc_trip in ('Driver: No Show','Driver no show', 'Driver: No Driver Available') 
						then 'No_Driver_Cancellation'
		END AS DAAS_CANCEL_CATEGORY_TRIP		
						
   FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL3
   )
   SELECT 
		*,
		IF(DAAS_CANCEL_CATEGORY_TRIP = 'No_Driver_Cancellation' ,1,0) AS DAAS_NO_DRV_CANC_TRIP		
			FROM CANCE_TEMP_DAAS_TRIP
);

--------
--capturing cancellation reasons for Walmart Spark orders (non-shopper orders) at PO-level 

CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL5 AS(
SELECT *,
		IF(WM_CANCEL_CATEGORY = 'LMD_Cancellation' ,1,0) AS WM_LMD_Cancellation,
		IF(WM_CANCEL_CATEGORY = 'Non_LMD_Cancellation',1,0) AS WM_Non_LMD_Cancellation
FROM (
SELECT *, 
CASE WHEN WM_CANCEL_SUBCATEGORY IN ('CNCL_by_Customer', 'CNCL_Sysytem_App_issue', 'CNCL_Other_NON_LMD', 'CNCL_Others', 'CNCL_Store_Issue')
	THEN 'Non_LMD_Cancellation'	
WHEN WM_CANCEL_SUBCATEGORY IN ('CNCL_by_Driver', 'CNCL_Other_LMD')
	THEN 'LMD_Cancellation'
WHEN WM_CANCEL_SUBCATEGORY = 'No_Driver_Cancellation'
	THEN  'No_Driver_Cancellation'
END AS WM_CANCEL_CATEGORY		
FROM (
(
WITH WM_CANCE_TEMP AS
	(SELECT 
		*,
		CASE 
			
			WHEN WM_Cancel_reason_desc in ('Order: Not Ready') 
				or LOWER(WM_Cancel_reason_desc) LIKE '%store%' then 'CNCL_Store_Issue'
			WHEN lower(WM_Cancel_reason_desc) LIKE '%customer%' and WM_Cancel_reason_desc not in ('Unable to find customer, Not home or Unreachable', 'Customer Address not serviceable') 
				then 'CNCL_by_Customer' 
			WHEN WM_Cancel_reason_desc in ('Order rolled to next day',	'No spark driver available, request Third Party',	
				'Order sent to backup carrier','Order expired in GIF', 'Order rescheduled for next slot','Order rescheduled for next day',
				'Reschedule Initiated by Slot Roll', 'Driver: No Show','Driver no show','Driver: Reschedule Due to No Driver',	'Driver: No Driver Available','Driver: Trip is not started') 
				then 'No_Driver_Cancellation'
			WHEN WM_Cancel_reason_desc in ('Driver: Refused Order','I have an emergency', 'Accepted by mistake', 'Driver: Info Does Not Match',	
				'Driver: Inappropriate Driver Conduct',	'Driver: Alcohol/Drug Suspicion') 
				or LOWER(WM_Cancel_reason_desc) LIKE '%vehicle%' THEN 'CNCL_by_Driver' 
			WHEN LOWER(WM_Cancel_reason_desc) LIKE '%tech failure%' or LOWER(WM_Cancel_reason_desc) LIKE '%system%' or LOWER(WM_Cancel_reason_desc) LIKE '%app issue%' 
				then 'CNCL_Sysytem_App_issue'
			WHEN WM_Cancel_reason_desc IN ('No ID',	'Invalid ID', 'Pick inactivity cancellation by Shopper', 'Driver: Previous Driver Rejected',	
				'Driver: Previously Blocked') or LOWER(WM_Cancel_reason_desc) LIKE '%cold chain%' 
				then 'CNCL_Other_LMD'
			WHEN WM_Cancel_reason_desc in ('Long wait time',  'Order: Returned but Needs Re-Delivery', 'Driver: Unable to Deliver to Door', 'Order: Not Ready', 'Items substituted','Canceled because items unavailable','Mark as Dispensed',
				'No safe location found', 'Order: Delayed Order is Now Ready', 'Removed from Attention Needed', 'Order: Forgot Items', 
				'Unable to find customer, Not home or Unreachable','Unbatching request from AOS for unpicked orders : SparkNow',
				'Driver: Additional for Large Order', 'Order not ready', 'Customer Address not serviceable','Rescheduled as part of 911 cancellation','911 Cancellation','911 cancellation') 
				then 'CNCL_Other_NON_LMD'
			WHEN WM_Cancel_reason_desc IN ('Other','Could not find the description for the reasonCode In Dispatcher') OR WM_Cancel_reason_desc IS NULL
				THEN 'CNCL_Others'
			ELSE NULL
		END AS WM_CANCEL_SUBCATEGORY
   FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL4
   )
   SELECT 
		*,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_Store_Issue' ,1,0) AS WM_CNCL_Store_Issue,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_by_Customer',1,0) AS WM_CNCL_by_Customer,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_by_Driver',1,0) AS WM_CNCL_by_Driver,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_Sysytem_App_issue' ,1,0) AS WM_CNCL_Sysytem_App_issue,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_Other_LMD',1,0) AS WM_CNCL_Other_LMD,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_Other_NON_LMD' ,1,0) AS WM_CNCL_Other_NON_LMD,
		IF(WM_CANCEL_SUBCATEGORY = 'CNCL_Others',1,0) AS WM_CNCL_Others,
		IF(WM_CANCEL_SUBCATEGORY = 'No_Driver_Cancellation' ,1,0) AS WM_NO_DRV_CANC,
--		IF(WM_CANCEL_CATEGORY = 'LMD_Cancellation' ,1,0) AS WM_LMD_Cancellation,
--		IF(WM_CANCEL_CATEGORY = 'Non_LMD_Cancellation',1,0) AS WM_Non_LMD_Cancellation
		
			FROM WM_CANCE_TEMP
))));

---------
--capturing cancellation reasons for Walmart Spark orders (non-shopper orders) at Trip-level 

CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL6 AS
(
WITH WM_CANCE_TEMP_TRIP AS
	(SELECT 
		*,		
		CASE 					
			WHEN WM_Cancel_reason_desc_trip in ('I have an emergency', 'Accepted by mistake', 'No ID', 'Invalid ID') or LOWER(WM_Cancel_reason_desc_trip) 
				LIKE '%driver%' or LOWER(WM_Cancel_reason_desc_trip) LIKE '%cold chain%' or LOWER(WM_Cancel_reason_desc_trip) LIKE '%vehicle%' 
				and WM_Cancel_reason_desc_trip not in ('Driver: No Show','Driver no show','Driver: No Driver Available',	'Driver: Unable to Deliver to Door', 'Driver: Additional for Large Order','Order sent to backup carrier','Order expired in GIF',
				'Order rescheduled for next slot','Order rescheduled for next day',
				'No spark driver available, request Third Party', 'Driver: Reschedule Due to No Driver', 'Driver was not assigned by System')
				then 'LMD_Cancellation'
			WHEN WM_Cancel_reason_desc_trip in ('Other', 'Driver: Unable to Deliver to Door', 'Driver was not assigned by System', 'Long wait time', 
				'No safe location found',	'Removed from Attention Needed',	'Rescheduled as part of 911 cancellation',	'Tech Failure',
				'Could not find the description for the reasonCode In Dispatcher','911 Cancellation','911 cancellation')  OR
				LOWER(WM_Cancel_reason_desc_trip) LIKE '%system%' or LOWER(WM_Cancel_reason_desc_trip) LIKE '%app issue%' 
				or LOWER(WM_Cancel_reason_desc_trip) LIKE '%order%' and WM_Cancel_reason_desc_trip not in ('Order rolled to next day', 'Driver: Refused Order',
				 'Vehicle: Animal in Order Space',	'Vehicle: Chemicals in Order Space')
				then 'WM_Non_LMD_Cancellation'	
			WHEN WM_Cancel_reason_desc_trip in ('Driver: No Show', 'Driver no show','Driver: No Driver Available','Order rolled to next day',	
				'No spark driver available, request Third Party','Order sent to backup carrier',	'Reschedule Initiated by Slot Roll'	,'Driver: Reschedule Due to No Driver','Order expired in GIF','Order rescheduled for next slot','Order rescheduled for next day') 
				AND DRVR_USER_ID IS NULL
				then 'WM_No_Driver_Cancellation'
		END AS WM_CANCEL_CATEGORY_TRIP		
						
   FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL5
   )
   SELECT 
		*,
		IF(WM_CANCEL_CATEGORY_TRIP = 'WM_No_Driver_Cancellation' ,1,0) AS WM_NO_DRV_CANC_TRIP		
			FROM WM_CANCE_TEMP_TRIP
);


--capturing cancellation reasons for shopper orders at PO-level 

CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL7 AS (
SELECT * EXCEPT (CANCEL_CATEGORY, CANCEL_SUB_CATEGORY),
CANCEL_CATEGORY AS OLD_CANCEL_CATEGORY,
CANCEL_SUB_CATEGORY AS OLD_CANCEL_SUB_CATEGORY,
 		IF(SHPR_CANCEL_CATEGORY = 'LMD_Cancellation' ,1,0) AS SHPR_LMD_Cancellation,
		IF(SHPR_CANCEL_CATEGORY = 'Non_LMD_Cancellation',1,0) AS SHPR_Non_LMD_Cancellation
FROM (
SELECT *, 
CASE WHEN SHPR_CANCEL_SUBCATEGORY IN ('CNCL_Store_Issue', 'CNCL_by_Customer', 'CNCL_Sysytem_App_issue', 'CNCL_Other_NON_LMD', 'CNCL_Others')
	THEN 'Non_LMD_Cancellation'	
WHEN SHPR_CANCEL_SUBCATEGORY IN ('CNCL_by_Driver', 'CNCL_Other_LMD')
	THEN 'LMD_Cancellation'
WHEN SHPR_CANCEL_SUBCATEGORY = 'No_Driver_Cancellation'
	THEN  'No_Driver_Cancellation'
END AS SHPR_CANCEL_CATEGORY		
FROM (
WITH SHPR_CANCE_TEMP AS
	(SELECT 
		*,
		CASE 			
			WHEN LOWER(SHPR_Cancel_reason_desc) LIKE '%store%' then 'CNCL_Store_Issue'
			WHEN lower(SHPR_Cancel_reason_desc) LIKE '%customer%' and SHPR_Cancel_reason_desc not in ('Unable to find customer, Not home or Unreachable', 'Customer Address not serviceable') 
				then 'CNCL_by_Customer' 
			WHEN SHPR_Cancel_reason_desc in ('All Items Nil Picked', 'Order rolled to next day',	'No spark driver available, request Third Party',	'Driver no show','Order sent to backup carrier','Order rescheduled for next day','Order rescheduled for next slot',
				'Reschedule Initiated by Slot Roll', 'Driver: No Show',	'Driver: Reschedule Due to No Driver',	'Driver: No Driver Available', 
				'Order: Not Ready', 'Other - Shopper Cancel', 'No_driver_cancellation','Shopper-Redrop' ,'Driver: Trip is not started') 
				then 'No_Driver_Cancellation'
			WHEN SHPR_Cancel_reason_desc in ('Driver: Refused Order','I have an emergency', 'I have an Emergency', 'I have am Emergency', 
				'Accepted by mistake', 'Driver: Info Does Not Match',	'Pick inactivity cancellation by Shopper',
				'Driver: Inappropriate Driver Conduct',	'Driver: Alcohol/Drug Suspicion') or LOWER(SHPR_Cancel_reason_desc) LIKE '%vehicle%' 
				THEN 'CNCL_by_Driver' 
			WHEN LOWER(SHPR_Cancel_reason_desc) LIKE '%tech failure%' or LOWER(SHPR_Cancel_reason_desc) LIKE '%system%' 
				or LOWER(SHPR_Cancel_reason_desc) LIKE '%app issue%' 
				then 'CNCL_Sysytem_App_issue'
			WHEN SHPR_Cancel_reason_desc IN ('No ID',	'Invalid ID', 'Pick inactivity cancellation by Shopper', 'Driver: Previous Driver Rejected',	
				'Driver: Previously Blocked') or LOWER(SHPR_Cancel_reason_desc) LIKE '%cold chain%' 
				then 'CNCL_Other_LMD'
			WHEN SHPR_Cancel_reason_desc in ('Long wait time',  'Order: Returned but Needs Re-Delivery', 'Driver: Unable to Deliver to Door', 'Order: Not Ready', 'Canceled because items unavailable',
				'No safe location found', 'Order: Delayed Order is Now Ready', 'Removed from Attention Needed', 'Order: Forgot Items', 
				'Unable to find customer, Not home or Unreachable',
				'Driver: Additional for Large Order', 'Order not ready', 'Customer Address not serviceable','Rescheduled as part of 911 cancellation','911 Cancellation','911 cancellation') 
				then 'CNCL_Other_NON_LMD'
			WHEN SHPR_Cancel_reason_desc IN ('Other','Could not find the description for the reasonCode In Dispatcher') OR SHPR_Cancel_reason_desc IS NULL
				THEN 'CNCL_Others'
			ELSE NULL
		END AS SHPR_CANCEL_SUBCATEGORY,		
   FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL6
   )
   SELECT 
		*,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_Store_Issue' ,1,0) AS SHPR_CNCL_Store_Issue,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_by_Customer',1,0) AS SHPR_CNCL_by_Customer,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_by_Driver',1,0) AS SHPR_CNCL_by_Driver,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_Sysytem_App_issue' ,1,0) AS SHPR_CNCL_Sysytem_App_issue,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_Other_LMD',1,0) AS SHPR_CNCL_Other_LMD,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_Other_NON_LMD' ,1,0) AS SHPR_CNCL_Other_NON_LMD,
		IF(SHPR_CANCEL_SUBCATEGORY = 'CNCL_Others',1,0) AS SHPR_CNCL_Others,
		IF(SHPR_CANCEL_SUBCATEGORY = 'No_Driver_Cancellation' ,1,0) AS SHPR_NO_DRV_CANC,
			FROM SHPR_CANCE_TEMP
)));

--capturing cancellation reasons for shopper orders at Trip-level 

CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL8 AS
(
WITH SHPR_CANCE_TEMP_TRIP AS
	(SELECT 
		*,		
		CASE 					
			WHEN SHPR_Cancel_reason_desc_trip in ('I have an emergency', 'Accepted by mistake', 'No ID', 'Invalid ID') or LOWER(SHPR_Cancel_reason_desc_trip) 
				LIKE '%driver%' or LOWER(SHPR_Cancel_reason_desc_trip) LIKE '%cold chain%' or LOWER(SHPR_Cancel_reason_desc_trip) LIKE '%vehicle%' 
				and SHPR_Cancel_reason_desc_trip not in ('Driver: No Show', 'Driver no show','Driver: No Driver Available',	'Driver: Unable to Deliver to Door', 'Driver: Additional for Large Order','Order sent to backup carrier','Order rescheduled for next slot',
				'No spark driver available, request Third Party', 'Driver: Reschedule Due to No Driver', 'Driver was not assigned by System')
				then 'LMD_Cancellation'
			WHEN SHPR_Cancel_reason_desc_trip in ('Other', 'Driver: Unable to Deliver to Door', 'Driver was not assigned by System', 'Long wait time', 
				'No safe location found',	'Removed from Attention Needed',	'Rescheduled as part of 911 cancellation',	'Tech Failure',
				'Could not find the description for the reasonCode In Dispatcher','911 Cancellation','911 cancellation')  OR
				LOWER(SHPR_Cancel_reason_desc_trip) LIKE '%system%' or LOWER(SHPR_Cancel_reason_desc_trip) LIKE '%app issue%' 
				or LOWER(SHPR_Cancel_reason_desc_trip) LIKE '%order%' and SHPR_Cancel_reason_desc_trip not in ('Order rolled to next day', 'Driver: Refused Order',
				 'Vehicle: Animal in Order Space',	'Vehicle: Chemicals in Order Space')
				then 'Non_LMD_Cancellation'	
			WHEN SHPR_Cancel_reason_desc_trip in ('Driver: Refused Order','I have an emergency', 'I have an Emergency', 'I have am Emergency', 
				'Accepted by mistake', 'Driver: Info Does Not Match',	'Pick inactivity cancellation by Shopper',
				'Driver: Inappropriate Driver Conduct',	'Driver: Alcohol/Drug Suspicion') 
				then 'SHPR_No_Driver_Cancellation'
		END AS SHPR_CANCEL_CATEGORY_TRIP		
						
   FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL7
   )
   SELECT 
		*,
		IF(SHPR_CANCEL_CATEGORY_TRIP = 'SHPR_No_Driver_Cancellation' ,1,0) AS SHPR_NO_DRV_CANC_TRIP
		FROM SHPR_CANCE_TEMP_TRIP
);


CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL9 AS
(

WITH P1 as (
		-- Combining DaaS, Shopper and other-Walmart cancellation-reasons columns
		SELECT * EXCEPT (WM_Cancel_reason_desc, WM_Cancel_reason_desc_trip, WM_TOT_Cancel_reason_desc, WM_TOT_Cancel_reason_desc_trip, 
		CANCEL_CATEGORY, CANCEL_SUB_CATEGORY, Daas_Cancel_reason_desc_trip, DAAS_Cancel_reason_desc),
		CASE WHEN WM_TOT_NO_DRV_CANC = 0 AND DAAS_NO_DRV_CANC = 0 THEN 0 ELSE 1 END AS NO_DRV_CANC,   --includes WM, Shopper and DaaS
		CASE WHEN WM_TOT_Cancel_reason_desc IS NULL THEN DAAS_Cancel_reason_desc ELSE WM_TOT_Cancel_reason_desc END AS WM_TOT_Cancel_reason_desc,   --includes WM, Shopper and DaaS at PO level 
		CASE WHEN WM_TOT_Cancel_reason_desc_trip IS NULL THEN Daas_Cancel_reason_desc_trip ELSE WM_TOT_Cancel_reason_desc_trip END AS TOT_Cancel_reason_desc_trip,   --includes WM, Shopper and DaaS at trip level 
		-- CASE WHEN CANCEL_CATEGORY IS NULL THEN DAAS_CANCEL_CATEGORY ELSE CANCEL_CATEGORY END AS CANCEL_CATEGORY,   --includes WM, Shopper and DaaS at PO level 
		-- CASE WHEN CANCEL_SUB_CATEGORY IS NULL THEN DAAS_CANCEL_SUBCATEGORY ELSE CANCEL_SUB_CATEGORY END AS CANCEL_SUB_CATEGORY   --includes WM, Shopper and DaaS at PO level 
		CASE WHEN WM_TOT_Cancel_reason_desc IS NULL AND CANCEL_CATEGORY IS NOT NULL THEN DAAS_CANCEL_CATEGORY
			WHEN CANCEL_CATEGORY IS NULL THEN DAAS_CANCEL_CATEGORY
			ELSE CANCEL_CATEGORY END AS CANCEL_CATEGORY,   --includes WM, Shopper and DaaS at PO level 
		CASE WHEN WM_TOT_Cancel_reason_desc IS NULL AND CANCEL_SUB_CATEGORY IS NOT NULL THEN DAAS_CANCEL_SUBCATEGORY
			WHEN CANCEL_SUB_CATEGORY IS NULL THEN DAAS_CANCEL_SUBCATEGORY
			ELSE CANCEL_SUB_CATEGORY END AS CANCEL_SUB_CATEGORY   
			
		FROM(
		(SELECT * EXCEPT(SHPR_NO_DRV_CANC, WM_NO_DRV_CANC, SHPR_NO_DRV_CANC_TRIP,  WM_LMD_Cancellation, WM_Non_LMD_Cancellation,
		SHPR_LMD_Cancellation, SHPR_Non_LMD_Cancellation, SHPR_Cancel_reason_desc),
		--CANCEL_CATEGORY AS OLD_CANCEL_CATEGORY,
		--CANCEL_SUB_CATEGORY AS OLD_CANCEL_SUB_CATEGORY,
		CASE WHEN WM_NO_DRV_CANC = 0 AND SHPR_NO_DRV_CANC = 0 THEN 0 ELSE 1 END AS WM_TOT_NO_DRV_CANC,
		CASE WHEN WM_NO_DRV_CANC_TRIP = 0 AND SHPR_NO_DRV_CANC_TRIP = 0 THEN 0 ELSE 1 END AS WM_TOT_NO_DRV_CANC_TRIP,
		CASE WHEN SHPR_LMD_Cancellation = 0 AND WM_LMD_Cancellation = 0 THEN 0 ELSE 1 END AS WM_TOT_LMD_CANCELLATION, 
		--CASE WHEN SHPR_LMD_CANCELLATION_TRIP = 0 AND WM_LMD_CANCELLATION_TRIP = 0 THEN 0 ELSE 1 END AS WM_TOT_LMD_CANCELLATION_TRIP,
		CASE WHEN SHPR_Non_LMD_Cancellation = 0 AND WM_Non_LMD_Cancellation = 0 THEN 0 ELSE 1 END AS WM_TOT_NON_LMD_CANCELLATION,
		--CASE WHEN SHPR_NON_LMD_CANCELLATION_TRIP = 0 AND WM_NON_LMD_CANCELLATION_TRIP = 0 THEN 0 ELSE 1 END AS WM_TOT_NON_LMD_CANCELLATION_TRIP,
		CASE WHEN WM_Cancel_reason_desc IS NULL THEN SHPR_Cancel_reason_desc ELSE WM_Cancel_reason_desc END AS WM_TOT_Cancel_reason_desc,   --includes WM, Shopper
		CASE WHEN WM_Cancel_reason_desc_trip IS NULL THEN SHPR_Cancel_reason_desc_trip ELSE WM_Cancel_reason_desc_trip END AS WM_TOT_Cancel_reason_desc_trip,   --includes WM, Shopper
		-- CASE WHEN WM_CANCEL_CATEGORY IS NULL THEN SHPR_CANCEL_CATEGORY ELSE WM_CANCEL_CATEGORY END AS CANCEL_CATEGORY,   --includes WM, Shopper
		-- CASE WHEN WM_CANCEL_SUBCATEGORY IS NULL THEN SHPR_CANCEL_SUBCATEGORY ELSE WM_CANCEL_SUBCATEGORY END AS CANCEL_SUB_CATEGORY   --includes WM, Shopper
		CASE WHEN WM_Cancel_reason_desc IS NULL AND WM_CANCEL_CATEGORY IS NOT NULL THEN SHPR_CANCEL_CATEGORY
			 WHEN WM_CANCEL_CATEGORY IS NULL THEN SHPR_CANCEL_CATEGORY 
             ELSE WM_CANCEL_CATEGORY END AS CANCEL_CATEGORY,   --includes WM, Shopper
		CASE WHEN WM_Cancel_reason_desc IS NULL AND WM_CANCEL_SUBCATEGORY IS NOT NULL  THEN SHPR_CANCEL_SUBCATEGORY 
			 WHEN WM_CANCEL_SUBCATEGORY IS NULL THEN SHPR_CANCEL_SUBCATEGORY 
             ELSE WM_CANCEL_SUBCATEGORY END AS CANCEL_SUB_CATEGORY   --includes WM, Shopper
		FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL8 

		)
)	
),
P2 AS (
select distinct main.*,
	CASE WHEN del=0 and new_rsn = '1' THEN 1 ELSE 0 END AS NO_DRV_CANC_new,  -- FILTERING FOR CANCELLED ORDERS
	SHPR_CANC.NON_CANCELLED_SHOPPER_SALES_ORDERS,
	DAAS_CANC.NON_CANCELLED_DAAS_SALES_ORDERS
from P1 main													
left join
(		select * from (
			select distinct *, rank() over(Partition by SALES_ORDER_NUM, PO_NUM order by trip_count desc) as rnk from(
				select distinct SALES_ORDER_NUM, PO_NUM, new_rsn, count(*) trip_count from(
					select *, if(ndc=1, '1', rsn_cd) as new_rsn from(
						SELECT distinct SALES_ORDER_NUM, PO_NUM, trip_id, CARRIER_DLVR_TS_TZ,
						
-----------------------------------------------	NDC Logic:	------------------------------------------------------------------------------------------------------------		
						
						CASE WHEN COALESCE(OFFER_PUBLISHED,OFFER_BROADCASTED, OFFER_BROADCASTED_WITH_SURGE) IS NULL THEN 0   -- Offer not made
		 					ELSE		-- Offer made
								(
								CASE
								WHEN coalesce(ACCEPTED, BROADCAST_ACCEPTED, BROADCAST_WITH_SURGE_ACCEPTED,0)=0 		-- no drivers accepted = NDC						
								THEN  	1
								ELSE(
										CASE 
										WHEN ORDER_READY_TS IS NULL THEN 0
										ELSE																			-- To exclude Order Not Ready cases
											(
											CASE when COALESCE(ENR_PICKUP_TS_TZ, AT_PICKUP_TS_TZ, LOADED_TS_TZ) IS NULL		-- accepted but not reached store = NDC
											THEN 1	
											else 
													(
													CASE WHEN CLIENT <> 'Advance Auto Parts' THEN 0
													ELSE 
														(
														CASE 
														WHEN CANCL_REQ_TS_TZ IS NOT NULL AND CAR_REQ_TS_TZ IS NULL
														THEN (CASE 
																	WHEN TIMESTAMP_DIFF(CANCL_REQ_TS_TZ,ORDER_CREATED_TS_TZ,minute) < 3 
																	THEN 0 ELSE 1 END)
														WHEN CANCL_REQ_TS_TZ IS NOT NULL AND CAR_REQ_TS_TZ IS NOT NULL
														THEN (CASE 
																	WHEN (COALESCE(DROPPED,BROADCAST_DROPPED,
																					BROADCAST_WITH_SURGE_DROPPED,0) != 0 OR
																					DRIVER_DROPPED_TS_TZ IS NOT NULL)
																	THEN 1 
																	WHEN TIMESTAMP_DIFF(CANCL_REQ_TS_TZ,CAR_REQ_TS_TZ,minute) > 15
																			AND COALESCE(AT_PICKUP_TS_TZ) IS NULL
																	THEN 1
																	WHEN TIMESTAMP_DIFF(CANCL_REQ_TS_TZ,CAR_REQ_TS_TZ ,minute) < 15
																			 AND (COALESCE(DROPPED,BROADCAST_DROPPED,
																				BROADCAST_WITH_SURGE_DROPPED,0) = 0 OR
																				DRIVER_DROPPED_TS_TZ IS NULL )
																	THEN 0
																	WHEN TIMESTAMP_DIFF(CANCL_REQ_TS_TZ,CAR_REQ_TS_TZ, minute) < 15
																			 AND COALESCE(ENR_PICKUP_TS_TZ,AT_PICKUP_TS_TZ) IS NOT NULL
																	THEN 0
																	ELSE 0 END
																)
															else 0 END
														)END
													)end 
											) end
									) end 	
								)END AS NDC,
								
							NO_DRV_CANC, TOT_Cancel_reason_desc_trip as rsn_cd

						FROM P1
			)
		)
	group by 1,2,3 order by 1) ) where rnk=1 AND new_rsn='1'
)	a
ON a.sales_order_num = main.sales_order_num and IFNULL(a.po_num,'0') = IFNULL(main.po_num,'0')
left join 
(
	select * from (
		select distinct sales_order_num, po_num, 
		CASE WHEN MAX(UPPER(REC_SRC))='DISPATCHER' AND MAX(UPPER(STS_DESC))='CANCELLED'	THEN					
				sum(if(CARRIER_DLVR_TS_TZ is null, 0, 1))+ sum(if(RETURNED_TS_TZ is null, 0, 1)) 
			WHEN MAX(UPPER(REC_SRC))='DAAS' THEN 
				sum(if(CARRIER_DLVR_TS_TZ is null, 0, 1))+ sum(if(RETURNED_TS_TZ is null, 0, 1)) 
			END as del
		FROM P1
		group by 1,2)
)	b
ON main.sales_order_num = b.sales_order_num and IFNULL(main.po_num,'0') = IFNULL(b.po_num,'0')
-- Ticket 661- Update shopper cancellation - VN52GZM - 14 Mar 2022 (MODIFIED ON 12 MAY 2022 - CONSIDERED RETURNED ORDERS AS WELL)
left join
(
	SELECT 
		DISTINCT SALES_ORDER_NUM, 
		'Y' AS NON_CANCELLED_SHOPPER_SALES_ORDERS
	FROM P1 
	WHERE  UPPER(PICKER_TYPE_NM) = 'SHOPPER' 
	AND (UPPER(STS_DESC) = 'SHIPPED' 
		OR CARRIER_DLVR_TS_TZ IS NOT NULL 
		OR ENR_RETURN_TS_TZ IS NOT NULL 
		OR RETURNED_TS_TZ IS NOT NULL)
) AS SHPR_CANC
ON MAIN.SALES_ORDER_NUM = SHPR_CANC.SALES_ORDER_NUM
-- DAAS ORDER STS_DESC UPDATING AS FINALLY DELIVERED ORDERS ARE MARKED AS CANCELLED.
left join
(
	SELECT 
		DISTINCT SALES_ORDER_NUM, 
		'Y' AS NON_CANCELLED_DAAS_SALES_ORDERS
	FROM P1 
	WHERE  UPPER(REC_SRC) = 'DAAS' 
	AND (CARRIER_DLVR_TS_TZ IS NOT NULL 
		OR ENR_RETURN_TS_TZ IS NOT NULL 
		OR RETURNED_TS_TZ IS NOT NULL)
) AS DAAS_CANC
ON MAIN.SALES_ORDER_NUM = DAAS_CANC.SALES_ORDER_NUM
)
-- TICKET 662 - SHOPPER CANCELALTION UPDATE - VN52GZM - 15 MARCH 2022
SELECT 
	SALES_ORDER_NUM, po_num,OG_MKT_NM, Store_id, Slot_From_TS, Slot_To_TS, ORDER_DROP_TS, Dropped_after_hours,
	FMT_TYPE, DT_TYPE, AE_IND, SVC_ID, Spark_ZONE, CBSA_SPARK, Order_Size, first_assgn_carrier_nm, TRIP_ID,
	DRVR_USER_ID, ALCOHOL_IND, PLANNED_MILES, DRVR_TO_STORE_DIST_MILES, PKG_WT_QTY_LBS, DLVR_PKG_VOL_QTY_CFT, Quantity, TRIP_CHNG_CNT, TRIP_CHNG_IND,
	CLNT_PCKUP_FROM_NM, DLVR_PRIORITY_NM, DLVR_CLNT_ID, FULFMT_TYPE_CD, ORDER_SVC_TYPE_NM,
	-- easy returns flag  - vn53ozo 2022-08-01
	CASE WHEN FULFMT_TYPE_CD = 'CURBSIDE' AND ORDER_SVC_TYPE_NM = 'RETURN'
			THEN 1 ELSE 0 END AS EASY_RETURN_IND,
	OVERSIZED_ITEM_IND, REC_SRC, PICKER_TYPE_NM,
	COLCHAIN_VIOLATION_IND,COLD_CHAIN_VIOLATION,
	COLD_CHAIN_ITEM_IND, ADR_Ind_trip,	
	CASE 
		WHEN SLOT_DT >= '2022-03-02' AND UPPER(PICKER_TYPE_NM) = 'SHOPPER' AND UPPER(NON_CANCELLED_SHOPPER_SALES_ORDERS) = 'Y' THEN 'Shipped'
		WHEN UPPER(REC_SRC) = 'DAAS' AND UPPER(NON_CANCELLED_DAAS_SALES_ORDERS) = 'Y' THEN 'Shipped'
		ELSE STS_DESC
	END AS STS_DESC,
	ORDER_READY_TS, GIF_Delivered_TS, ORDER_PLACED_TS, GIF_PICK_DUE_TS, FIRST_OFFER_PUBLISH_TS_TZ, CAR_REQ_TS_TZ, ENR_PICKUP_TS_TZ,  PICK_START_LCL_TS, PICK_END_LCL_TS, --vn53v0v 
	AT_PICKUP_TS_TZ, LOADED_TS_TZ, ENR_DROPOFF_TS_TZ, TRIP_CREATED_TS_TZ, AT_DROPOFF_TS_TZ, CARRIER_DLVR_TS_TZ, ENR_RETURN_TS_TZ, RETURNED_TS_TZ,
	DISPATCHED_TS_TZ, OLD_DRIVER_SIGNATURE_TS,DRIVER_PIN_OR_SIGNATURE_TS,DRIVER_SIGNATURE_TS, DLVR_SLOT_START_TS_TZ, DLVR_SLOT_END_TS_TZ, LATE_DLVR_TS_TZ, ERLY_DLVR_TS_TZ, COLCHAIN_VIOLATION_TS_TZ,
	 NUDGE_IND,AUTO_REBOOK_IND,NUDGE_TS_TZ, AUTO_REBOOK_TS_TZ,PCKUP_TS_TZ,TRIP_PLAND_DUR_SEC_QTY,
	DRIVER_CANCELLED_TS_TZ, ORDER_CREATED_TS_TZ, REGION, Slot_DT, SLOT_HR,On_Time_Delivery_EXCEPTION, On_Time_Delivery, On_Time_Delivery_DT_Defect,
	driver_Wait_time, DRVR_WAIT_TM_NEW_WITH_SIGN_TS, Dwell_Time,Pavement_time,Driver_lag_Time, DRVR_ARRIVAL_MINUTES, OTP_FLAG, OTP_GIF_FLAG, Converted_to_pickup_ind, --Dwell time related metrics--
	expected_arrival_time, DRIVER_SEARCH_TIME,DRIVER_ARRIVAL_GAP, DRIVER_TIME_TO_STORE, DRIVER_PRE_ARRIVAL_TIME, DRIVER_DELIVERED_TIME,
	DELIVERY_DRIVING_TIME, CBSA, Launch_Date, Delivery_Provider, DOM, CITY, STATE_CD, WM_WK, WM_WK_ID, CLIENT, CARRIER_ORG_NM, DWT, on_time_arrival,Late_Carrier_Assignment,
	SHOPPER_PICK_PAYMENT,SHOPPER_BLANK_BONUS_AMT,SHOPPER_ENTRY_FEE_AMT,SHOPPER_UNITS_AMT,SHOPPER_EXIT_FEE_AMT,SHOPPER_TRIP_CAPPING_AMT,SHOPPER_ITEMS_AMT,ML_BASE_PRICE_AMT,ML_BASE_PRICE_CAPPING_AMT, ML_BASE_ADJUSTMENT, SHOPPER_EXPRESS, --vn53vov
	EASY_RTNS_AMT, EASY_RTNS_PARTIAL_AMT,CANCELLATION_FEE,EST_SCHED_DRIVE_TIME_FEE_LMT,EST_UNSCHED_DRIVE_TIME_FEE_LMT,EST_UNSCHED_BILLABLE_WEIGHT_FEE, EST_SCHED_BILLABLE_WEIGHT_FEE ,EST_AE_BILLABLE_WEIGHT_FEE,CHAINING_COMPLEXITY_FEE,
	MARKET_FACTOR_AMT,ESTIMATED_DISTANCE_AMT, DELIVERED_EXTRA_AMT, SURGE_PRICE_AMT, WAIT_TIME_AMT, RETURNED_AMT, BLANK_BONUS_AMT, ARRIVED_AT_STORE_AMT,
	BASE_PRICE_CAPPING_AMT, DELIVERED_OR_ATTEMPTED_AMT, ORDER_SIZE_AMT, EXTRA_HEAVY_ORDER_AMT, HEAVY_ORDER_AMT,APARTMENT_PYMT_AMT, BONUS_PAYMENT, cast(ORDER_PAYMENT as numeric) ORDER_PAYMENT, TIP_PAYMENT, INCENTIVE_AMT,
 MISSING_ORDR_AMT, GUAR_PYMNT_AMT, HLTH_CARE_AMT, MNUAL_BLK_BNS_PYMT,Tip_coverage,
	SHOPPER_INCENTIVE, 	ACQ_INCENTIVE, RFR_INCENTIVE, ERNGS_ADJ_AMT, Launch_INCENTIVE,DNM_INCENTIVE, REACTIVATION_INCENTIVE,SUNDAY_CHURN_INCENTIVE,	DOTCOM_INCENTIVE,SPECIAL_INCENTIVE,	MORNING_STORE_INCENTIVE,EVENING_STORE_INCENTIVE,
STORE_INCENTIVE,MORNING_ZONE_INCENTIVE,EVENING_ZONE_INCENTIVE, Zone_Incentive,joyrun_incentive,  SPARK_BATCH_FLAG, OFFER_PUBLISHED, ACCEPTED, DROPPED, REJECTED, EXPIRED, OFFER_BROADCASTED, BROADCAST_ACCEPTED, 
	BROADCAST_DROPPED, BROADCAST_REJECTED, BROADCAST_EXPIRED, OFFER_BROADCASTED_WITH_SURGE, BROADCAST_WITH_SURGE_ACCEPTED, BROADCAST_WITH_SURGE_DROPPED,
	BROADCAST_WITH_SURGE_REJECTED, BROADCAST_WITH_SURGE_EXPIRED, THIRD_PARTY_OFFER_PUBLISH, THIRD_PARTY_EXPIRED, store_classification, NPS_Promoters,
	NPS_Detractors, NPS_Total_Respondents, SDSAT_DEN, SDSAT_NUM, NO_DRV_CANC_OLD, POSTAL_CD, LAT_NBR, LONG_NBR, SPARK_NOW_DRV_SLOT, SPARK_NOW_DLY_DRV_SLOT,
	DCSAT_promoters, DCSAT_Total_respondents, DCSAT_ONEAPP_promoters, DCSAT_ONEAPP_Total_respondents, DCSAT_GLASS_promoters, DCSAT_GLASS_Total_respondents,
	DCSAT_COMMENTS, TOT_ITEMS, fin_circuit_id, Total_time_spent, min_time, rows_total, SHPR_Cancel_reason_desc_trip, Total_time_spent_rows, min_time_rows,
	LAST_MILE_TIME, Total_time_spent_spark_now, Total_time_spent_spark_now_rows, TOT_DURATION_WORK_hy,TOT_DURATION_SPARK_NOW_hy,P2_Time_hy, opdd_num, opdd_den, OPDD_rank, max_OPDD_rank, opdd_bucket, SPARK_DURATION,
	ORDER_ROLLED_CAR_REQ, ORDER_ROLLED_DEL, PO_RN, 
	-- TICKET 767 - UPDATE SLOT ROLL LOGIC - VN52GZM - 20 APRIL 2022
	CASE 
	WHEN TOT_Cancel_reason_desc_trip IN ('Driver: Reschedule Due to No Driver',
										'Order rescheduled for next day',
										'Order rescheduled for next slot',
										'Order rolled to next day',
										'Reschedule Initiated by Slot Roll') THEN 1
	ELSE 0
	END AS SLOT_ROLL
	, DAAS_EXT_STORE_NBR, SPARK_LAUNCH_DATE, DAAS_CANCEL_SUBCATEGORY, DAAS_CNCL_Store_Issue,
	DAAS_CNCL_by_Customer, DAAS_CNCL_by_Driver, DAAS_CNCL_Sysytem_App_issue, DAAS_CNCL_Long_wait_time, DAAS_CNCL_Other_LMD, DAAS_CNCL_Other_NON_LMD,
	DAAS_CNCL_Others, DAAS_NO_DRV_CANC, DAAS_CANCEL_CATEGORY, DAAS_LMD_CANCELLATION, DAAS_NON_LMD_CANCELLATION, DAAS_CANCEL_CATEGORY_TRIP, DAAS_NO_DRV_CANC_TRIP,
	WM_CANCEL_SUBCATEGORY, WM_CNCL_Store_Issue, WM_CNCL_by_Customer, WM_CNCL_by_Driver, WM_CNCL_Sysytem_App_issue, WM_CNCL_Other_LMD, WM_CNCL_Other_NON_LMD,
	WM_CNCL_Others, WM_CANCEL_CATEGORY, WM_CANCEL_CATEGORY_TRIP, WM_NO_DRV_CANC_TRIP, SHPR_CANCEL_SUBCATEGORY, SHPR_CNCL_Store_Issue, SHPR_CNCL_by_Customer,
	SHPR_CNCL_by_Driver, SHPR_CNCL_Sysytem_App_issue, SHPR_CNCL_Other_LMD, SHPR_CNCL_Other_NON_LMD, SHPR_CNCL_Others, SHPR_CANCEL_CATEGORY, OLD_CANCEL_CATEGORY,
	OLD_CANCEL_SUB_CATEGORY, SHPR_CANCEL_CATEGORY_TRIP, WM_TOT_NO_DRV_CANC, WM_TOT_NO_DRV_CANC_TRIP, WM_TOT_LMD_CANCELLATION, WM_TOT_NON_LMD_CANCELLATION,
	NO_DRV_CANC, WM_TOT_Cancel_reason_desc, TOT_Cancel_reason_desc_trip, CANCEL_CATEGORY, CANCEL_SUB_CATEGORY, NO_DRV_CANC_new, NON_CANCELLED_SHOPPER_SALES_ORDERS, 
	NON_CANCELLED_DAAS_SALES_ORDERS, LEFT(CUST_ZIP5,5) AS CUST_ZIP5,DRIVER_DROPPED_TS_TZ,CANCL_REQ_TS_TZ
FROM P2  
);

--- CREATING A BASE FOR DEX ITEMS 
create or replace table `LMD_DA.SALES_ORDER_LINE_DEX` as (
with prod_hir as  
(

 select 
  CATLG_ITEM_ID,
  ORDER_DEPT_NBR as wm_dept_id,  
  ORDER_DEPT_DESC as DEPT_NM, 
  DEPT_CATG_DESC as CATEG_NM, 
  DEPT_SUBCATG_DESC as SUB_CATEG_NM, 
  FINELINE_DESC as fineline
from `wmt-edw-prod.WW_PRODUCT_DL_VM.ITEM_HAT_HRCHY`
where ORDER_DEPT_NBR = 40 
and  upper(DEPT_CATG_DESC) in ('COUGH COLD FLU','ALLERGY', 'PEDIATRICS AND HUMIDIFIERS')
and upper(DEPT_SUBCATG_DESC) in ('COLD AND FLU','SORE THROAT', 'COUGH', 'PED CCF')
and upper(FINELINE_DESC) in ('DEX CCF','DEX SORE THROAT', 'DEX COUGH', 'PED DEXTROMETHORPHAN')
),
dex_orders as 
(
  select 
  sales_order_num, 
  sales_order_line_num, 
  po_num, 
  src.CATLG_ITEM_ID,
  case when src.catlg_item_id=p.catlg_item_id THEN 1 ELSE 0 END AS Dex_flag,
  p.DEPT_NM,
  p.CATEG_NM,
  p.SUB_CATEG_NM,
  ORDER_STATUS_DESC,
  src.store_num as STORE_ID,
  fulfmt_type_desc

  from (select * from `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER_ITEM_360`
  where 
    OP_CMPNY_CD = 'WMT.COM'
	AND SVC_ID IN (19, 20, 31) 
  -- and fulfmt_type_desc in ('SCHEDULED_DELIVERY', 'EXPRESS_DELIVERY', 'IN_HOME_DELIVERY')
  and ORDER_PLCD_LCL_DT between DATE1  AND  CURRENT_DATE("US/Pacific")
  and dlvr_qty>0 ) src
  left join prod_hir p 
  on src.catlg_item_id=p.catlg_item_id
  
  group by 1, 2,3, 4, 5, 6, 7, 8, 9, 10,11
)
select 
    sales_order_num,sales_order_line_num, 
  po_num, 
		dex_flag ,
		DEPT_NM,
  CATEG_NM,
  SUB_CATEG_NM,
  ORDER_STATUS_DESC,
		
  CATLG_ITEM_ID,

  from dex_orders
  WHERE Dex_flag =1
  group by 1, 2, 3,4,5,6,7,8,9

)
;


---CREATING FLAG FOR EVERGREEN ORDERS
CREATE OR REPLACE TABLE `LMD_DA.EVERGREEN_ORDERS`
AS (
SELECT distinct
  B.ext_order_id as SALES_ORDER_NUM
	 from `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_SHOPPER_RSRVTN_NEW` A
       JOIN `wmt-edw-prod.WW_MB_DL_VM.CAPACITY_ORDER_INFORMATION_NEW` B
       on A.rsrvtn_id=B.cpcty_lock_id
  WHERE A.rsrvtn_type_nm = 'EVERGREEN'
  GROUP BY 1);

--Creating Flag for 3 OG Filter
CREATE OR REPLACE TABLE `LMD_DA.three_OG_ORDERS`
AS (
select TRIP_ID, '1' as three_OG_Flag FROM 
(SELECT
 TRIP_ID,
 COUNT(DISTINCT CONCAT(SALES_ORDER_NUM, coalesce(PO_NUM, '0'))) AS OG_FLAG,
 FROM `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL9`
 where fmt_type =7
 GROUP BY 1)
 WHERE OG_FLAG=3
 group by 1
 );


--Creating Final10 table to add W+ flag  vn53vov
--Now PO_NUM will be populated with non null values  for DAAS Orders   with DLVR_REF_ID in DS_ALL FINAL 10 Table and eventually populate ds_all final  - (ticket 989)
CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL10 AS
(
SELECT 
CASE WHEN  UPPER(REC_SRC) ='DAAS' THEN COALESCE(Final9.PO_NUM,LMDTS.DLVR_REF_ID) ELSE Final9.PO_NUM END AS PO_NUM,
 Final9.* except(po_num, carrier_org_nm,OVERSIZED_ITEM_IND,client),
 case when carrier_org_nm ='Ddordash' then 'Doordash'
	  when carrier_org_nm ='Ppup' then 'POINTPICKUP'
	  when carrier_org_nm ='Bunjii' then 'Bungii'
	  else carrier_org_nm end as carrier_org_nm,
 CASE WHEN DLVR_CLNT_ID = '1019' THEN COALESCE(LMP.CLIENT,Final9.CLIENT)
      WHEN DLVR_CLNT_ID IN ('1312','1504','1468','1507','1492','1498','1501','1378') THEN COALESCE(LMP.CLIENT,Final9.CLIENT)
      ELSE Final9.CLIENT END AS CLIENT,
 SO_table.DU_IND ,
 COALESCE(B.DEX_FLAG,0) AS DEX_FLAG,
 -- CASE WHEN EO.SALES_ORDER_NUM = FINAL9.SALES_ORDER_NUM THEN 1 ELSE 0 END AS EVERGREEN_ORDER_FLAG
 -- CASE
		-- WHEN AE_IND = 1 THEN 'Annual Events'
	-- ELSE CASE
		-- WHEN UPPER(REC_SRC) = 'DAAS' THEN 
			-- CASE WHEN UPPER(Final9.CLIENT)= "SAM'S CLUB" AND upper(DLVR_PRIORITY_NM) = 'SAME_DAY_DELIVERY' THEN "Unscheduled Delivery"
				-- WHEN UPPER(Final9.CLIENT)= "SAM'S CLUB" AND upper(DLVR_PRIORITY_NM) IN ('EXPRESS', 'REGULAR', 'SCHEDULED_DELIVERY') THEN "Scheduled Delivery"
				-- WHEN UPPER(Final9.CLIENT)= "THE HOME DEPOT" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "ADVANCE AUTO PARTS" THEN 'Express Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "JOYRUN" THEN 'Express Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "CHICOS" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "RX" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "LOCAL EXPRESS" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "PANKY DOODLE" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "COGNETRY LABS" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "FERGUSON" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "KELLY-MOORE PAINTS" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "WALMART PHARMACY B2C" THEN 'Scheduled Delivery'
				-- WHEN UPPER(Final9.CLIENT)= "UNIHOP" THEN 'Scheduled Delivery'
				-- ELSE 'Scheduled Delivery' END 
		-- --changes for evergreen
		-- WHEN fmt_type = 9 and EO.SALES_ORDER_NUM = FINAL9.SALES_ORDER_NUM THEN 'Evergreen Order'
		-- WHEN fmt_type = 9 THEN 'Express Delivery'
		-- WHEN fmt_type = 7 THEN 'Scheduled Delivery'
		-- WHEN EASY_RETURN_IND = 1 THEN 'Easy Returns'
		-- WHEN ALCOHOL_IND = 1 THEN 'Scheduled Delivery'
		-- ELSE 'Unscheduled Delivery' END END AS fulfilment_type,
       CASE
		    WHEN AE_IND = 1 THEN 'Annual Events'
		    ELSE CASE
		    WHEN UPPER(REC_SRC) = 'DAAS' THEN 
		      CASE WHEN UPPER(Final9.CLIENT)= "SAM'S CLUB" AND upper(final9.DLVR_PRIORITY_NM) = 'SAME_DAY_DELIVERY' THEN "Unscheduled Delivery"
		        WHEN UPPER(Final9.CLIENT)= "SAM'S CLUB" AND upper(final9.DLVR_PRIORITY_NM) IN ('EXPRESS', 'REGULAR', 'SCHEDULED_DELIVERY') THEN "Scheduled Delivery"
		        WHEN UPPER(Final9.CLIENT)= "THE HOME DEPOT" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "ADVANCE AUTO PARTS" THEN 'Express Delivery'
		        WHEN UPPER(Final9.CLIENT)= "JOYRUN" THEN 'Express Delivery'
		        WHEN UPPER(Final9.CLIENT)= "CHICOS" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "RX" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "LOCAL EXPRESS" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "PANKY DOODLE" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "COGNETRY LABS" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "FERGUSON" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "KELLY-MOORE PAINTS" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "WALMART PHARMACY B2C" THEN 'Scheduled Delivery'
		        WHEN UPPER(Final9.CLIENT)= "UNIHOP" THEN 'Scheduled Delivery'
		        ELSE 'Scheduled Delivery' END 
			WHEN EASY_RETURN_IND = 1 THEN 'Easy Returns'
			--changes for evergreen--
		    WHEN upper(DLMD_FMT.fulfmt_type_cd) = 'EXPRESS DELIVERY' and EO.SALES_ORDER_NUM = FINAL9.SALES_ORDER_NUM THEN 'Evergreen Order'
		    WHEN upper(DLMD_FMT.fulfmt_type_cd) = 'EXPRESS DELIVERY' THEN 'Express Delivery'
		    WHEN upper(DLMD_FMT.fulfmt_type_cd) = 'SCHEDULED DELIVERY' THEN 'Scheduled Delivery'
		    WHEN upper(DLMD_FMT.fulfmt_type_cd) = 'IN HOME DELIVERY' THEN 'InHome Delivery'
		    WHEN upper(DLMD_FMT.fulfmt_type_cd) = 'UNSCHEDULED DELIVERY' THEN 'Unscheduled Delivery'
		    ELSE 'Unscheduled Delivery' END END AS fulfilment_type,
		 THREE_og.three_OG_Flag as Three_OG_Flag ,
		 OSD.ORDER_STATUS_DESC ORDER_STATUS_DESC,
		 C.mart_org_nm mart_org_nm,
		 CASE WHEN C.RESIDENTIAL + C.OFFICE + C.BOTHS > 1  THEN 'BOTH' ELSE UPPER(D.SHIP_TO_ADDR_TYPE) END AS SHIP_TO_ADDR_TYPE,
		 DTL.OVERSIZED_ITEM_IND,
		 IP.Internalized_PARCEL_Flag,
		 LMP.CLIENT_LMP
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL9 AS Final9
	LEFT JOIN
	( 
	SELECT DISTINCT SALES_ORDER_NUM,
	CASE WHEN MBRSHP_ID IS NOT NULL THEN 1 ELSE 0 end AS DU_IND
	-- FROM `wmt-edw-prod.WW_GEC_SECURE.SALES_ORDER` --- commenting in schema migration
	from `wmt-edw-prod.WW_MB_DL_SECURE.SALES_ORDER`
	where extract(date from SRC_CRE_TS) between DATE1 and current_date("US/Pacific") --TWO_MONTHS
	)SO_table
	ON Final9.SALES_ORDER_NUM = SO_table.SALES_ORDER_NUM
	
	left join `LMD_DA.three_OG_ORDERS` THREE_og
	on THREE_og.trip_id = Final9.trip_id
	
	LEFT JOIN 
		(
		select TRIP_ID, SALES_ORDER_NBR,PO_NBR, OVERSIZED_ITEM_IND
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` 
		where rpt_dt >= DATE1 -60
		) DTL
	ON Final9.SALES_ORDER_NUM = DTL.SALES_ORDER_NBR AND Final9.TRIP_ID = DTL.TRIP_ID AND COALESCE(FINAL9.PO_NUM,'0')=COALESCE(DTL.PO_NBR,'0')
	
	LEFT JOIN (
			    SELECT 
					SRC_SALES_ORDER_NUM, 
					TRIP_ID,
					MAX(CAST(DLVR_REF_ID AS STRING)) AS DLVR_REF_ID
					FROM
					(
					Select * except (SRC_SALES_ORDER_NUM),
					case 
					when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) 
					when (UPPER(TRIM(CARRIER_STS_CD)) like "%NUDGE%" or UPPER(TRIM(CARRIER_STS_CD)) like "TASK_CANCELLED") then 
					case 
					when SRC_SALES_ORDER_NUM is null then '0' else SRC_SALES_ORDER_NUM
					end ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
					from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT` 
					where SRC_CRE_DT between DATE1 and current_date("US/Pacific") 
					) crr
					where CRR.SRC_CRE_DT between DATE1 and current_date("US/Pacific")  
					AND (CRR.SRC_SALES_ORDER_NUM IS NOT NULL or CRR.SRC_SALES_ORDER_NUM <> '')
					AND (CRR.trip_id IS NOT NULL or CRR.trip_id <> ''  ) 
					AND (CRR.DLVR_REF_ID IS NOT NULL or CRR.DLVR_REF_ID <> ''  )
					AND (carrier_sts_cd != 'TRIP_DROPPED_V2')
					AND UPPER(DATA_SRC_CD) ='DAAS'
					GROUP BY 1,2
		      ) AS LMDTS
	ON Final9.SALES_ORDER_NUM = LMDTS.SRC_SALES_ORDER_NUM AND Final9.TRIP_ID = LMDTS.TRIP_ID
	    LEFT JOIN 
		(
			SELECT sales_order_num,po_num,dex_flag
			FROM `LMD_DA.SALES_ORDER_LINE_DEX`
			WHERE DEX_FLAG =1
			GROUP BY 1,2,3
		) B
	ON B.SALES_ORDER_NUM =FINAL9.SALES_ORDER_NUM AND B.PO_NUM =FINAL9.PO_NUM
	LEFT JOIN `LMD_DA.EVERGREEN_ORDERS` EO
	ON EO.SALES_ORDER_NUM = FINAL9.SALES_ORDER_NUM
    LEFT JOIN 
	         ( 
			  SELECT 
			  store_id,
			  client_lmp,
			  case 
			  when lower(client_lmp)='local marketplace' then concat(rtrim(client), ' LMP') 
			  when lower(client_lmp)='local marketplace on wmp' then concat(rtrim(client), ' WMP') 
			  else rtrim(client)
			  end as CLIENT
			  from     (
					    select DISTINCT
					    B.STORE_NBR AS STORE_ID,
					    A.CLIENT_ALIAS AS CLIENT_LMP,
					    regexp_extract(replace(B.STORE_NM, '[Restaurant]', ''), '^[a-zA-Z ]+', 1) AS CLIENT,
					    FROM `wmt-edw-sandbox.LM_IAD_DAAS.DAAS_STORE_LAUNCH_DIM` AS A
					    JOIN `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.LAST_MI_DLVR_STORE_HIST` AS B
					    ON A.PCKUP_PNT_ID = B.STORE_NBR
					    WHERE B.curr_ind = 1 
					    AND A.CLIENT_ALIAS IN ('Local Marketplace', 'Daily Eats', 'Local Marketplace on WMP')
			            )
			  group by 1,2,3
			) LMP
			ON FINAL9.STORE_ID = LMP.STORE_ID
	LEFT JOIN 
		(
		select distinct SALES_ORDER_NUM,PO_NUM, ORDER_STATUS_DESC
		from `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER_ITEM_360`
		WHERE SVC_ID = 31
		AND upper(FULFMT_TYPE_NM) = 'DELIVERY'
		AND upper(FULFMT_ACES_MODE_NM) = 'LAST_MILE_CARRIER'
		AND upper(ORDER_STATUS_DESC) in ('CANCELLED', 'CANCELLED DUE TO BACKORDER', 'PARTIAL_CANCELLED')
		AND RPT_DT >= DATE1 -60
		) OSD
	ON FINAL9.SALES_ORDER_NUM = OSD.SALES_ORDER_NUM AND COALESCE(FINAL9.PO_NUM,'0') =COALESCE(OSD.PO_NUM,'0')
	LEFT JOIN 
		(
		SELECT 
		 SALES_ORDER_NUM,PO_NUM,  SHIP_TO_ADDR_TYPE 
		FROM  `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.FULFMT_360` 
		WHERE ORDER_PLCD_DT_UTC >= DATE1 -60
		GROUP BY 1,2,3 
		) D
	ON FINAL9.SALES_ORDER_NUM = D.SALES_ORDER_NUM AND COALESCE(FINAL9.PO_NUM,'0')=COALESCE(D.PO_NUM,'0')
	LEFT JOIN 
		(
		 SELECT 
		 SALES_ORDER_NUM,PO_NUM, 
		 CASE WHEN UPPER(mart_org_nm) ='BUSINESS.WALMART.COM' THEN 'Business.Walmart.com'
		 WHEN UPPER(mart_org_nm)='WALMART.COM' THEN 'Walmart.com' ELSE 'OTHERS' END AS mart_org_nm,
		 MAX(CASE WHEN  SHIP_TO_ADDR_TYPE  = 'RESIDENTIAL'  THEN 1 ELSE 0  END) AS RESIDENTIAL, 
		 MAX(CASE WHEN SHIP_TO_ADDR_TYPE  = 'OFFICE' THEN 1 ELSE 0 END) OFFICE,
		 MAX(CASE WHEN UPPER(SHIP_TO_ADDR_TYPE)  = 'BOTH' THEN 1 ELSE 0 END) BOTHS,
		 FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.FULFMT_360` 
		 WHERE ORDER_PLCD_DT_UTC >= DATE1 -60
		 GROUP BY 1,2,3
		) C
	ON FINAL9.SALES_ORDER_NUM = C.SALES_ORDER_NUM AND COALESCE(FINAL9.PO_NUM,'0')=COALESCE(C.PO_NUM,'0')
	
	LEFT JOIN (
	select 
		DISTINCT
	  A.SALES_ORDER_NUM,
	  A.po_num, 
	  'YES' AS Internalized_PARCEL_Flag
	FROM 
	  (
		select distinct 
		  SALES_ORDER_NUM,
		  po_num 
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO` 
		where MULTI_LEG_IND=1 
		AND EXTRACT(DATE FROM SRC_CRE_TS) between date_add(DATE1,interval -20 day) and current_date("US/Pacific")
	--and CRE_DT between date_sub(data_starting_date, interval 10 day) and date_add(data_ending_date, interval 2 day) 
	  ) a
	inner join 
	  (
		select distinct 
		  po_num 
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.SALES_PO_LEG` 
		where ACES_MODE_NM= 'LAST_MILE_CARRIER'
		AND SRC_CREATE_DT between date_add(DATE1,interval -20 day) and current_date("US/Pacific")
	--and SRC_CREATE_DT between date_sub(data_starting_date, interval 10 day) and date_add(data_ending_date, interval 2 day)
	) b 
	on a.po_num = b.po_num
	) IP
	 ON FINAL9.SALES_ORDER_NUM = IP.SALES_ORDER_NUM AND COALESCE(FINAL9.PO_NUM,'0')=COALESCE(IP.PO_NUM,'0')
    left join 
	 (
	     select sales_order_nbr,trip_id,fulfmt_type_cd,
         case when upper(DLVR_TYPE_CD) = 'DAAS' then coalesce(po_nbr,dlvr_task_id) else po_nbr end as po_nbr 
		 from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
		 where rpt_dt >= DATE1 -60
     ) DLMD_FMT
		on Final9.sales_order_num = DLMD_FMT.sales_order_nbr
		and Final9.po_num = DLMD_FMT.po_nbr
		and Final9.trip_id = DLMD_FMT.trip_id	 
);



CREATE OR REPLACE TABLE `wmt-driver-insights.LMD_DA.CANCELLED_PO_FLAG` AS
(

With ds as
(
  Select distinct wm_wk, SALES_ORDER_NUM, po_num, fulfilment_type, PICKER_TYPE_NM, ORDER_STATUS_DESC, CARRIER_DLVR_TS_TZ
  from `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL10`
),


shopper_delivered as
(
  select distinct sales_order_num
  from ds
  where upper(picker_type_nm) = 'SHOPPER'
  and CARRIER_DLVR_TS_TZ is not null
),

final as
(
  Select * from ds
  where sales_order_num not in (select sales_order_num from shopper_delivered)
)

Select sales_order_num,po_num, 
Max(case when upper(picker_type_nm) = 'SHOPPER' and ORDER_STATUS_DESC in ('CANCELLED', 'CANCELLED DUE TO BACKORDER', 'PARTIAL_CANCELLED') and CARRIER_DLVR_TS_TZ is null then 1
when upper(picker_type_nm) = 'ASSOCIATE' and ORDER_STATUS_DESC in ('CANCELLED', 'CANCELLED DUE TO BACKORDER', 'PARTIAL_CANCELLED') and CARRIER_DLVR_TS_TZ is null  then 1
else 0 end) as Cancelled_PO_Flag
from final
group by 1,2

);



CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL11 AS
(
SELECT 
A.PO_NUM
,A.SALES_ORDER_NUM
,A.OG_MKT_NM
,A.Store_id
,A.Slot_From_TS
,A.Slot_To_TS
,A.ORDER_DROP_TS
,A.Dropped_after_hours
,A.FMT_TYPE
,A.DT_TYPE
,A.AE_IND
,A.SVC_ID
,A.Spark_ZONE
,A.CBSA_SPARK
,A.Order_Size
,A.first_assgn_carrier_nm
,A.TRIP_ID
,A.DRVR_USER_ID
,A.ALCOHOL_IND
,A.PLANNED_MILES
,A.DRVR_TO_STORE_DIST_MILES
,A.PKG_WT_QTY_LBS
,A.DLVR_PKG_VOL_QTY_CFT
,A.Quantity
,A.TRIP_CHNG_CNT
,A.TRIP_CHNG_IND
,A.CLNT_PCKUP_FROM_NM
,A.DLVR_PRIORITY_NM
,A.DLVR_CLNT_ID
,A.FULFMT_TYPE_CD
,A.ORDER_SVC_TYPE_NM
,A.EASY_RETURN_IND
,A.REC_SRC
,A.PICKER_TYPE_NM
,A.COLCHAIN_VIOLATION_IND
,A.COLD_CHAIN_VIOLATION
,A.COLD_CHAIN_ITEM_IND
,A.ADR_Ind_trip
,A.STS_DESC
,A.ORDER_READY_TS
,A.GIF_Delivered_TS
,A.ORDER_PLACED_TS
,A.GIF_PICK_DUE_TS
,A.FIRST_OFFER_PUBLISH_TS_TZ
,A.CAR_REQ_TS_TZ
,A.ENR_PICKUP_TS_TZ
,A.PICK_START_LCL_TS
,A.PICK_END_LCL_TS
,A.AT_PICKUP_TS_TZ
,A.LOADED_TS_TZ
,A.ENR_DROPOFF_TS_TZ
,A.TRIP_CREATED_TS_TZ
,A.AT_DROPOFF_TS_TZ
,A.CARRIER_DLVR_TS_TZ
,A.ENR_RETURN_TS_TZ
,A.RETURNED_TS_TZ
,A.DISPATCHED_TS_TZ
,A.OLD_DRIVER_SIGNATURE_TS
,A.DRIVER_PIN_OR_SIGNATURE_TS
,A.DRIVER_SIGNATURE_TS
,A.DLVR_SLOT_START_TS_TZ
,A.DLVR_SLOT_END_TS_TZ
,A.LATE_DLVR_TS_TZ
,A.ERLY_DLVR_TS_TZ
,A.COLCHAIN_VIOLATION_TS_TZ
,A.NUDGE_IND
,A.AUTO_REBOOK_IND
,A.NUDGE_TS_TZ
,A.AUTO_REBOOK_TS_TZ
,A.PCKUP_TS_TZ
,A.TRIP_PLAND_DUR_SEC_QTY
,A.DRIVER_CANCELLED_TS_TZ
,A.ORDER_CREATED_TS_TZ
,A.REGION
,A.Slot_DT
,A.SLOT_HR
,A.On_Time_Delivery_EXCEPTION
,A.On_Time_Delivery
,A.On_Time_Delivery_DT_Defect
,A.driver_Wait_time
,A.DRVR_WAIT_TM_NEW_WITH_SIGN_TS
,A.Dwell_Time -- Dwell time related metrics --
,A.Pavement_time
,A.Driver_lag_Time
,A.DRVR_ARRIVAL_MINUTES
,A.OTP_FLAG
,A.OTP_GIF_FLAG
,A.Converted_to_pickup_ind
,A.expected_arrival_time
,A.DRIVER_SEARCH_TIME
,A.DRIVER_ARRIVAL_GAP
,A.DRIVER_TIME_TO_STORE
,A.DRIVER_PRE_ARRIVAL_TIME
,A.DRIVER_DELIVERED_TIME
,A.DELIVERY_DRIVING_TIME
,A.CBSA
,A.Launch_Date
,A.Delivery_Provider
,A.DOM
,A.CITY
,A.STATE_CD
,A.WM_WK
,A.WM_WK_ID
,case 
 when A.client = "Gigis Cupcakes " then "Gigi's Cupcakes" 
 when right(A.client,2) = "  " then left(A.client,length(A.client)-2) 
 when right(A.client,1) = " " then left(A.client,length(A.client)-1)
 else A.client end as client
,A.DWT
,A.on_time_arrival
,A.Late_Carrier_Assignment
,A.SHOPPER_PICK_PAYMENT
,A.SHOPPER_BLANK_BONUS_AMT
,A.SHOPPER_ENTRY_FEE_AMT
,A.SHOPPER_UNITS_AMT
,A.SHOPPER_EXIT_FEE_AMT
,A.SHOPPER_TRIP_CAPPING_AMT
,A.SHOPPER_ITEMS_AMT
,A.ML_BASE_PRICE_AMT
,A.ML_BASE_PRICE_CAPPING_AMT
,A.ML_BASE_ADJUSTMENT
,A.SHOPPER_EXPRESS
,A.EASY_RTNS_AMT
,A.EASY_RTNS_PARTIAL_AMT
,A.CANCELLATION_FEE
,A.EST_SCHED_DRIVE_TIME_FEE_LMT
,A.EST_UNSCHED_DRIVE_TIME_FEE_LMT
,A.EST_UNSCHED_BILLABLE_WEIGHT_FEE
,A.EST_SCHED_BILLABLE_WEIGHT_FEE
,A.EST_AE_BILLABLE_WEIGHT_FEE
,A.CHAINING_COMPLEXITY_FEE
,A.MARKET_FACTOR_AMT
,A.ESTIMATED_DISTANCE_AMT
,A.DELIVERED_EXTRA_AMT
,A.SURGE_PRICE_AMT
,A.WAIT_TIME_AMT
,A.RETURNED_AMT
,A.BLANK_BONUS_AMT
,A.ARRIVED_AT_STORE_AMT
,A.BASE_PRICE_CAPPING_AMT
,A.DELIVERED_OR_ATTEMPTED_AMT
,A.ORDER_SIZE_AMT
,A.EXTRA_HEAVY_ORDER_AMT
,A.HEAVY_ORDER_AMT
,A.APARTMENT_PYMT_AMT
,A.BONUS_PAYMENT
,A.ORDER_PAYMENT
,CASE WHEN DLVR_CLNT_ID NOT IN ('0','2') THEN TIP.TIP_AMT ELSE A.TIP_PAYMENT END AS TIP_PAYMENT
,A.INCENTIVE_AMT
,A.MISSING_ORDR_AMT
,A.GUAR_PYMNT_AMT
,A.HLTH_CARE_AMT
,A.MNUAL_BLK_BNS_PYMT
,A.Tip_coverage
,A.SHOPPER_INCENTIVE
,A.ACQ_INCENTIVE
,A.RFR_INCENTIVE
,A.ERNGS_ADJ_AMT
,A.Launch_INCENTIVE
,A.DNM_INCENTIVE
,A.REACTIVATION_INCENTIVE
,A.SUNDAY_CHURN_INCENTIVE
,A.DOTCOM_INCENTIVE
,A.SPECIAL_INCENTIVE
,A.MORNING_STORE_INCENTIVE
,A.EVENING_STORE_INCENTIVE
,A.STORE_INCENTIVE
,A.MORNING_ZONE_INCENTIVE
,A.EVENING_ZONE_INCENTIVE
,A.Zone_Incentive
,A.joyrun_incentive
,COALESCE(NSB_DLMD.NON_SPARK_BATCH_FLAG,A.SPARK_BATCH_FLAG) AS BATCH_FLAG
,A.OFFER_PUBLISHED
,A.ACCEPTED
,A.DROPPED
,A.REJECTED
,A.EXPIRED
,A.OFFER_BROADCASTED
,A.BROADCAST_ACCEPTED
,A.BROADCAST_DROPPED
,A.BROADCAST_REJECTED
,A.BROADCAST_EXPIRED
,A.OFFER_BROADCASTED_WITH_SURGE
,A.BROADCAST_WITH_SURGE_ACCEPTED
,A.BROADCAST_WITH_SURGE_DROPPED
,A.BROADCAST_WITH_SURGE_REJECTED
,A.BROADCAST_WITH_SURGE_EXPIRED
,A.THIRD_PARTY_OFFER_PUBLISH
,A.THIRD_PARTY_EXPIRED
,A.store_classification
,A.NPS_Promoters
,A.NPS_Detractors
,A.NPS_Total_Respondents
,A.SDSAT_DEN
,A.SDSAT_NUM
,A.NO_DRV_CANC_OLD
,A.POSTAL_CD
,A.LAT_NBR
,A.LONG_NBR
,A.SPARK_NOW_DRV_SLOT
,A.SPARK_NOW_DLY_DRV_SLOT
,A.DCSAT_promoters
,A.DCSAT_Total_respondents
,A.DCSAT_ONEAPP_promoters
,A.DCSAT_ONEAPP_Total_respondents
,A.DCSAT_GLASS_promoters
,A.DCSAT_GLASS_Total_respondents
,A.DCSAT_COMMENTS
,A.TOT_ITEMS
,A.fin_circuit_id
,A.Total_time_spent
,A.min_time
,A.rows_total
,A.SHPR_Cancel_reason_desc_trip
,A.Total_time_spent_rows
,A.min_time_rows
,A.LAST_MILE_TIME
,A.Total_time_spent_spark_now
,A.P2_Time_hy
,A.Total_time_spent_spark_now_rows
,A.TOT_DURATION_WORK_hy
,A.TOT_DURATION_SPARK_NOW_hy
,A.opdd_num
,A.opdd_den
,A.OPDD_rank
,A.max_OPDD_rank
,A.opdd_bucket
,A.SPARK_DURATION
,A.ORDER_ROLLED_CAR_REQ
,A.ORDER_ROLLED_DEL
,A.PO_RN
,A.SLOT_ROLL
,A.DAAS_EXT_STORE_NBR
,A.SPARK_LAUNCH_DATE
,A.DAAS_CANCEL_SUBCATEGORY
,A.DAAS_CNCL_Store_Issue
,A.DAAS_CNCL_by_Customer
,A.DAAS_CNCL_by_Driver
,A.DAAS_CNCL_Sysytem_App_issue
,A.DAAS_CNCL_Long_wait_time
,A.DAAS_CNCL_Other_LMD
,A.DAAS_CNCL_Other_NON_LMD
,A.DAAS_CNCL_Others
,A.DAAS_NO_DRV_CANC
,A.DAAS_CANCEL_CATEGORY
,A.DAAS_LMD_CANCELLATION
,A.DAAS_NON_LMD_CANCELLATION
,A.DAAS_CANCEL_CATEGORY_TRIP
,A.DAAS_NO_DRV_CANC_TRIP
,A.WM_CANCEL_SUBCATEGORY
,A.WM_CNCL_Store_Issue
,A.WM_CNCL_by_Customer
,A.WM_CNCL_by_Driver
,A.WM_CNCL_Sysytem_App_issue
,A.WM_CNCL_Other_LMD
,A.WM_CNCL_Other_NON_LMD
,A.WM_CNCL_Others
,A.WM_CANCEL_CATEGORY
,A.WM_CANCEL_CATEGORY_TRIP
,A.WM_NO_DRV_CANC_TRIP
,A.SHPR_CANCEL_SUBCATEGORY
,A.SHPR_CNCL_Store_Issue
,A.SHPR_CNCL_by_Customer
,A.SHPR_CNCL_by_Driver
,A.SHPR_CNCL_Sysytem_App_issue
,A.SHPR_CNCL_Other_LMD
,A.SHPR_CNCL_Other_NON_LMD
,A.SHPR_CNCL_Others
,A.SHPR_CANCEL_CATEGORY
,A.OLD_CANCEL_CATEGORY
,A.OLD_CANCEL_SUB_CATEGORY
,A.SHPR_CANCEL_CATEGORY_TRIP
,A.WM_TOT_NO_DRV_CANC
,A.WM_TOT_NO_DRV_CANC_TRIP
,A.WM_TOT_LMD_CANCELLATION
,A.WM_TOT_NON_LMD_CANCELLATION
,A.NO_DRV_CANC
,A.CLIENT_LMP
,A.WM_TOT_Cancel_reason_desc
,A.TOT_Cancel_reason_desc_trip
,A.CANCEL_CATEGORY
,A.CANCEL_SUB_CATEGORY
,A.NO_DRV_CANC_new
,A.NON_CANCELLED_SHOPPER_SALES_ORDERS
,A.NON_CANCELLED_DAAS_SALES_ORDERS
,A.CUST_ZIP5
,A.DRIVER_DROPPED_TS_TZ
,A.CANCL_REQ_TS_TZ
,A.carrier_org_nm
,A.DU_IND
,A.DEX_FLAG
,A.fulfilment_type
,A.Three_OG_Flag
,A.ORDER_STATUS_DESC
,A.mart_org_nm
,A.SHIP_TO_ADDR_TYPE
,A.OVERSIZED_ITEM_IND
,A.Internalized_PARCEL_Flag
,CASE WHEN REC_SRC='DAAS' AND CARRIER_DLVR_TS_TZ IS NULL THEN GOLOCAL_CANCEL.Golocal_WMT_Cancellations END AS Golocal_WMT_Cancellations
,F.Live_Bait_Indicator AS Live_Bait_Indicator
,UNBATCH_IND.Unbatching_IND
,CPF.CANCELLED_PO_FLAG as WMT_cancellations
,CASE WHEN UPPER(REC_SRC)='DAAS' AND CARRIER_DLVR_TS_TZ IS NULL THEN COALESCE(GOLOCAL_CANCEL.Golocal_WMT_Cancellations,0) 
 WHEN UPPER(REC_SRC)<>'DAAS' AND CARRIER_DLVR_TS_TZ IS NULL THEN COALESCE(CPF.CANCELLED_PO_FLAG,0) 
 ELSE 0 END AS CANCELLED_PO_FLAG
,DLMD.PKG_UNATND_ELIG_IND
,NSB_DLMD.NON_SPARK_BATCH_SIZE
,NSB_DLMD.BATCH_ID
,Chain.CHAINING_FLG
,Basket.ACTL_PO_QUANTITY
,Basket.Unit_Price
,Basket.po_GMV
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL10 A
LEFT JOIN (
              SELECT DISTINCT SALES_ORDER_NBR,  1 as Golocal_WMT_Cancellations
              FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
              WHERE (SYS_CNCL_RQ_TS IS NOT NULL OR CUST_CNCL_RQ_TS IS NOT NULL OR ORDER_CNCL_ACTL_TS IS NOT NULL)
              AND DLVR_TYPE_CD = 'DAAS'
              AND EXTRACT(DATE FROM SLOT_START_TS) BETWEEN date_add(DATE1,interval -20 day) and current_date("US/Pacific")
            
) GOLOCAL_CANCEL
ON A.SALES_ORDER_NUM =GOLOCAL_CANCEL.SALES_ORDER_NBR  

LEFT JOIN (
              SELECT TRIP_ID, SALES_ORDER_NBR, 
                DLVR_TASK_ID, MAX(TIP_AMT) TIP_AMT
              FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
             WHERE RPT_DT BETWEEN date_add(DATE1,interval -20 day) and current_date("US/Pacific")
              AND DLVR_CLNT_ID != 0 AND DLVR_CLNT_ID != 2
              GROUP BY 1,2,3
) TIP -- TIP SPECIFICALLY FOR GOLOCAL CLIENTS
ON A.TRIP_ID=TIP.TRIP_ID AND A.SALES_ORDER_NUM =TIP.SALES_ORDER_NBR  AND COALESCE(TIP.DLVR_TASK_ID,'-0')=COALESCE(A.PO_NUM,'-0')
LEFT JOIN (SELECT
  SALES_ORDER_NUM,
  PO_NUM, 'Y' AS Live_Bait_Indicator
FROM `wmt-edw-prod.WW_MB_DL_VM.STORE_FULFMT_ORDER_ITEM_360`
WHERE CATLG_ITEM_ID IN (260568262, 2961235548, 734012509, 36137542, 2045822976)
and EXTRACT(DATE FROM create_TS) between DATE_ADD(Date1, INTERVAL -25 DAY) and current_date("US/Pacific")
) F
ON F.SALES_ORDER_NUM =A.SALES_ORDER_NUM AND COALESCE(F.PO_NUM,'0')=COALESCE(A.PO_NUM,'0')
LEFT JOIN (
		  select 
		  DISTINCT TRIP_ID, 
		  case when upper(right(SRC_SALES_ORDER_NUM,2)) ="-B" then left(SRC_SALES_ORDER_NUM,length(SRC_SALES_ORDER_NUM)-2) ELSE SRC_SALES_ORDER_NUM end as SRC_SALES_ORDER_NUM,
		  po_NUM, 
		  1 AS Unbatching_IND
		from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.LAST_MI_DLVR_TASK_CHNG_EVENT`
		where src_cre_dt >= Date_add(DATE1,Interval -3 day)
		and data_src_cd ='DISPATCHER'
		and Upper(ASSOC_ACTN_NM) IN ( 'RELEASE')
		AND EXCPT_RSN_CD NOT IN ('LMD901','LMD902','3P526', '3P523', '3P527', '3P524', '3P525', '3P532', '3P531' 
								,'3P530', '3P529','3P542','3P543','3P544','3P545','3P546','3P547','3P548','LMD1101','LMD1102','LMD1103','LMD1104',
								'LMD1105','LMD1106','LMD1107','LMD201','LMD202','LMD203','LMD205','LMD1002', 'LMD1001')
		) UNBATCH_IND
ON A.TRIP_ID = UNBATCH_IND.TRIP_ID AND A.SALES_ORDER_NUM=UNBATCH_IND.SRC_SALES_ORDER_NUM AND A.PO_NUM= UNBATCH_IND.PO_NUM

LEFT JOIN `wmt-driver-insights.LMD_DA.CANCELLED_PO_FLAG` CPF
ON A.SALES_ORDER_NUM=CPF.SALES_ORDER_NUM AND A.PO_NUM= CPF.PO_NUM

LEFT JOIN (
			select distinct
			SALES_ORDER_NBR,   
			TRIP_ID,   
			case when upper(DLVR_TYPE_CD) = 'DAAS' then coalesce(po_nbr,dlvr_task_id) else po_nbr end as po_nbr,
			PKG_UNATND_ELIG_IND -- Indicate whether the package can be left unattended at the doorstep. The customer does not have to receive it
			from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
			WHERE RPT_DT >= DATE1-20
			and trip_id is not null
			and sales_order_nbr is not null
		  ) DLMD
ON DLMD.TRIP_ID=A.TRIP_ID AND A.SALES_ORDER_NUM=DLMD.SALES_ORDER_NBR AND A.PO_NUM = DLMD.po_nbr

LEFT JOIN (
		    select SALES_ORDER_NBR,
		    case when upper(DLVR_TYPE_CD) = 'DAAS' then coalesce(po_nbr,dlvr_task_id) else po_nbr end as po_nbr,
		    TRIP_ID,A.BATCH_ID,NON_SPARK_BATCH_SIZE,
		    CASE WHEN UPPER(DLVR_CARRIER_NM) != 'SPARK' AND NON_SPARK_BATCH_SIZE > 1 THEN 1 ELSE NULL END AS NON_SPARK_BATCH_FLAG 
		    FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL` A
		    left join(
					  SELECT 
					  BATCH_ID,
					  COUNT(DISTINCT CASE WHEN upper(DLVR_CARRIER_NM) != 'SPARK' THEN CONCAT(SALES_ORDER_NBR, coalesce(PO_NBR,DLVR_TASK_ID, '0')) end) AS NON_SPARK_BATCH_SIZE
					  FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL`
					  WHERE RPT_DT > DATE1-20
					  GROUP BY 1
					  ) B
					  on A.BATCH_ID = B.BATCH_ID
					  WHERE RPT_DT > DATE1-20
			) NSB_DLMD
			ON A.SALES_ORDER_NUM = NSB_DLMD.SALES_ORDER_NBR
			AND A.PO_NUM = NSB_DLMD.po_nbr
			AND A.trip_id = NSB_DLMD.trip_id	
			left join 
					(
					 SELECT TRIP_ID,  CASE WHEN COUNT (DISTINCT store_id) > 1 THEN 'Chained' else 'Non-Chained' END AS CHAINING_FLG
					 from `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL`
					 where slot_dt between '2023-09-01' and current_date
					 and carrier_org_nm = 'SPARK'
					 group by 1
					) Chain
			on A.trip_id = Chain.trip_id
			LEFT JOIN
			        (
					 select
					 SALES_ORDER_NUM,
					 PO_NUM,
					 SUM(ACTL_PO_QTY) AS ACTL_PO_QUANTITY,
					 SUM(Unit_price) AS Unit_Price,
					 sum(ACTL_PO_QTY*UNIT_PRICE) as po_GMV
					 from `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.FULFMT_360`
					 where SALES_ORDER_LINE_NUM <> 9999 --bags
					 AND (STATUS_DESC IN ('PO_DELIVERED','PO_CUSTOMER_PICKED','PO_SHIPPED')
					 OR STATUS_DESC IN ('SO_CREATED','PO_CREATED','PO_BACKORDERED','ORDER_HOLD','ORDER_SOURCED'))
					 GROUP BY 1,2
					) basket
					ON A.SALES_ORDER_NUM = basket.SALES_ORDER_NUM AND COALESCE(A.PO_NUM,'0') = COALESCE(basket.PO_NUM,'0')
			
where a.client <> 'AT&T'
and a.client <> 'Old Time Pottery'
and a.client <> "Fake Sam's Club"
and a.client <> 'A'
and a.client <> 'Ant Test Store '
and a.client <> 'L'
and a.client <> 'Onboarding Test Store '
and a.client <> 'SMB DaaS Test Client'
and a.client <> 'Discount Tire Test'
and a.client <> 'Fake ASDA Client'
and a.client <> 'Walmart On Demand Production Test Account'
and a.client <> 'testSMBClient'
and a.client <> "Sam's Club FC"
and a.client <> "Sam's Club FCs"
and a.client <> "Sam's Club FC SBX NTM2"
and a.client <> "Sam's Club ProdSandbox"
and a.client <> "Sam's RX SandBox"
and a.client <> "Sam's Club RX - Stage Env"
and upper(a.Spark_ZONE) like 'WALMART%'
);



--- Reason code vs Category name
CREATE OR REPLACE TABLE LMD_DA.CNCL_CAT_NM AS
SELECT DISTINCT PO_EXCPT_RSN_NM, PO_EXCPT_RSN_CATG_NM 
FROM wmt-edw-prod.WW_SUPPLY_CHAIN_DL_SECURE.DLVR_LAST_MI_DTL
WHERE RPT_DT >= '2022-01-01';


 
 -- BACKUP CREATED UNCOMMENT FOR FULL_REFRESH . 
-- Create or replace table `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL_backup` as ( select * from `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL`);
 
 -- COMMENT THE FOLLOWING THREE QUERIES WHEN RUNNING A FULL_REFRESH FOR THE DATA.
insert into LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL_backup 
	(select * from LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL where SLOT_DT = (select max(slot_dt) from LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL ) );



delete from LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL where SLOT_DT between date_add(current_date("US/Pacific"),interval -18 day) and current_date("US/Pacific"); --TWO_MONTHS (DELETE COMMAND - COMMENT IT WHEN RUNNING FULL QUERY)

insert into LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL
(SELECT DISTINCT A.* EXCEPT(APARTMENT_PYMT_AMT,fin_circuit_id), B.WM_WK AS DEFECT_WK, B.WM_WK_ID AS DEFECT_WK_ID, 
				CAST(APARTMENT_PYMT_AMT AS FLOAT64) APARTMENT_PYMT_AMT, current_timestamp() as Tred_Loaded_ts
FROM
(
SELECT * EXCEPT(DELIVERY_TIME, SLOT_WINDOW, OLD_CANCEL_SUB_CATEGORY,OLD_CANCEL_CATEGORY,PO_RN),
CASE 
--USING DEFECT COLUMN TO REPLACED DEFCTS ON THE DAY ORDER WAS PLCAED
WHEN (UPPER(REC_SRC)='DAAS' OR FMT_TYPE IN(7,9)) THEN SLOT_DT
WHEN (FMT_TYPE IS NULL OR (FMT_TYPE<>7 AND FMT_TYPE<>9)) THEN COALESCE(EXTRACT(DATE FROM ORDER_DROP_TS),
EXTRACT(DATE FROM FIRST_OFFER_PUBLISH_TS_TZ),EXTRACT(DATE FROM CAR_REQ_TS_TZ),SLOT_DT)
ELSE SLOT_DT
END AS DEFECT_DT ,
CASE WHEN COMPLETED_TRIP_IND = 1 THEN 
  CASE
	WHEN (DELIVERY_TIME - SLOT_WINDOW) <0 
	THEN 
		CASE 
			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN -10 AND 0 THEN 'T-10'
			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN -20 AND -11 THEN 'T-20'
			ELSE 'T-START'
		END  
	WHEN (DELIVERY_TIME - SLOT_WINDOW) >0
	THEN 
		CASE
			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN 0 AND 10 THEN 'T+10'
			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN 11 AND 20 THEN 'T+20'
			WHEN (DELIVERY_TIME - SLOT_WINDOW) > 21 THEN 'LATE'
		END 
	ELSE 'T-0'
  END 
ELSE NULL 
END AS RAPID_DEL_FLAG
FROM (
SELECT *,
DATETIME_DIFF(COALESCE(SLOT_TO_TS,DLVR_SLOT_END_TS_TZ),COALESCE(Slot_From_TS,DLVR_SLOT_START_TS_TZ),MINUTE) AS SLOT_WINDOW,
DATETIME_DIFF(CARRIER_DLVR_TS_TZ,COALESCE(Slot_From_TS,DLVR_SLOT_START_TS_TZ),MINUTE) AS DELIVERY_TIME,
CASE 
	WHEN REC_SRC = 'DISPATCHER' AND STS_DESC = 'Shipped' AND CARRIER_DLVR_TS_TZ IS NOT NULL THEN 1
	WHEN REC_SRC = 'DAAS' AND CARRIER_DLVR_TS_TZ IS NOT NULL THEN 1
	ELSE 0
	END AS COMPLETED_TRIP_IND	
FROM(

--Adding Defect rate flags column 
	SELECT * except(po_num), 
	--CASE WHEN UPPER(REC_SRC) = 'DAAS' THEN '0' ELSE po_num END AS po_num,  - (ticket 989)
	cast(po_num as string) as po_num,
	CASE
	 WHEN (UPPER(CARRIER_ORG_NM) <>'SPARK' AND CARRIER_DLVR_TS_TZ IS NOT NULL AND UPPER(On_Time_Delivery_DT_Defect)='Y') THEN 'D1' 
	 WHEN(UPPER(CARRIER_ORG_NM) <>'SPARK' AND CARRIER_DLVR_TS_TZ IS NOT NULL AND UPPER(On_Time_Delivery_DT_Defect)='N' AND 
	 (
	(FMT_TYPE =7 AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) < 50) OR
	 (FMT_TYPE = 9 AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) <40) OR
	 ( 
		 (FMT_TYPE IS NULL OR (FMT_TYPE<>7 AND FMT_TYPE<>9)) AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) <-1400
	 )
	 )
	 )
	  THEN  'D1'
	  WHEN 
	UPPER(CARRIER_ORG_NM) = 'SPARK' AND On_Time_Delivery_DT_Defect='N' AND OTP_FLAG =1 AND CARRIER_DLVR_TS_TZ IS NOT NULL  
	 THEN
	  CASE 
	  -- D2 modified on 18th July, ticket 996
	   WHEN (FMT_TYPE=9 AND PICKER_TYPE_NM ='ASSOCIATE' AND (DWELL_TIME<17 OR DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>108)) THEN 'D2'
	   WHEN (FMT_TYPE=7 AND PICKER_TYPE_NM ='ASSOCIATE' AND (DWELL_TIME<25 OR DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>250)) THEN 'D2'
	   WHEN (FMT_TYPE=9 AND PICKER_TYPE_NM ='SHOPPER' AND (DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>108)) THEN 'D2'
	   WHEN (FMT_TYPE=7 AND PICKER_TYPE_NM ='SHOPPER' AND (DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>250)) THEN 'D2'
	   
	   WHEN ((FMT_TYPE IS NULL OR (FMT_TYPE <>7 AND FMT_TYPE<>9)) AND (DWELL_TIME<28 OR DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) >-1000 )) THEN 'D2'
	   END
	 WHEN 
	   UPPER(CARRIER_ORG_NM) <>'SPARK' AND CARRIER_DLVR_TS_TZ IS NOT NULL AND On_Time_Delivery_DT_Defect='N' 
	 AND( (FMT_TYPE=7  AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>50) OR 
		 (FMT_TYPE=9  AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>40) OR
		 (((FMT_TYPE IS NULL) OR (FMT_TYPE<>7 AND FMT_TYPE<>9))AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>-1400  )
		 ) THEN 'D3'
	-- WHEN  (WM_TOT_CANCEL_REASON_DESC = 'Cold chain compliance violated' OR
	-- 	  WM_TOT_CANCEL_REASON_DESC ='Cold chain compliance violation' OR
	-- 	   WM_TOT_CANCEL_REASON_DESC ='Accepted by mistake' OR
	-- 	   WM_TOT_CANCEL_REASON_DESC = 'I have an emergency'  OR
	-- 	   WM_TOT_CANCEL_REASON_DESC = 'Driver: Refused Order')
	-- 	   THEN 'D4'
    WHEN b.PO_EXCPT_RSN_CATG_NM = 'Driver' THEN 'D4'
	--  WHEN NO_DRV_CANC=1  THEN 'D5'
    WHEN b.PO_EXCPT_RSN_CATG_NM = 'No Driver' THEN 'D5'
	  ELSE NULL END AS DEFECT_RATE_FLAG
	  FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL11 a--vn53vov
    LEFT JOIN `LMD_DA.CNCL_CAT_NM` b
    on a.WM_TOT_Cancel_reason_desc = b.PO_EXCPT_RSN_NM
			where SLOT_DT between date_add(current_date("US/Pacific"),interval -18 day) and current_date("US/Pacific")) --TWO_MONTHS
  )) A
LEFT JOIN LMD_DA.WMT_WEEK B
ON A.DEFECT_DT=B.CAL_DT
);
 

-- uncomment the following create query for FULL_REFRESH -- CREATING BACKUP -- Always create when adding a new KPI
-- Create or replace table `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL_backup` as ( select * from `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL`);

 

--	 THE FOLLOwING QUERY WHEN RUNNING A FULL_REFRESH

--Adding Rapid express delivery-time flags column 
--    CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL AS 
-- (SELECT DISTINCT A.* EXCEPT(APARTMENT_PYMT_AMT,fin_circuit_id), B.WM_WK AS DEFECT_WK, B.WM_WK_ID AS DEFECT_WK_ID, 
-- 				CAST(APARTMENT_PYMT_AMT AS FLOAT64) APARTMENT_PYMT_AMT , current_timestamp() as Tred_Loaded_ts
-- 	FROM
-- (
-- SELECT * EXCEPT(DELIVERY_TIME, SLOT_WINDOW, OLD_CANCEL_SUB_CATEGORY,OLD_CANCEL_CATEGORY,PO_RN),
-- CASE 
-- --USING DEFECT COLUMN TO REPLACED DEFCTS ON THE DAY ORDER WAS PLCAED
-- WHEN (UPPER(REC_SRC)='DAAS' OR FMT_TYPE IN(7,9)) THEN SLOT_DT
-- WHEN (FMT_TYPE IS NULL OR (FMT_TYPE<>7 AND FMT_TYPE<>9)) THEN COALESCE(EXTRACT(DATE FROM ORDER_DROP_TS),
-- EXTRACT(DATE FROM FIRST_OFFER_PUBLISH_TS_TZ),EXTRACT(DATE FROM CAR_REQ_TS_TZ),SLOT_DT)
-- ELSE SLOT_DT
-- END AS DEFECT_DT ,
-- CASE WHEN COMPLETED_TRIP_IND = 1 THEN 
--   CASE
-- 	WHEN (DELIVERY_TIME - SLOT_WINDOW) <0 
-- 	THEN 
-- 		CASE 
-- 			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN -10 AND 0 THEN 'T-10'
-- 			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN -20 AND -11 THEN 'T-20'
-- 			ELSE 'T-START'
-- 		END  
-- 	WHEN (DELIVERY_TIME - SLOT_WINDOW) >0
-- 	THEN 
-- 		CASE
-- 			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN 0 AND 10 THEN 'T+10'
-- 			WHEN (DELIVERY_TIME - SLOT_WINDOW) BETWEEN 11 AND 20 THEN 'T+20'
-- 			WHEN (DELIVERY_TIME - SLOT_WINDOW) > 21 THEN 'LATE'
-- 		END 
-- 	ELSE 'T-0'
--   END 
-- ELSE NULL 
-- END AS RAPID_DEL_FLAG
-- FROM (
-- SELECT *,
-- DATETIME_DIFF(COALESCE(SLOT_TO_TS,DLVR_SLOT_END_TS_TZ),COALESCE(Slot_From_TS,DLVR_SLOT_START_TS_TZ),MINUTE) AS SLOT_WINDOW,
-- DATETIME_DIFF(CARRIER_DLVR_TS_TZ,COALESCE(Slot_From_TS,DLVR_SLOT_START_TS_TZ),MINUTE) AS DELIVERY_TIME,
-- CASE 
-- 	WHEN REC_SRC = 'DISPATCHER' AND STS_DESC = 'Shipped' AND CARRIER_DLVR_TS_TZ IS NOT NULL THEN 1
-- 	WHEN REC_SRC = 'DAAS' AND CARRIER_DLVR_TS_TZ IS NOT NULL THEN 1
-- 	ELSE 0
-- 	END AS COMPLETED_TRIP_IND	
-- FROM(

-- --Adding Defect rate flags column 
-- 	SELECT * except(po_num), 
-- 	--CASE WHEN UPPER(REC_SRC) = 'DAAS' THEN '0' ELSE po_num END AS po_num,  - (ticket 989)
-- 	 cast(po_num as string) as po_num,
-- 	CASE
-- 	 WHEN (UPPER(CARRIER_ORG_NM) <>'SPARK' AND CARRIER_DLVR_TS_TZ IS NOT NULL AND UPPER(On_Time_Delivery_DT_Defect)='Y') THEN 'D1' 
-- 	 WHEN(UPPER(CARRIER_ORG_NM) <>'SPARK' AND CARRIER_DLVR_TS_TZ IS NOT NULL AND UPPER(On_Time_Delivery_DT_Defect)='N' AND 
-- 	 (
-- 	(FMT_TYPE =7 AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) < 50) OR
-- 	 (FMT_TYPE = 9 AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) <40) OR
-- 	 ( 
-- 		 (FMT_TYPE IS NULL OR (FMT_TYPE<>7 AND FMT_TYPE<>9)) AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) <-1400
-- 	 )
-- 	 )
-- 	 )
-- 	  THEN  'D1'
-- 	  WHEN 
-- 	UPPER(CARRIER_ORG_NM) = 'SPARK' AND On_Time_Delivery_DT_Defect='N' AND OTP_FLAG =1 AND CARRIER_DLVR_TS_TZ IS NOT NULL  
-- 	 THEN
-- 	  CASE 
-- 	  -- D2 modified on 18th July, ticket 996
-- 	   WHEN (FMT_TYPE=9 AND PICKER_TYPE_NM ='ASSOCIATE' AND (DWELL_TIME<17 OR DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>108)) THEN 'D2'
-- 	   WHEN (FMT_TYPE=7 AND PICKER_TYPE_NM ='ASSOCIATE' AND (DWELL_TIME<25 OR DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>250)) THEN 'D2'
-- 	   WHEN (FMT_TYPE=9 AND PICKER_TYPE_NM ='SHOPPER' AND (DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>108)) THEN 'D2'
-- 	   WHEN (FMT_TYPE=7 AND PICKER_TYPE_NM ='SHOPPER' AND (DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>250)) THEN 'D2'
	   
-- 	   WHEN ((FMT_TYPE IS NULL OR (FMT_TYPE <>7 AND FMT_TYPE<>9)) AND (DWELL_TIME<28 OR DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE) >-1000 )) THEN 'D2'
-- 	   END
-- 	 WHEN 
-- 	   UPPER(CARRIER_ORG_NM) <>'SPARK' AND CARRIER_DLVR_TS_TZ IS NOT NULL AND On_Time_Delivery_DT_Defect='N' 
-- 	 AND( (FMT_TYPE=7  AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>50) OR 
-- 		 (FMT_TYPE=9  AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>40) OR
-- 		 (((FMT_TYPE IS NULL) OR (FMT_TYPE<>7 AND FMT_TYPE<>9))AND DATETIME_DIFF(SLOT_TO_TS,COALESCE(TRIP_CREATED_TS_TZ,CAR_REQ_TS_TZ),MINUTE)>-1400  )
-- 		 ) THEN 'D3'
-- 	-- WHEN  (WM_TOT_CANCEL_REASON_DESC = 'Cold chain compliance violated' OR
-- 	-- 	  WM_TOT_CANCEL_REASON_DESC ='Cold chain compliance violation' OR
-- 	-- 	   WM_TOT_CANCEL_REASON_DESC ='Accepted by mistake' OR
-- 	-- 	   WM_TOT_CANCEL_REASON_DESC = 'I have an emergency'  OR
-- 	-- 	   WM_TOT_CANCEL_REASON_DESC = 'Driver: Refused Order')
-- 	-- 	   THEN 'D4'
--     WHEN b.PO_EXCPT_RSN_CATG_NM = 'Driver' THEN 'D4'
-- 	--  WHEN NO_DRV_CANC=1  THEN 'D5'
--     WHEN b.PO_EXCPT_RSN_CATG_NM = 'No Driver' THEN 'D5'
-- 	  ELSE NULL END AS DEFECT_RATE_FLAG
-- 	  FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL11 a--vn53vov
--     LEFT JOIN `LMD_DA.CNCL_CAT_NM` b
--     on a.WM_TOT_Cancel_reason_desc = b.PO_EXCPT_RSN_NM
--   ))) A
-- LEFT JOIN LMD_DA.WMT_WEEK B
-- ON A.DEFECT_DT=B.CAL_DT
-- );

 
-- Updating Sandbox SPARK_DELIVERY_DS_ALL_FINAL
CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL` as ( select * from `wmt-driver-insights.LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL`);


--- Final table with unwanted columns removed
CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS AS(
SELECT TRIP_ID,SALES_ORDER_NUM,cast(po_num as string) as po_num,
Store_id,
Slot_From_TS,
Slot_To_TS,
ORDER_DROP_TS,
FMT_TYPE,
AE_IND,
Spark_ZONE,
Order_Size,
first_assgn_carrier_nm,
DRVR_USER_ID,
ALCOHOL_IND,
CLNT_PCKUP_FROM_NM,
OVERSIZED_ITEM_IND,
REC_SRC,
PICKER_TYPE_NM,
COLCHAIN_VIOLATION_IND,
STS_DESC,
ORDER_READY_TS,
ORDER_PLACED_TS,
GIF_PICK_DUE_TS,
FIRST_OFFER_PUBLISH_TS_TZ,
CAR_REQ_TS_TZ,
ENR_PICKUP_TS_TZ,
PICK_START_LCL_TS,
PICK_END_LCL_TS,
AT_PICKUP_TS_TZ,
LOADED_TS_TZ,
ENR_DROPOFF_TS_TZ,
TRIP_CREATED_TS_TZ,
AT_DROPOFF_TS_TZ,
CARRIER_DLVR_TS_TZ,
ENR_RETURN_TS_TZ,
RETURNED_TS_TZ,
DISPATCHED_TS_TZ,
DRIVER_SIGNATURE_TS,
DLVR_SLOT_START_TS_TZ,
DLVR_SLOT_END_TS_TZ,
LATE_DLVR_TS_TZ,
ERLY_DLVR_TS_TZ,
COLCHAIN_VIOLATION_TS_TZ,
DRIVER_CANCELLED_TS_TZ,
ORDER_CREATED_TS_TZ,
Slot_DT,
SLOT_HR,
On_Time_Delivery,
DRVR_WAIT_TM_NEW_WITH_SIGN_TS,
OTP_FLAG,
OTP_GIF_FLAG,
expected_arrival_time,
CBSA,
Launch_Date,
DOM,
CITY,
STATE_CD,
CLIENT,
on_time_arrival,
BATCH_FLAG,
OFFER_PUBLISHED,
ACCEPTED,
DROPPED,
REJECTED,
EXPIRED,
OFFER_BROADCASTED,
BROADCAST_ACCEPTED,
BROADCAST_DROPPED,
BROADCAST_REJECTED,
BROADCAST_EXPIRED,
OFFER_BROADCASTED_WITH_SURGE,
BROADCAST_WITH_SURGE_ACCEPTED,
BROADCAST_WITH_SURGE_DROPPED,
BROADCAST_WITH_SURGE_REJECTED,
BROADCAST_WITH_SURGE_EXPIRED,
THIRD_PARTY_OFFER_PUBLISH,
THIRD_PARTY_EXPIRED,
LAT_NBR,
LONG_NBR,
SPARK_NOW_DRV_SLOT,
SPARK_NOW_DLY_DRV_SLOT,
SHPR_Cancel_reason_desc_trip,
SPARK_DURATION,
ORDER_ROLLED_CAR_REQ,
DAAS_EXT_STORE_NBR,
SPARK_LAUNCH_DATE,
WM_NO_DRV_CANC_TRIP,
WM_TOT_NO_DRV_CANC,
WM_TOT_NO_DRV_CANC_TRIP ,
WM_TOT_LMD_CANCELLATION,
WM_TOT_NON_LMD_CANCELLATION,
WM_TOT_Cancel_reason_desc,
CANCEL_CATEGORY,
CANCEL_SUB_CATEGORY,
CUST_ZIP5,
carrier_org_nm,
DU_IND,
DEFECT_RATE_FLAG,
DEFECT_DT,
CAST(NO_DRV_CANC AS FLOAT64) AS NO_DRV_CANC ,
CAST(WM_TOT_NO_DRV_CANC_TRIP AS FLOAT64) AS NO_DRV_CANC_TRIP,
CAST(COALESCE(BONUS_PAYMENT,0) AS FLOAT64) AS BONUS_PAYMENT,
CAST(COALESCE(ORDER_PAYMENT,0) AS FLOAT64) AS ORDER_PAYMENT,
CAST(COALESCE(TIP_PAYMENT,0) AS FLOAT64) AS TIP_PAYMENT,
CAST(COALESCE(SHOPPER_PICK_PAYMENT,0) AS FLOAT64) AS SHOPPER_PICK_PAYMENT,
CAST(COALESCE(SHOPPER_BLANK_BONUS_AMT,0) AS FLOAT64) AS SHOPPER_BLANK_BONUS_AMT,
CAST(COALESCE(SHOPPER_ENTRY_FEE_AMT,0) AS FLOAT64) AS SHOPPER_ENTRY_FEE_AMT,
CAST(COALESCE(SHOPPER_UNITS_AMT,0) AS FLOAT64) AS SHOPPER_UNITS_AMT,
CAST(COALESCE(SHOPPER_EXIT_FEE_AMT,0) AS FLOAT64) AS SHOPPER_EXIT_FEE_AMT,
CAST(COALESCE(SHOPPER_TRIP_CAPPING_AMT,0) AS FLOAT64) AS SHOPPER_TRIP_CAPPING_AMT,
CAST(COALESCE(SHOPPER_ITEMS_AMT,0) AS FLOAT64) AS SHOPPER_ITEMS_AMT,
cast(ESTIMATED_DISTANCE_AMT as FLOAT64) as ESTIMATED_DISTANCE_AMT,
cast(DELIVERED_EXTRA_AMT as FLOAT64) AS DELIVERED_EXTRA_AMT,
CAST(SURGE_PRICE_AMT AS FLOAT64) AS SURGE_PRICE_AMT ,
CAST(WAIT_TIME_AMT AS FLOAT64) AS WAIT_TIME_AMT ,
CAST(RETURNED_AMT AS FLOAT64) AS RETURNED_AMT,
CAST(BLANK_BONUS_AMT AS FLOAT64) AS BLANK_BONUS_AMT ,
CAST(ARRIVED_AT_STORE_AMT AS FLOAT64) AS ARRIVED_AT_STORE_AMT,
CAST(BASE_PRICE_CAPPING_AMT AS FLOAT64) AS BASE_PRICE_CAPPING_AMT,
CAST(DELIVERED_OR_ATTEMPTED_AMT AS FLOAT64) AS DELIVERED_OR_ATTEMPTED_AMT,
CAST(ORDER_SIZE_AMT AS FLOAT64) AS ORDER_SIZE_AMT,
CAST(COALESCE(INCENTIVE_AMT,0) AS FLOAT64) INCENTIVE_AMT,
CAST(COALESCE(SHOPPER_INCENTIVE,0) AS FLOAT64) SHOPPER_INCENTIVE,
CAST(COALESCE(ACQ_INCENTIVE,0) AS FLOAT64) ACQ_INCENTIVE,
CAST(COALESCE(RFR_INCENTIVE,0) AS FLOAT64) RFR_INCENTIVE,
CAST(COALESCE(ERNGS_ADJ_AMT,0) AS FLOAT64) PROP_22_ERNGS_ADJ_AMT,
CAST(WM_WK AS FLOAT64) WM_WK,
CAST(DEFECT_WK AS FLOAT64) DEFECT_WK,
CAST ( DWELL_TIME AS FLOAT64) AS DWELL_TIME,
CAST( DWT AS FLOAT64) DWT,
CAST( DRVR_ARRIVAL_MINUTES AS FLOAT64) DRVR_ARRIVAL_MINUTES,
CAST( LAST_MILE_TIME AS FLOAT64) LAST_MILE_TIME,
CAST( PLANNED_MILES AS FLOAT64) PLANNED_MILES,
CAST( PKG_WT_QTY_LBS AS FLOAT64) PKG_WT_QTY_LBS,
CAST( DLVR_PKG_VOL_QTY_CFT AS FLOAT64) DLVR_PKG_VOL_QTY_CFT,
CAST( Quantity AS FLOAT64) Quantity,
CAST( NO_DRV_CANC_new AS FLOAT64) NO_DRV_CANC_new,
CAST(EASY_RETURN_IND AS FLOAT64) EASY_RETURN_IND,
CAST(DRIVER_SEARCH_TIME AS FLOAT64) DRIVER_SEARCH_TIME,
CAST(DRIVER_ARRIVAL_GAP AS FLOAT64) DRIVER_ARRIVAL_GAP,
CAST(DRIVER_TIME_TO_STORE AS FLOAT64) DRIVER_TIME_TO_STORE,
CAST(DRIVER_PRE_ARRIVAL_TIME AS FLOAT64) DRIVER_PRE_ARRIVAL_TIME,
CAST(DRIVER_DELIVERED_TIME AS FLOAT64) DRIVER_DELIVERED_TIME,
CAST(DELIVERY_DRIVING_TIME AS FLOAT64) DELIVERY_DRIVING_TIME,
CAST(TOT_ITEMS AS FLOAT64) TOT_ITEMS
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL
WHERE WM_WK_ID > (SELECT MAX(WM_WK_ID)-3 FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL)
);	

-- Updating Sandbox SPARK_DELIVERY_DS
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.SPARK_DELIVERY_DS` as ( select * from `wmt-driver-insights.LMD_DA.SPARK_DELIVERY_DS`);
 
 
-- uncomment the following create query for FULL_REFRESH -- LET IT BE
Create or replace table `LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD_backup` as ( select * from `LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD`);

--- Final table with unwanted columns removed for tableau
CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD AS(
SELECT DISTINCT SALES_ORDER_NUM,
Store_id,
Slot_From_TS,
Slot_To_TS,
ORDER_DROP_TS,
Dropped_after_hours,
FMT_TYPE,
AE_IND,
Spark_ZONE,
CBSA_SPARK,
Order_Size,
first_assgn_carrier_nm,
TRIP_ID,
DRVR_USER_ID,
ALCOHOL_IND,
CLNT_PCKUP_FROM_NM,
REC_SRC,
PICKER_TYPE_NM,
COLCHAIN_VIOLATION_IND,
STS_DESC,
ORDER_READY_TS,
ORDER_PLACED_TS,
GIF_PICK_DUE_TS,
FIRST_OFFER_PUBLISH_TS_TZ,
CAR_REQ_TS_TZ,
ENR_PICKUP_TS_TZ,
PICK_START_LCL_TS,
PICK_END_LCL_TS,
AT_PICKUP_TS_TZ,
LOADED_TS_TZ,
ENR_DROPOFF_TS_TZ,
TRIP_CREATED_TS_TZ,
AT_DROPOFF_TS_TZ,
CARRIER_DLVR_TS_TZ,
ENR_RETURN_TS_TZ,
RETURNED_TS_TZ,
DISPATCHED_TS_TZ,
DRIVER_SIGNATURE_TS,
DLVR_SLOT_START_TS_TZ,
DLVR_SLOT_END_TS_TZ,
LATE_DLVR_TS_TZ,
ERLY_DLVR_TS_TZ,
COLCHAIN_VIOLATION_TS_TZ,
DRIVER_CANCELLED_TS_TZ,
ORDER_CREATED_TS_TZ,
REGION,
Slot_DT,
SLOT_HR,
On_Time_Delivery_EXCEPTION,
On_Time_Delivery,
DRVR_WAIT_TM_NEW_WITH_SIGN_TS,
OTP_FLAG,
OTP_GIF_FLAG,
expected_arrival_time,
CBSA,
Launch_Date,
Delivery_Provider,
DOM,
CITY,
STATE_CD,
CLIENT,
on_time_arrival,
BATCH_FLAG,
OFFER_PUBLISHED,
ACCEPTED,
DROPPED,
REJECTED,
EXPIRED,
OFFER_BROADCASTED,
BROADCAST_ACCEPTED,
BROADCAST_DROPPED,
BROADCAST_REJECTED,
BROADCAST_EXPIRED,
OFFER_BROADCASTED_WITH_SURGE,
BROADCAST_WITH_SURGE_ACCEPTED,
BROADCAST_WITH_SURGE_DROPPED,
BROADCAST_WITH_SURGE_REJECTED,
BROADCAST_WITH_SURGE_EXPIRED,
THIRD_PARTY_OFFER_PUBLISH,
THIRD_PARTY_EXPIRED,
store_classification,
POSTAL_CD,
LAT_NBR,
LONG_NBR,
SPARK_NOW_DRV_SLOT,
SPARK_NOW_DLY_DRV_SLOT,
SHPR_Cancel_reason_desc_trip,
opdd_num,
opdd_den,
opdd_bucket,
SPARK_DURATION,
ORDER_ROLLED_CAR_REQ,
ORDER_ROLLED_DEL,
SLOT_ROLL,
DAAS_EXT_STORE_NBR,
SPARK_LAUNCH_DATE,
WM_NO_DRV_CANC_TRIP,
WM_TOT_NO_DRV_CANC,
WM_TOT_NO_DRV_CANC_TRIP,
WM_TOT_LMD_CANCELLATION,
WM_TOT_NON_LMD_CANCELLATION,
WM_TOT_Cancel_reason_desc,
CANCEL_CATEGORY,
CANCEL_SUB_CATEGORY,
CUST_ZIP5,
carrier_org_nm,
DU_IND,
OVERSIZED_ITEM_IND,
DEFECT_RATE_FLAG,
DEFECT_DT,
cast(po_num as string) as po_num,
CAST(NO_DRV_CANC AS FLOAT64) AS NO_DRV_CANC ,
CAST(WM_TOT_NO_DRV_CANC_TRIP AS FLOAT64) AS NO_DRV_CANC_TRIP ,
CAST(COALESCE(BONUS_PAYMENT,0) AS FLOAT64) AS BONUS_PAYMENT,
CAST(COALESCE(ORDER_PAYMENT,0) AS FLOAT64) AS ORDER_PAYMENT,
CAST(COALESCE(TIP_PAYMENT,0) AS FLOAT64) AS TIP_PAYMENT,
CAST(COALESCE(SHOPPER_PICK_PAYMENT,0) AS FLOAT64) AS SHOPPER_PICK_PAYMENT,
CAST(COALESCE(SHOPPER_BLANK_BONUS_AMT,0) AS FLOAT64) AS SHOPPER_BLANK_BONUS_AMT,
CAST(COALESCE(SHOPPER_ENTRY_FEE_AMT,0) AS FLOAT64) AS SHOPPER_ENTRY_FEE_AMT,
CAST(COALESCE(SHOPPER_UNITS_AMT,0) AS FLOAT64) AS SHOPPER_UNITS_AMT,
CAST(COALESCE(SHOPPER_EXIT_FEE_AMT,0) AS FLOAT64) AS SHOPPER_EXIT_FEE_AMT,
CAST(COALESCE(SHOPPER_TRIP_CAPPING_AMT,0) AS FLOAT64) AS SHOPPER_TRIP_CAPPING_AMT,
CAST(COALESCE(SHOPPER_ITEMS_AMT,0) AS FLOAT64) AS SHOPPER_ITEMS_AMT,
CAST(COALESCE(ML_BASE_PRICE_AMT,0) AS FLOAT64) AS ML_BASE_PRICE_AMT,
cast(ESTIMATED_DISTANCE_AMT as FLOAT64) as ESTIMATED_DISTANCE_AMT,
cast(DELIVERED_EXTRA_AMT as FLOAT64) AS DELIVERED_EXTRA_AMT,
CAST(SURGE_PRICE_AMT AS FLOAT64) AS SURGE_PRICE_AMT ,
CAST(WAIT_TIME_AMT AS FLOAT64) AS WAIT_TIME_AMT ,
CAST(RETURNED_AMT AS FLOAT64) AS RETURNED_AMT,
CAST(BLANK_BONUS_AMT AS FLOAT64) AS BLANK_BONUS_AMT ,
CAST(ARRIVED_AT_STORE_AMT AS FLOAT64) AS ARRIVED_AT_STORE_AMT,
CAST(BASE_PRICE_CAPPING_AMT AS FLOAT64) AS BASE_PRICE_CAPPING_AMT,
CAST(DELIVERED_OR_ATTEMPTED_AMT AS FLOAT64) AS DELIVERED_OR_ATTEMPTED_AMT,
CAST(ORDER_SIZE_AMT AS FLOAT64) AS ORDER_SIZE_AMT,
CAST(DT_TYPE AS FLOAT64) AS DT_TYPE,  
CAST(COALESCE(INCENTIVE_AMT,0) AS FLOAT64) INCENTIVE_AMT,
CAST(COALESCE(SHOPPER_INCENTIVE,0) AS FLOAT64) SHOPPER_INCENTIVE,
CAST(COALESCE(ACQ_INCENTIVE,0) AS FLOAT64) ACQ_INCENTIVE,
CAST(COALESCE(RFR_INCENTIVE,0) AS FLOAT64) RFR_INCENTIVE,
CAST(COALESCE(ERNGS_ADJ_AMT,0) AS FLOAT64) PROP_22_ERNGS_ADJ_AMT,
CAST(NPS_PROMOTERS AS FLOAT64) AS NPS_PROMOTERS,
CAST(NPS_DETRACTORS AS FLOAT64) AS NPS_DETRACTORS, 
CAST(NPS_TOTAL_RESPONDENTS AS FLOAT64) NPS_TOTAL_RESPONDENTS,
CAST(SDSAT_DEN AS FLOAT64) AS SDSAT_DEN, 
CAST(SDSAT_NUM AS FLOAT64) SDSAT_NUM,
CAST(TOTAL_TIME_SPENT AS FLOAT64) AS TOTAL_TIME_SPENT, 
CAST(TOTAL_TIME_SPENT_SPARK_NOW AS FLOAT64) AS TOTAL_TIME_SPENT_SPARK_NOW, 
CAST(MIN_TIME AS FLOAT64) MIN_TIME,
CAST(COALESCE(TOTAL_TIME_SPENT_ROWS,0) AS FLOAT64) AS TOTAL_TIME_SPENT_ROWS, 
CAST(COALESCE(TOT_DURATION_SPARK_NOW_hy,0) AS FLOAT64) AS TOTAL_TIME_SPENT_SPARK_NOW_ROWS, 
CAST(COALESCE(MIN_TIME_ROWS,0) AS FLOAT64) MIN_TIME_ROWS,
CAST(WM_WK AS FLOAT64) WM_WK,
CAST(WM_WK_ID AS FLOAT64) WM_WK_ID,
CAST(DEFECT_WK AS FLOAT64) DEFECT_WK,
CAST(DEFECT_WK_ID AS FLOAT64) DEFECT_WK_ID,
CAST ( DWELL_TIME AS FLOAT64) AS DWELL_TIME,
CAST( DWT AS FLOAT64) DWT,
CAST( DRVR_ARRIVAL_MINUTES AS FLOAT64) DRVR_ARRIVAL_MINUTES,
CAST( LAST_MILE_TIME AS FLOAT64) LAST_MILE_TIME,
CAST( PLANNED_MILES AS FLOAT64) PLANNED_MILES,
CAST( SVC_ID AS FLOAT64) SVC_ID,
CAST( PKG_WT_QTY_LBS AS FLOAT64) PKG_WT_QTY_LBS,
CAST( DLVR_PKG_VOL_QTY_CFT AS FLOAT64) DLVR_PKG_VOL_QTY_CFT,
CAST( Quantity AS FLOAT64) Quantity,
CAST( NO_DRV_CANC_new AS FLOAT64) NO_DRV_CANC_new,
CAST( TRIP_CHNG_IND AS FLOAT64) TRIP_CHNG_IND,
CAST(EASY_RETURN_IND AS FLOAT64) EASY_RETURN_IND,
CAST( DCSAT_promoters AS FLOAT64) DCSAT_promoters,
CAST( DCSAT_Total_respondents AS FLOAT64) DCSAT_Total_respondents,
CAST(DRIVER_SEARCH_TIME AS FLOAT64) DRIVER_SEARCH_TIME,
CAST(DRIVER_ARRIVAL_GAP AS FLOAT64) DRIVER_ARRIVAL_GAP,
CAST(DRIVER_TIME_TO_STORE AS FLOAT64) DRIVER_TIME_TO_STORE,
CAST(DRIVER_PRE_ARRIVAL_TIME AS FLOAT64) DRIVER_PRE_ARRIVAL_TIME,
CAST(DRIVER_DELIVERED_TIME AS FLOAT64) DRIVER_DELIVERED_TIME,
CAST(DELIVERY_DRIVING_TIME AS FLOAT64) DELIVERY_DRIVING_TIME,
CAST(TOT_ITEMS AS FLOAT64) TOT_ITEMS
,fulfilment_type -- NEWLY ADDED COLUMN
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL
WHERE slot_dt > (SELECT MAX(slot_dt)-14 FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL)
);
-- Updating Sandbox   SPARK_DELIVERY_DS_DSI_LOAD
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD` as ( select * from `wmt-driver-insights.LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD`);
 

 
 
CREATE OR REPLACE TABLE LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD_2 AS(
SELECT DISTINCT sales_order_num, po_num, trip_id, slot_dt, wm_wk, CUST_ZIP5 
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL
WHERE WM_WK_ID > (SELECT MAX(WM_WK_ID)-3 FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL)
);

 -- Updating Sandbox   SPARK_DELIVERY_DS_DSI_LOAD_2
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD_2` as ( select * from `wmt-driver-insights.LMD_DA.SPARK_DELIVERY_DS_DSI_LOAD_2`);
 
  

CREATE OR REPLACE TABLE LMD_DA.SPARK_EASY_RETURNS AS(
SELECT DISTINCT A.* EXCEPT(ADR_Ind_trip,COLD_CHAIN_VIOLATION,COLD_CHAIN_ITEM_IND,DLVR_CLNT_ID,rows_total,Converted_to_pickup_ind,BONUS_PAYMENT,ORDER_PAYMENT,TIP_PAYMENT,DT_TYPE,INCENTIVE_AMT,SHOPPER_INCENTIVE,ACQ_INCENTIVE,RFR_INCENTIVE, ERNGS_ADJ_AMT ,
 Launch_INCENTIVE,DNM_INCENTIVE, REACTIVATION_INCENTIVE,SUNDAY_CHURN_INCENTIVE,	DOTCOM_INCENTIVE,SPECIAL_INCENTIVE,	MORNING_STORE_INCENTIVE,EVENING_STORE_INCENTIVE,
STORE_INCENTIVE,MORNING_ZONE_INCENTIVE,EVENING_ZONE_INCENTIVE, Zone_Incentive,joyrun_incentive, NPS_PROMOTERS,NPS_DETRACTORS,NPS_TOTAL_RESPONDENTS,
SDSAT_DEN,SDSAT_NUM, WM_WK,WM_WK_ID, --PICK_START_LCL_TS, PICK_END_LCL_TS, DU_IND,  --vn53vov
 TOTAL_TIME_SPENT ,MIN_TIME, TOTAL_TIME_SPENT_ROWS,Total_time_spent_spark_now, Total_time_spent_spark_now_rows,TOT_DURATION_WORK_hy,TOT_DURATION_SPARK_NOW_hy,P2_Time_hy,
 DRIVER_WAIT_TIME,MIN_TIME_ROWS,DWELL_TIME,Pavement_time,Driver_lag_Time, DWT,DRVR_ARRIVAL_MINUTES, --Dwell time related metrics --
 LAST_MILE_TIME,PLANNED_MILES, DRVR_TO_STORE_DIST_MILES, po_num, SVC_ID,PKG_WT_QTY_LBS,DLVR_PKG_VOL_QTY_CFT ,Quantity, NO_DRV_CANC_OLD,NO_DRV_CANC_new,TRIP_CHNG_CNT,TRIP_CHNG_IND,
 DCSAT_promoters,DCSAT_Total_respondents,
 DCSAT_ONEAPP_promoters,
DCSAT_ONEAPP_Total_respondents,
DCSAT_GLASS_promoters,
DCSAT_GLASS_Total_respondents,
DCSAT_COMMENTS,
TOT_ITEMS,
 DRIVER_SEARCH_TIME,
		DRIVER_ARRIVAL_GAP,
		DRIVER_TIME_TO_STORE,
		DRIVER_PRE_ARRIVAL_TIME,
		DRIVER_DELIVERED_TIME,
		DELIVERY_DRIVING_TIME,
		SHOPPER_PICK_PAYMENT ,
		SHOPPER_BLANK_BONUS_AMT,
		SHOPPER_ENTRY_FEE_AMT,
		SHOPPER_UNITS_AMT,
		SHOPPER_EXIT_FEE_AMT,
		SHOPPER_TRIP_CAPPING_AMT,
		SHOPPER_ITEMS_AMT,
		ML_BASE_PRICE_AMT,ML_BASE_PRICE_CAPPING_AMT,
		ML_BASE_ADJUSTMENT, --vn53vov
		SHOPPER_EXPRESS,
ESTIMATED_DISTANCE_AMT ,
DELIVERED_EXTRA_AMT,
SURGE_PRICE_AMT ,
WAIT_TIME_AMT,
RETURNED_AMT ,
BLANK_BONUS_AMT ,
ARRIVED_AT_STORE_AMT ,
BASE_PRICE_CAPPING_AMT ,
DELIVERED_OR_ATTEMPTED_AMT ,
ORDER_SIZE_AMT,
EXTRA_HEAVY_ORDER_AMT, HEAVY_ORDER_AMT,
APARTMENT_PYMT_AMT,
EASY_RTNS_AMT, EASY_RTNS_PARTIAL_AMT,CANCELLATION_FEE,EST_SCHED_DRIVE_TIME_FEE_LMT,EST_UNSCHED_DRIVE_TIME_FEE_LMT,
DAAS_CANCEL_SUBCATEGORY, DAAS_CANCEL_CATEGORY, DAAS_CNCL_Store_Issue, DAAS_CNCL_by_Customer, DAAS_CNCL_by_Driver, DAAS_CNCL_Sysytem_App_issue, DAAS_CNCL_Long_wait_time,
DAAS_CNCL_Other_LMD, DAAS_CNCL_Other_NON_LMD, DAAS_CNCL_Others, 
DAAS_CANCEL_CATEGORY_TRIP,	WM_CANCEL_CATEGORY_TRIP,	SHPR_CANCEL_SUBCATEGORY,	SHPR_CANCEL_CATEGORY,	SHPR_CNCL_Store_Issue,	SHPR_CNCL_by_Customer,	
SHPR_CNCL_by_Driver,	SHPR_CNCL_Sysytem_App_issue,	SHPR_CNCL_Other_LMD,	SHPR_CNCL_Other_NON_LMD	,SHPR_CNCL_Others	,SHPR_CANCEL_CATEGORY_TRIP,
WM_CANCEL_SUBCATEGORY, WM_CANCEL_CATEGORY, WM_CNCL_Store_Issue, WM_CNCL_by_Customer, WM_CNCL_by_Driver, WM_CNCL_Sysytem_App_issue, 
WM_CNCL_Other_LMD, WM_CNCL_Other_NON_LMD, WM_CNCL_Others, DAAS_NO_DRV_CANC_TRIP, 
NO_DRV_CANC, COMPLETED_TRIP_IND, RAPID_DEL_FLAG, TOT_Cancel_reason_desc_trip,On_Time_Delivery_DT_Defect, DEFECT_WK, DEFECT_WK_ID, NON_CANCELLED_SHOPPER_SALES_ORDERS, NON_CANCELLED_DAAS_SALES_ORDERS 
,OG_MKT_NM, DLVR_PRIORITY_NM, OPDD_rank, max_OPDD_rank, DAAS_NO_DRV_CANC
,ORDER_SVC_TYPE_NM,DRIVER_DROPPED_TS_TZ,CANCL_REQ_TS_TZ,
PO_EXCPT_RSN_NM, PO_EXCPT_RSN_CATG_NM,Late_Carrier_Assignment, Tred_Loaded_ts
,DEX_FLAG
,fulfilment_type,Three_OG_Flag, ORDER_STATUS_DESC,mart_org_nm,SHIP_TO_ADDR_TYPE,ACTL_PO_QUANTITY,Unit_Price,po_GMV,
EST_UNSCHED_BILLABLE_WEIGHT_FEE, 
EST_SCHED_BILLABLE_WEIGHT_FEE ,
EST_AE_BILLABLE_WEIGHT_FEE,
CHAINING_COMPLEXITY_FEE,MARKET_FACTOR_AMT,Golocal_WMT_Cancellations,
Live_Bait_Indicator, Internalized_PARCEL_Flag, Unbatching_IND,CLIENT_LMP,WMT_Cancellations, 
CANCELLED_PO_FLAG,DRIVER_SIGNATURE_TS,DRIVER_PIN_OR_SIGNATURE_TS,
PKG_UNATND_ELIG_IND, NUDGE_IND,AUTO_REBOOK_IND,NUDGE_TS_TZ,AUTO_REBOOK_TS_TZ,
PCKUP_TS_TZ,TRIP_PLAND_DUR_SEC_QTY,MISSING_ORDR_AMT,GUAR_PYMNT_AMT,HLTH_CARE_AMT,
MNUAL_BLK_BNS_PYMT,Tip_coverage,BATCH_ID,CHAINING_FLG,NON_SPARK_BATCH_SIZE),  
 --Added to fix the concat issue in dashboard
--CASE WHEN UPPER(REC_SRC) = 'DAAS' THEN '0' ELSE po_num END AS po_num, - (ticket 989)
cast(po_num as string) as po_num,
CAST(NO_DRV_CANC AS FLOAT64) AS NO_DRV_CANC ,
CAST(WM_TOT_NO_DRV_CANC_TRIP AS FLOAT64) AS NO_DRV_CANC_TRIP ,
CAST(COALESCE(BONUS_PAYMENT,0) AS FLOAT64) AS BONUS_PAYMENT,
CAST(COALESCE(ORDER_PAYMENT,0) AS FLOAT64) AS ORDER_PAYMENT,
CAST(COALESCE(B.PYMT_TRANS_AMT,0) AS FLOAT64) AS ACTL_ORDER_PAY_RTNS,
CAST(COALESCE(TIP_PAYMENT,0) AS FLOAT64) AS TIP_PAYMENT,
CAST(COALESCE(SHOPPER_PICK_PAYMENT,0) AS FLOAT64) AS SHOPPER_PICK_PAYMENT,
cast(ESTIMATED_DISTANCE_AMT as FLOAT64) as ESTIMATED_DISTANCE_AMT,
cast(DELIVERED_EXTRA_AMT as FLOAT64) AS DELIVERED_EXTRA_AMT,
CAST(SURGE_PRICE_AMT AS FLOAT64) AS SURGE_PRICE_AMT ,
CAST(WAIT_TIME_AMT AS FLOAT64) AS WAIT_TIME_AMT ,
CAST(RETURNED_AMT AS FLOAT64) AS RETURNED_AMT,
CAST(BLANK_BONUS_AMT AS FLOAT64) AS BLANK_BONUS_AMT ,
CAST(ARRIVED_AT_STORE_AMT AS FLOAT64) AS ARRIVED_AT_STORE_AMT,
CAST(BASE_PRICE_CAPPING_AMT AS FLOAT64) AS BASE_PRICE_CAPPING_AMT,
CAST(DELIVERED_OR_ATTEMPTED_AMT AS FLOAT64) AS DELIVERED_OR_ATTEMPTED_AMT,
CAST(EASY_RTNS_AMT AS FLOAT64) EASY_RTNS_AMT,
CAST(EASY_RTNS_PARTIAL_AMT AS FLOAT64) EASY_RTNS_PARTIAL_AMT,
CAST(ORDER_SIZE_AMT AS FLOAT64) AS ORDER_SIZE_AMT,
CAST(DT_TYPE AS FLOAT64) AS DT_TYPE,  
CAST(COALESCE(INCENTIVE_AMT,0) AS FLOAT64) INCENTIVE_AMT,
CAST(COALESCE(SHOPPER_INCENTIVE,0) AS FLOAT64) SHOPPER_INCENTIVE,
CAST(COALESCE(ACQ_INCENTIVE,0) AS FLOAT64) ACQ_INCENTIVE,
CAST(COALESCE(RFR_INCENTIVE,0) AS FLOAT64) RFR_INCENTIVE,
CAST(COALESCE(ERNGS_ADJ_AMT,0) AS FLOAT64) PROP_22_ERNGS_ADJ_AMT,
CAST(NPS_PROMOTERS AS FLOAT64) AS NPS_PROMOTERS,
CAST(NPS_DETRACTORS AS FLOAT64) AS NPS_DETRACTORS, 
CAST(NPS_TOTAL_RESPONDENTS AS FLOAT64) NPS_TOTAL_RESPONDENTS,
CAST(SDSAT_DEN AS FLOAT64) AS SDSAT_DEN, 
CAST(SDSAT_NUM AS FLOAT64) SDSAT_NUM,
CAST(TOTAL_TIME_SPENT AS FLOAT64) AS TOTAL_TIME_SPENT, 
CAST(TOTAL_TIME_SPENT_SPARK_NOW AS FLOAT64) AS TOTAL_TIME_SPENT_SPARK_NOW, 
CAST(MIN_TIME AS FLOAT64) MIN_TIME,
CAST(COALESCE(TOTAL_TIME_SPENT_ROWS,0) AS FLOAT64) AS TOTAL_TIME_SPENT_ROWS, 
CAST(COALESCE(TOT_DURATION_SPARK_NOW_hy,0) AS FLOAT64) AS TOTAL_TIME_SPENT_SPARK_NOW_ROWS, 
CAST(COALESCE(MIN_TIME_ROWS,0) AS FLOAT64) MIN_TIME_ROWS,
CAST(WM_WK AS FLOAT64) WM_WK,
CAST(WM_WK_ID AS FLOAT64) WM_WK_ID,
CAST(DEFECT_WK AS FLOAT64) DEFECT_WK,
CAST(DEFECT_WK_ID AS FLOAT64) DEFECT_WK_ID,
--CAST(DRIVER_WAIT_TIME AS FLOAT64) DRIVER_WAIT_TIME,
--CAST(FIN_CIRCUIT_ID AS FLOAT64) FIN_CIRCUIT_ID,
CAST ( DWELL_TIME AS FLOAT64) AS DWELL_TIME,
CAST( DWT AS FLOAT64) DWT,
CAST( DRVR_ARRIVAL_MINUTES AS FLOAT64) DRVR_ARRIVAL_MINUTES,
CAST( LAST_MILE_TIME AS FLOAT64) LAST_MILE_TIME,
CAST( PLANNED_MILES AS FLOAT64) PLANNED_MILES,
CAST( SVC_ID AS FLOAT64) SVC_ID,
CAST( PKG_WT_QTY_LBS AS FLOAT64) PKG_WT_QTY_LBS,
CAST( DLVR_PKG_VOL_QTY_CFT AS FLOAT64) DLVR_PKG_VOL_QTY_CFT,
CAST( Quantity AS FLOAT64) Quantity,
-- CAST( NO_DRV_CANC_OLD AS FLOAT64) NO_DRV_CANC_OLD,
CAST( NO_DRV_CANC_new AS FLOAT64) NO_DRV_CANC_new,
CAST( TRIP_CHNG_CNT AS FLOAT64) TRIP_CHNG_CNT,
CAST( TRIP_CHNG_IND AS FLOAT64) TRIP_CHNG_IND,
CAST( DCSAT_promoters AS FLOAT64) DCSAT_promoters,
CAST( DCSAT_Total_respondents AS FLOAT64) DCSAT_Total_respondents,
CAST(DRIVER_SEARCH_TIME AS FLOAT64) DRIVER_SEARCH_TIME,
CAST(DRIVER_ARRIVAL_GAP AS FLOAT64) DRIVER_ARRIVAL_GAP,
CAST(DRIVER_TIME_TO_STORE AS FLOAT64) DRIVER_TIME_TO_STORE,
CAST(DRIVER_PRE_ARRIVAL_TIME AS FLOAT64) DRIVER_PRE_ARRIVAL_TIME,
CAST(DRIVER_DELIVERED_TIME AS FLOAT64) DRIVER_DELIVERED_TIME,
CAST(DELIVERY_DRIVING_TIME AS FLOAT64) DELIVERY_DRIVING_TIME,
CAST(TOT_ITEMS AS FLOAT64) TOT_ITEMS

FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL A 
LEFT JOIN 
(SELECT TRIP_ID,DRVR_USER_ID, PYMT_TRANS_AMT
FROM LMD_DA.TRIP_PAYMENT_TEMP) B
ON A.TRIP_ID = B.TRIP_ID 
and A.DRVR_USER_ID = B.DRVR_USER_ID
WHERE WM_WK_ID > (SELECT MAX(WM_WK_ID)-12 FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL)
AND EASY_RETURN_IND = 1
);

-- Updating Sandbox   SPARK_EASY_RETURNS
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.SPARK_EASY_RETURNS` as ( select * from `wmt-driver-insights.LMD_DA.SPARK_EASY_RETURNS`);




 --Driver classification
 --distinct weeks with required columns are found
 CREATE OR REPLACE TABLE LMD_DA.WMT_WEEK_PREV_WEEKS 
AS 
(
SELECT 
      CAST(A.WM_WK as NUMERIC) AS WM_WK
    , a.WM_WK_ID
    , MIN(a.CAL_DT) AS WK_START
    , MAX(a.CAL_DT) AS WK_END
    , MIN(b.CAL_DT) AS Last_WK_START
    , MAX(b.CAL_DT) AS Last_WK_END
    , MIN(c.CAL_DT) AS Last_2_WK_START
    , MIN(d.CAL_DT) AS Last_4_WK_START
    , MIN(e.CAL_DT) AS Last_8_WK_START
    , MIN(f.CAL_DT) AS Last_16_WK_START
FROM 
    LMD_DA.WMT_WEEK AS a
LEFT JOIN 
    LMD_DA.WMT_WEEK AS b
ON 
    a.WM_WK_ID = b.WM_WK_ID + 1
LEFT JOIN 
    LMD_DA.WMT_WEEK AS c
ON 
    a.WM_WK_ID = c.WM_WK_ID + 2
LEFT JOIN 
    LMD_DA.WMT_WEEK AS d
ON 
    a.WM_WK_ID = d.WM_WK_ID + 4
LEFT JOIN 
    LMD_DA.WMT_WEEK AS e
ON 
    a.WM_WK_ID = e.WM_WK_ID + 8
LEFT JOIN 
    LMD_DA.WMT_WEEK AS f
ON 
    a.WM_WK_ID = f.WM_WK_ID + 16
WHERE 
    a.WM_WK >= '201922'
GROUP BY 
    1,2
);

--Driver zone mapping based on the latest order shipped
CREATE OR REPLACE TABLE LMD_DA.DRVR_ZONE AS 
(
SELECT A.*
FROM
(SELECT DRVR_USER_ID, 
SPARK_ZONE,
CBSA,
STORE_ID,
cast(WM_WK as float64) as WM_WK,
ROW_NUMBER() OVER(PARTITION BY CAST(WM_WK AS NUMERIC), DRVR_USER_ID ORDER BY CARRIER_DLVR_TS_TZ DESC) AS RN
FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL
) A
WHERE RN = 1
);

-- Updating Sandbox   WMT_WEEK_PREV_WEEKS
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.WMT_WEEK_PREV_WEEKS` as ( select * from `wmt-driver-insights.LMD_DA.WMT_WEEK_PREV_WEEKS`);
 

--At driver week level, driver tenure, new driver flag, markets are added

 CREATE OR REPLACE TABLE LMD_DA.DRVR_WEEK AS 
(SELECT A.*,
B.DRVR_USER_ID
,MIN(SNAPSHOT_EFF_START_DT) AS Approved_On
,MAX(MARKET_NM) AS MARKET_NM
,DATE_DIFF(Last_WK_END, MIN(SNAPSHOT_EFF_START_DT), DAY) AS Duration
,DATE_DIFF(Last_WK_END, MIN(SNAPSHOT_EFF_START_DT), WEEK) AS Duration_Week
,CASE WHEN MIN(SNAPSHOT_EFF_START_DT) BETWEEN WK_START AND WK_END THEN 'Y' ELSE  'N' END AS New_Driver,
MAX(C.CBSA) AS CBSA,
MAX(C.SPARK_ZONE) AS SPARK_ZONE,
MAX(C.STORE_ID) AS STORE_ID,
MAX(CASE WHEN SNAPSHOT_EFF_END_DT BETWEEN WK_START AND WK_END AND DEACTIVATION_TYPE_NM IN ('MANUAL', 'MANUAL_SUSPEND') THEN 1 ELSE 0 END) AS Man_deact_driver
FROM LMD_DA.WMT_WEEK_PREV_WEEKS A
LEFT JOIN
 (SELECT DRVR_USER_ID, SNAPSHOT_EFF_START_DT, SNAPSHOT_EFF_END_DT , MARKET_NM,DEACTIVATION_TYPE_NM
    FROM
    (
    SELECT 
          DRVR_USER_ID
        , SNAPSHOT_EFF_START_DT
        , SNAPSHOT_EFF_END_DT
        , MARKET_NM
        , ROW_NUMBER() OVER (PARTITION BY DRVR_USER_ID, SNAPSHOT_EFF_START_DT ORDER BY SNAPSHOT_EFF_END_DT DESC) row_num
		,DEACTIVATION_TYPE_NM
    FROM   `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DRVR` 
    ) WHERE row_num=1
  ) B
 ON 1=1
 LEFT JOIN LMD_DA.DRVR_ZONE C
ON B.DRVR_USER_ID = C.DRVR_USER_ID
AND A.WM_WK  = C.WM_WK
WHERE 
a.WK_START <= b.SNAPSHOT_EFF_END_DT
AND 
a.WK_END >= b.SNAPSHOT_EFF_START_DT 
GROUP BY 1,2,3,4,5,6,7,8,9,10,11
);	


 -- Updating Sandbox   DRVR_WEEK
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.DRVR_WEEK` as ( select * from `wmt-driver-insights.LMD_DA.DRVR_WEEK`);
 

--Driver zone refrence table


CREATE OR REPLACE TABLE LMD_DA.DRIVER_STORE_REF
AS 
(
    SELECT
          C.WM_WK
        , C.DRVR_USER_ID
        , C.STORE_ID
        , MAX(D.CBSA) AS CBSA
         ,MAX(D.SPARK_ZONE) AS SPARK_ZONE
    FROM 
    (
    SELECT 
          a.WM_WK AS WM_WK
        , a.DRVR_USER_ID AS DRVR_USER_ID
        , CAST(b.STORE_ID AS FLOAT64) AS STORE_ID
        , b.SNAPSHOT_EFF_START_DT AS SNAPSHOT_EFF_START_DT
        , ROW_NUMBER() OVER (PARTITION BY CAST(a.WM_WK AS NUMERIC), a.DRVR_USER_ID ORDER BY b.SNAPSHOT_EFF_START_DT DESC, CAST(b.STORE_ID AS INT) DESC) RANK_VALUE
    FROM 
        LMD_DA.DRVR_WEEK AS a
   
	   LEFT JOIN 
       (SELECT * FROM `wmt-edw-prod.WW_SUPPLY_CHAIN_DL_VM.DRVR_STORE_FULFMT_PGM`
       WHERE   STORE_ID NOT LIKE '%-%' AND STORE_ID NOT LIKE "%'%" AND STORE_ID NOT LIKE '%"%' AND STORE_ID NOT LIKE "%'\'%" AND STORE_ID NOT LIKE "%#%" 
       )AS b
	   ----------------------------
    ON 
        a.DRVR_USER_ID = b.DRVR_USER_ID
        AND 
        a.WK_START <= b.SNAPSHOT_EFF_END_DT
        AND 
        a.WK_END >= b.SNAPSHOT_EFF_START_DT
    ) C
	LEFT JOIN LMD_DA.SPARK_ZONE_NEW D
	ON C.STORE_ID = D.STORE_ID
	WHERE C.RANK_VALUE=1
	GROUP BY 1,2,3
); 


  -- Updating Sandbox   DRIVER_STORE_REF
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.DRIVER_STORE_REF` as ( select * from `wmt-driver-insights.LMD_DA.DRIVER_STORE_REF`);


--Driver week level, driver segments are added

 


CREATE OR REPLACE TABLE LMD_DA.DRVR_WEEK_METRICS
AS (
SELECT C.*,
CASE WHEN Last_16_Wk_Orders < 1 AND Duration_Week > 16 THEN 'Deactivated' ELSE 'Eligible' END  AS Eligible_YN,
CASE WHEN (Last_16_Wk_Orders >= 1 OR Duration_Week <= 16) AND  Last_4_Wk_Orders >= 1 THEN 'Active' 
WHEN (Last_16_Wk_Orders >= 1 OR Duration_Week <= 16) THEN 'Inactive' ELSE   '--' END AS Active_YN,
CASE WHEN (Last_16_Wk_Orders >= 1 OR Duration_Week <= 16) AND  Last_4_Wk_Orders >= 1 AND Last_2_Wk_Orders >= 25 THEN 'Engaged' ELSE '--' END AS Engaged_YN,
CASE WHEN (Last_16_Wk_Orders >= 1 OR Duration_Week <= 16) AND  Last_4_Wk_Orders >= 1 AND Last_2_Wk_Orders >= 40 THEN 'Super Engaged' ELSE '--' END AS Super_Engaged_YN,
DNP.DRIVER_NPS_PROMOTERS,
DNP.DRIVER_NPS_DETRACTORS, 
DNP.DRIVER_NPS_TOTAL_RESPONDENTS
FROM
(SELECT 
    a.WM_WK
	,A.WM_WK_ID
    , a.DRVR_USER_ID
    , a.Approved_On
    , a.Duration
    , a.Duration_Week
    , a.New_Driver
	,a.Man_deact_driver
	,COALESCE(A.SPARK_ZONE,C.SPARK_ZONE, A.MARKET_NM) AS SPARK_ZONE
	,COALESCE(A.CBSA,C.CBSA, "No Info") AS CBSA
	,COALESCE(A.STORE_ID,C.STORE_ID) AS STORE_ID
	--- Only delivered orders are considered
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN WK_START AND WK_END AND CARRIER_DLVR_TS_TZ is not null THEN SALES_ORDER_NUM END)) AS This_Wk_Delivered_Orders
	--- Total Orders considered
	,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN Last_WK_START AND Last_WK_END THEN SALES_ORDER_NUM END)) AS Last_Wk_Orders
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN Last_2_WK_START AND Last_WK_END THEN SALES_ORDER_NUM END)) AS Last_2_Wk_Orders
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN Last_4_WK_START AND Last_WK_END THEN SALES_ORDER_NUM END)) AS Last_4_Wk_Orders
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN Last_8_WK_START AND Last_WK_END THEN SALES_ORDER_NUM END)) AS Last_8_Wk_Orders
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN Last_16_WK_START AND Last_WK_END THEN SALES_ORDER_NUM END)) AS Last_16_Wk_Orders
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN WK_START AND WK_END THEN SALES_ORDER_NUM END)) AS This_Wk_Orders
    ,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN Last_WK_START AND WK_END THEN SALES_ORDER_NUM END)) AS This_and_Last_Wk_Orders
	,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN WK_START AND WK_END AND FMT_TYPE IN (7,9) THEN SALES_ORDER_NUM END)) AS This_Wk_OG_Orders
	,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN WK_START AND WK_END AND FMT_TYPE NOT IN (7,9) AND AE_IND IS NULL THEN SALES_ORDER_NUM END)) AS This_Wk_dotcom_Orders
	,COUNT( DISTINCT (CASE WHEN SLOT_DT BETWEEN WK_START AND WK_END AND FMT_TYPE NOT IN (7,9) AND AE_IND IN (1) THEN SALES_ORDER_NUM END)) AS This_Wk_dotcom_AE_Orders
	,MIN(CASE WHEN SLOT_DT BETWEEN WK_START AND WK_END THEN SLOT_DT ELSE NULL END) AS WEEK_FIRST_DELIVERY_DT
FROM 
    LMD_DA.DRVR_WEEK AS a
LEFT JOIN 
 (SELECT DISTINCT SALES_ORDER_NUM, SLOT_DT, FMT_TYPE, DT_TYPE, DRVR_USER_ID, AE_IND,CARRIER_DLVR_TS_TZ FROM LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL 
 WHERE UPPER(CARRIER_ORG_NM) IN ('SPARK', 'BRINGG')
--  AND WM_WK_ID <= (SELECT MAX(WM_WK_ID) FROM `LMD_DA.SPARK_DELIVERY_DS_ALL_FINAL`) - 16
 ) B
ON 
    a.DRVR_USER_ID = B.DRVR_USER_ID
LEFT JOIN (SELECT DRVR_USER_ID, WM_WK, STORE_ID, CBSA, SPARK_ZONE
 FROM LMD_DA.DRIVER_STORE_REF
GROUP BY 1,2,3,4,5) C
ON A.DRVR_USER_ID = C.DRVR_USER_ID
AND A.WM_WK = C.WM_WK
GROUP BY 
    1,2,3,4,5,6,7,8,9,10,11
) C
INNER JOIN 
(SELECT DISTINCT SPARK_ZONE_NEW.SPARK_ZONE FROM LMD_DA.SPARK_ZONE_NEW) D
ON C.SPARK_ZONE = D.SPARK_ZONE
LEFT JOIN LMD_DA.ORDER_DRIVER_NPS_DS DNP
ON C.DRVR_USER_ID = DNP.DRIVER_USER_ID
AND CAST(C.WM_WK AS STRING)= CAST(DNP.WM_WK AS STRING)
);


 -- Updating Sandbox   DRVR_WEEK_METRICS
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.DRVR_WEEK_METRICS` as ( select * from `wmt-driver-insights.LMD_DA.DRVR_WEEK_METRICS`);
 


--Adding the queries for store & spark zone risk


---Creating a table with all possible weeks for a week

CREATE OR REPLACE TABLE LMD_DA.WEEKS_STAGE1
AS(
SELECT A.WM_WK AS WM_WK ,B.WM_WK AS WM_WK_SDR
FROM
(SELECT DISTINCT WM_WK
FROM LMD_DA.SPARK_DELIVERY_DS) A
JOIN (SELECT DISTINCT WM_WK
FROM LMD_DA.SPARK_DELIVERY_DS) B
ON A.WM_WK>=B.WM_WK
WHERE B.WM_WK IS NOT NULL
ORDER BY 1,2);


  -- Updating Sandbox   WEEKS_STAGE1
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.WEEKS_STAGE1` as ( select * from `wmt-driver-insights.LMD_DA.WEEKS_STAGE1`);
 
  

--Getting the SDR at a store week level for the last 9 weeks
CREATE OR REPLACE TABLE LMD_DA.STORE_WEEK_SDR
AS(
SELECT * 
FROM
(
SELECT STORE_ID,D.WM_WK AS WM_WK,D.WM_WK_SDR,SDR, RANK()OVER(PARTITION BY STORE_ID, CAST(D.WM_WK AS INT64) ORDER BY WM_WK_SDR DESC) AS WK_RANK 
FROM
(SELECT STORE_ID,WM_WK, SAFE_DIVIDE(COUNT(DISTINCT(CASE WHEN DELIVERY_STATUS ='DELIVERED' AND UPPER(CARRIER_ORG_NM)='SPARK' THEN CONCAT(SALES_ORDER_NUM,TRIP_ID,PO_NUM) ELSE NULL END)),
			COUNT(DISTINCT(CASE WHEN DELIVERY_STATUS ='DELIVERED' THEN CONCAT(SALES_ORDER_NUM,TRIP_ID,PO_NUM) ELSE NULL END))) AS SDR
			FROM
			(SELECT *, 
			CASE WHEN CARRIER_DLVR_TS_TZ IS NOT NULL THEN 'DELIVERED'  
			WHEN CARRIER_DLVR_TS_TZ IS NULL AND UPPER(STS_DESC)='SHIPPED' THEN 'INCOMPLETE DELIVERY'
			ELSE 'CANCELLED' END AS DELIVERY_STATUS 
			FROM LMD_DA.SPARK_DELIVERY_DS 
			) GROUP BY 1,2) C
 LEFT JOIN LMD_DA.WEEKS_STAGE1 D
 ON C.WM_WK=D.WM_WK_SDR)
 WHERE WK_RANK BETWEEN 2 AND 10
 ORDER BY STORE_ID,WM_WK);
 
  -- Updating Sandbox   STORE_WEEK_SDR
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.STORE_WEEK_SDR` as ( select * from `wmt-driver-insights.LMD_DA.STORE_WEEK_SDR`);
 
  
 
 -- Getting the SDR at a store week level for the last 9 weeks and the number of weeks SDR was below 90%
 
CREATE OR REPLACE TABLE LMD_DA.STORE_WEEK_SDR_90
AS
(SELECT *,(CASE WHEN SDR_WK1<0.9 THEN 1 ELSE 0 END)+(CASE WHEN SDR_WK2<0.9 THEN 1 ELSE 0 END)+(CASE WHEN SDR_WK3<0.9 THEN 1 ELSE 0 END)+
(CASE WHEN SDR_WK4<0.9 THEN 1 ELSE 0 END)+(CASE WHEN SDR_WK5<0.9 THEN 1 ELSE 0 END)+ (CASE WHEN SDR_WK6<0.9 THEN 1 ELSE 0 END)+
(CASE WHEN SDR_WK7<0.9 THEN 1 ELSE 0 END)+(CASE WHEN SDR_WK8<0.9 THEN 1 ELSE 0 END)+ (CASE WHEN SDR_WK9<0.9 THEN 1 ELSE 0 END) AS WEEKS_BELOW_90
FROM
(SELECT STORE_ID,WM_WK,MAX(SDR_WK1) AS SDR_WK1,MAX(SDR_WK2) AS SDR_WK2,MAX(SDR_WK3) AS SDR_WK3,MAX(SDR_WK4) AS SDR_WK4,
MAX(SDR_WK5) AS SDR_WK5,MAX(SDR_WK6) AS SDR_WK6,MAX(SDR_WK7) AS SDR_WK7,MAX(SDR_WK8) AS SDR_WK8,MAX(SDR_WK9) AS SDR_WK9
FROM
(SELECT STORE_ID,WM_WK,
CASE WHEN WK_RANK = 2 THEN SDR END AS SDR_WK1,
CASE WHEN WK_RANK = 3 THEN SDR END AS SDR_WK2,
CASE WHEN WK_RANK = 4 THEN SDR END AS SDR_WK3,
CASE WHEN WK_RANK = 5 THEN SDR END AS SDR_WK4,
CASE WHEN WK_RANK = 6 THEN SDR END AS SDR_WK5,
CASE WHEN WK_RANK = 7 THEN SDR END AS SDR_WK6,
CASE WHEN WK_RANK = 8 THEN SDR END AS SDR_WK7,
CASE WHEN WK_RANK = 9 THEN SDR END AS SDR_WK8,
CASE WHEN WK_RANK = 10 THEN SDR END AS SDR_WK9,
FROM LMD_DA.STORE_WEEK_SDR)
GROUP BY 1,2)GROUP BY 1,2,3,4,5,6,7,8,9,10,11);

-- Updating Sandbox   STORE_WEEK_SDR_90
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.STORE_WEEK_SDR_90` as ( select * from `wmt-driver-insights.LMD_DA.STORE_WEEK_SDR_90`);
 
 
--Getting average weekly Non Spark Deliveries in the last 4 weeks
CREATE OR REPLACE TABLE LMD_DA.STORE_NSD AS 
(
SELECT STORE_ID,WM_WK, ROUND(SUM(NON_SPARK_DELIVERIES)/4,0) AS AVG_NSD
FROM
(
SELECT STORE_ID,D.WM_WK AS WM_WK,D.WM_WK_SDR,NON_SPARK_DELIVERIES,RANK()OVER(PARTITION BY STORE_ID, CAST(D.WM_WK AS INT64) ORDER BY WM_WK_SDR DESC) AS WK_RANK 
FROM
(SELECT STORE_ID,WM_WK, COUNT(DISTINCT(CASE WHEN DELIVERY_STATUS ='DELIVERED' AND 
UPPER(CARRIER_ORG_NM)<>'SPARK' THEN CONCAT(SALES_ORDER_NUM,TRIP_ID,PO_NUM) ELSE NULL END)) AS NON_SPARK_DELIVERIES ,
			FROM
			(SELECT *, 
			CASE WHEN CARRIER_DLVR_TS_TZ IS NOT NULL THEN 'DELIVERED'  
			WHEN CARRIER_DLVR_TS_TZ IS NULL AND UPPER(STS_DESC)='SHIPPED' THEN 'INCOMPLETE DELIVERY'
			ELSE 'CANCELLED' END AS DELIVERY_STATUS 
			FROM LMD_DA.SPARK_DELIVERY_DS 
			) GROUP BY 1,2) C
 LEFT JOIN LMD_DA.WEEKS_STAGE1 D
 ON C.WM_WK=D.WM_WK_SDR)
 WHERE WK_RANK BETWEEN 2 AND 5
 GROUP BY 1,2);

-- Updating Sandbox   STORE_NSD
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.STORE_NSD` as ( select * from `wmt-driver-insights.LMD_DA.STORE_NSD`);
 


CREATE OR REPLACE TABLE LMD_DA.STORE_SDR_NSD_1
AS(
SELECT A.*,B.AVG_NSD, C.SPARK_ZONE,
CASE WHEN WEEKS_BELOW_90=0 THEN "Not USF"
WHEN WEEKS_BELOW_90>=1 AND WEEKS_BELOW_90 <= 3 THEN "Active Monitoring"
WHEN WEEKS_BELOW_90>=4 AND WEEKS_BELOW_90 <= 6 THEN "At-Risk"
WHEN WEEKS_BELOW_90>=7  THEN "Decision" ELSE NULL END AS STORE_USF_STATUS
FROM LMD_DA.STORE_WEEK_SDR_90 A
LEFT JOIN LMD_DA.STORE_NSD B
ON A.STORE_ID = B.STORE_ID
AND A.WM_WK = B.WM_WK
LEFT JOIN LMD_DA.SPARK_ZONE_NEW C
ON A.STORE_ID = C.STORE_ID
);

 -- Updating Sandbox   STORE_SDR_NSD_1
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.STORE_SDR_NSD_1` as ( select * from `wmt-driver-insights.LMD_DA.STORE_SDR_NSD_1`);
 
  

CREATE OR REPLACE TABLE LMD_DA.STORE_WEEK_RISK
AS(
SELECT *, CASE WHEN (STORE_USF_STATUS = "At-Risk" OR STORE_USF_STATUS = "Decision") OR AVG_NSD>=100 THEN "HIGH RISK STORE"
WHEN (STORE_USF_STATUS = "Not USF" OR STORE_USF_STATUS = "Active Monitoring") AND AVG_NSD>=30 AND AVG_NSD <100 THEN  "MEDIUM RISK STORE"
WHEN (STORE_USF_STATUS = "Not USF" OR STORE_USF_STATUS = "Active Monitoring") AND AVG_NSD<30  THEN  "LOW RISK STORE"
ELSE NULL END AS STORE_RISK
FROM LMD_DA.STORE_SDR_NSD_1
);

-- Updating Sandbox   STORE_WEEK_RISK
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.STORE_WEEK_RISK` as ( select * from `wmt-driver-insights.LMD_DA.STORE_WEEK_RISK`);
 
 
 
--Calcuating the Average NSD for each zone in the last 4 weeks 
CREATE OR REPLACE TABLE LMD_DA.ZONE_NSD AS 
(
SELECT SPARK_ZONE,WM_WK, ROUND(SUM(NON_SPARK_DELIVERIES)/4,0) AS ZONE_AVG_NSD
FROM
(
SELECT SPARK_ZONE,D.WM_WK AS WM_WK,D.WM_WK_SDR,NON_SPARK_DELIVERIES,RANK()OVER(PARTITION BY SPARK_ZONE, CAST(D.WM_WK AS INT64) ORDER BY WM_WK_SDR DESC) AS WK_RANK 
FROM
(SELECT SPARK_ZONE,WM_WK, COUNT(DISTINCT(CASE WHEN DELIVERY_STATUS ='DELIVERED' AND 
UPPER(CARRIER_ORG_NM)<>'SPARK' THEN CONCAT(SALES_ORDER_NUM,TRIP_ID,PO_NUM) ELSE NULL END)) AS NON_SPARK_DELIVERIES ,
			FROM
			(SELECT *, 
			CASE WHEN CARRIER_DLVR_TS_TZ IS NOT NULL THEN 'DELIVERED'  
			WHEN CARRIER_DLVR_TS_TZ IS NULL AND UPPER(STS_DESC)='SHIPPED' THEN 'INCOMPLETE DELIVERY'
			ELSE 'CANCELLED' END AS DELIVERY_STATUS 
			FROM LMD_DA.SPARK_DELIVERY_DS 
			) GROUP BY 1,2) C
 LEFT JOIN LMD_DA.WEEKS_STAGE1 D
 ON C.WM_WK=D.WM_WK_SDR)
 WHERE WK_RANK BETWEEN 2 AND 5
 GROUP BY 1,2);

-- Updating Sandbox   ZONE_NSD
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.ZONE_NSD` as ( select * from `wmt-driver-insights.LMD_DA.ZONE_NSD`);
 
 


CREATE OR REPLACE TABLE LMD_DA.ZONE_WEEK_RISK
AS(
SELECT SPARK_ZONE,WM_WK, 
CASE WHEN HIGH_RISK_STORES>=1 THEN "HIGH RISK ZONE"
WHEN HIGH_RISK_STORES=0 AND MEDIUM_RISK_STORES>=1 AND ZONE_AVG_NSD>=100 THEN "MEDIUM-HIGH RISK ZONE"
WHEN HIGH_RISK_STORES=0 AND MEDIUM_RISK_STORES>=1 AND ZONE_AVG_NSD<100 THEN "MEDIUM-LOW RISK ZONE"
WHEN HIGH_RISK_STORES=0 AND MEDIUM_RISK_STORES=0 THEN "LOW RISK ZONE"
ELSE NULL END AS ZONE_RISK
FROM 
      (SELECT A.SPARK_ZONE, A.WM_WK,COUNT(DISTINCT(CASE WHEN STORE_RISK="HIGH RISK STORE" THEN STORE_ID ELSE NULL END)) AS HIGH_RISK_STORES, 
      COUNT(DISTINCT( CASE WHEN STORE_RISK="MEDIUM RISK STORE" THEN STORE_ID ELSE NULL END)) AS MEDIUM_RISK_STORES,
      AVG(B.ZONE_AVG_NSD) AS ZONE_AVG_NSD
FROM LMD_DA.STORE_WEEK_RISK A 
LEFT JOIN LMD_DA.ZONE_NSD B 
ON A.SPARK_ZONE = B.SPARK_ZONE
AND A.WM_WK = B.WM_WK 
GROUP BY 1,2)
);

-- Updating Sandbox   ZONE_WEEK_RISK
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.ZONE_WEEK_RISK` as ( select * from `wmt-driver-insights.LMD_DA.ZONE_WEEK_RISK`);
 

CREATE OR REPLACE TABLE LMD_DA.STORE_SDR_NSD
AS(
SELECT A.*, B. ZONE_RISK AS ZONE_RISK
FROM LMD_DA.STORE_WEEK_RISK A 
LEFT JOIN LMD_DA.ZONE_WEEK_RISK B
ON A.SPARK_ZONE=B.SPARK_ZONE
AND A.WM_WK = B.WM_WK
);

-- Updating Sandbox   STORE_SDR_NSD
 CREATE OR REPLACE TABLE `wmt-edw-sandbox.LMD_DA.STORE_SDR_NSD` as ( select * from `wmt-driver-insights.LMD_DA.STORE_SDR_NSD`);